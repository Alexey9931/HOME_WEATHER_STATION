
NRF24_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00003b56  00003bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000049f  00800154  00800154  00003c3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004203  00000000  00000000  00003fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000138c  00000000  00000000  000081e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002751  00000000  00000000  00009573  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c18  00000000  00000000  0000bcc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b4d  00000000  00000000  0000c8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000042e6  00000000  00000000  0000d429  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0001170f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
       4:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__vector_1>
       8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      28:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      2c:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__vector_11>
      30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      48:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__c.2474>:
     16a:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf ef       	ldi	r28, 0xFF	; 255
     17c:	d8 e0       	ldi	r29, 0x08	; 8
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	e6 e5       	ldi	r30, 0x56	; 86
     18a:	fb e3       	ldi	r31, 0x3B	; 59
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
     18e:	05 90       	lpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	a4 35       	cpi	r26, 0x54	; 84
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
     198:	25 e0       	ldi	r18, 0x05	; 5
     19a:	a4 e5       	ldi	r26, 0x54	; 84
     19c:	b1 e0       	ldi	r27, 0x01	; 1
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	a3 3f       	cpi	r26, 0xF3	; 243
     1a4:	b2 07       	cpc	r27, r18
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	0e 94 ed 05 	call	0xbda	; 0xbda <main>
     1ac:	0c 94 a9 1d 	jmp	0x3b52	; 0x3b52 <_exit>

000001b0 <__bad_interrupt>:
     1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b4 <strob>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b4:	85 e0       	ldi	r24, 0x05	; 5
     1b6:	8a 95       	dec	r24
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <strob+0x2>
     1ba:	00 00       	nop
}
/*----------Тактовый импульс--------------------*/
void strob(void)
{
	_delay_us(1);
	PORTD |= (1<<E);
     1bc:	8b b1       	in	r24, 0x0b	; 11
     1be:	80 62       	ori	r24, 0x20	; 32
     1c0:	8b b9       	out	0x0b, r24	; 11
     1c2:	85 e0       	ldi	r24, 0x05	; 5
     1c4:	8a 95       	dec	r24
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <strob+0x10>
     1c8:	00 00       	nop
	_delay_us(1);
	PORTD &= ~(1<<E);
     1ca:	8b b1       	in	r24, 0x0b	; 11
     1cc:	8f 7d       	andi	r24, 0xDF	; 223
     1ce:	8b b9       	out	0x0b, r24	; 11
     1d0:	85 e0       	ldi	r24, 0x05	; 5
     1d2:	8a 95       	dec	r24
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <strob+0x1e>
     1d6:	00 00       	nop
     1d8:	08 95       	ret

000001da <LCD_12864_send_data>:
	for(n=0;str1[n]!='\0';n++)
	LCD_12864_send_data(str1[n]);
}
/*----------Отправка данных--------------------*/
void LCD_12864_send_data(uint8_t data)
{
     1da:	1f 93       	push	r17
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	18 2f       	mov	r17, r24
	PORTD |= (1<<RS);
     1e2:	8b b1       	in	r24, 0x0b	; 11
     1e4:	80 68       	ori	r24, 0x80	; 128
     1e6:	8b b9       	out	0x0b, r24	; 11
    //передача 5 единиц
	PORTD |= (1<<RW);
     1e8:	8b b1       	in	r24, 0x0b	; 11
     1ea:	80 64       	ori	r24, 0x40	; 64
     1ec:	8b b9       	out	0x0b, r24	; 11
	strob();
     1ee:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     1f2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     1f6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     1fa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     1fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	PORTD &= ~(1<<RW);//r/w=0
     202:	8b b1       	in	r24, 0x0b	; 11
     204:	8f 7b       	andi	r24, 0xBF	; 191
     206:	8b b9       	out	0x0b, r24	; 11
	strob();
     208:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	PORTD |= (1<<RW);//rs=1
     20c:	8b b1       	in	r24, 0x0b	; 11
     20e:	80 64       	ori	r24, 0x40	; 64
     210:	8b b9       	out	0x0b, r24	; 11
	strob();
     212:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	PORTD &= ~(1<<RW);
     216:	8b b1       	in	r24, 0x0b	; 11
     218:	8f 7b       	andi	r24, 0xBF	; 191
     21a:	8b b9       	out	0x0b, r24	; 11
	strob();
     21c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	for (int k = 0; k < 12; k++)
     220:	c0 e0       	ldi	r28, 0x00	; 0
     222:	d0 e0       	ldi	r29, 0x00	; 0
     224:	1c c0       	rjmp	.+56     	; 0x25e <LCD_12864_send_data+0x84>
	{
		if ((k == 4)||(k == 5)||(k == 6)||(k == 7))
     226:	ce 01       	movw	r24, r28
     228:	04 97       	sbiw	r24, 0x04	; 4
     22a:	04 97       	sbiw	r24, 0x04	; 4
     22c:	30 f4       	brcc	.+12     	; 0x23a <LCD_12864_send_data+0x60>
		{
			PORTD &= ~(1<<RW);
     22e:	8b b1       	in	r24, 0x0b	; 11
     230:	8f 7b       	andi	r24, 0xBF	; 191
     232:	8b b9       	out	0x0b, r24	; 11
			strob();
     234:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
     238:	11 c0       	rjmp	.+34     	; 0x25c <LCD_12864_send_data+0x82>
		}
		else
		{
			switch(data & 0x80)
     23a:	81 2f       	mov	r24, r17
     23c:	80 78       	andi	r24, 0x80	; 128
     23e:	41 f0       	breq	.+16     	; 0x250 <LCD_12864_send_data+0x76>
     240:	80 38       	cpi	r24, 0x80	; 128
     242:	59 f4       	brne	.+22     	; 0x25a <LCD_12864_send_data+0x80>
			{
				case 0x80: PORTD |= (1<<RW);
     244:	8b b1       	in	r24, 0x0b	; 11
     246:	80 64       	ori	r24, 0x40	; 64
     248:	8b b9       	out	0x0b, r24	; 11
						strob();
     24a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
						break;
     24e:	05 c0       	rjmp	.+10     	; 0x25a <LCD_12864_send_data+0x80>
				case 0: PORTD &= ~(1<<RW);
     250:	8b b1       	in	r24, 0x0b	; 11
     252:	8f 7b       	andi	r24, 0xBF	; 191
     254:	8b b9       	out	0x0b, r24	; 11
						strob();	
     256:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
						break;
			}
			data = data << 1;
     25a:	11 0f       	add	r17, r17
	strob();
	PORTD |= (1<<RW);//rs=1
	strob();
	PORTD &= ~(1<<RW);
	strob();
	for (int k = 0; k < 12; k++)
     25c:	21 96       	adiw	r28, 0x01	; 1
     25e:	cc 30       	cpi	r28, 0x0C	; 12
     260:	d1 05       	cpc	r29, r1
     262:	0c f3       	brlt	.-62     	; 0x226 <LCD_12864_send_data+0x4c>
			}
			data = data << 1;
		}
	}
	//передача 4 нулей
	PORTD &= ~(1<<RW);
     264:	8b b1       	in	r24, 0x0b	; 11
     266:	8f 7b       	andi	r24, 0xBF	; 191
     268:	8b b9       	out	0x0b, r24	; 11
	strob();
     26a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     26e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     272:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     276:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	
	PORTD &= ~(1<<RS);
     27a:	8b b1       	in	r24, 0x0b	; 11
     27c:	8f 77       	andi	r24, 0x7F	; 127
     27e:	8b b9       	out	0x0b, r24	; 11
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	08 95       	ret

00000288 <str_LCD_12864>:
	command = command | x;
	LCD_12864_send_command(command);
}
/*----------Вывод символьного текста строкой--------------------*/
void str_LCD_12864 (char *str1)
{
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	8c 01       	movw	r16, r24
	wchar_t n;
	for(n=0;str1[n]!='\0';n++)
     292:	c0 e0       	ldi	r28, 0x00	; 0
     294:	d0 e0       	ldi	r29, 0x00	; 0
     296:	03 c0       	rjmp	.+6      	; 0x29e <str_LCD_12864+0x16>
	LCD_12864_send_data(str1[n]);
     298:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_12864_send_data>
}
/*----------Вывод символьного текста строкой--------------------*/
void str_LCD_12864 (char *str1)
{
	wchar_t n;
	for(n=0;str1[n]!='\0';n++)
     29c:	21 96       	adiw	r28, 0x01	; 1
     29e:	f8 01       	movw	r30, r16
     2a0:	ec 0f       	add	r30, r28
     2a2:	fd 1f       	adc	r31, r29
     2a4:	80 81       	ld	r24, Z
     2a6:	81 11       	cpse	r24, r1
     2a8:	f7 cf       	rjmp	.-18     	; 0x298 <str_LCD_12864+0x10>
	LCD_12864_send_data(str1[n]);
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	08 95       	ret

000002b4 <LCD_12864_send_command>:
	
	PORTD &= ~(1<<RS);
}
/*----------Отправка команды--------------------*/
void LCD_12864_send_command(uint8_t command)
{
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	18 2f       	mov	r17, r24
	PORTD |= (1<<RS);
     2bc:	8b b1       	in	r24, 0x0b	; 11
     2be:	80 68       	ori	r24, 0x80	; 128
     2c0:	8b b9       	out	0x0b, r24	; 11
    //передача 5 единиц
	PORTD |= (1<<RW);
     2c2:	8b b1       	in	r24, 0x0b	; 11
     2c4:	80 64       	ori	r24, 0x40	; 64
     2c6:	8b b9       	out	0x0b, r24	; 11
	strob();
     2c8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     2cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     2d0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     2d4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     2d8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	PORTD &= ~(1<<RW);//r/w=0
     2dc:	8b b1       	in	r24, 0x0b	; 11
     2de:	8f 7b       	andi	r24, 0xBF	; 191
     2e0:	8b b9       	out	0x0b, r24	; 11
	strob();
     2e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	PORTD &= ~(1<<RW);//rs=0
     2e6:	8b b1       	in	r24, 0x0b	; 11
     2e8:	8f 7b       	andi	r24, 0xBF	; 191
     2ea:	8b b9       	out	0x0b, r24	; 11
	strob();
     2ec:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	PORTD &= ~(1<<RW);
     2f0:	8b b1       	in	r24, 0x0b	; 11
     2f2:	8f 7b       	andi	r24, 0xBF	; 191
     2f4:	8b b9       	out	0x0b, r24	; 11
	strob();
     2f6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	for (int k = 0; k < 12; k++)
     2fa:	c0 e0       	ldi	r28, 0x00	; 0
     2fc:	d0 e0       	ldi	r29, 0x00	; 0
     2fe:	1c c0       	rjmp	.+56     	; 0x338 <LCD_12864_send_command+0x84>
	{
		if ((k == 4)||(k == 5)||(k == 6)||(k == 7))
     300:	ce 01       	movw	r24, r28
     302:	04 97       	sbiw	r24, 0x04	; 4
     304:	04 97       	sbiw	r24, 0x04	; 4
     306:	30 f4       	brcc	.+12     	; 0x314 <LCD_12864_send_command+0x60>
		{
			PORTD &= ~(1<<RW);
     308:	8b b1       	in	r24, 0x0b	; 11
     30a:	8f 7b       	andi	r24, 0xBF	; 191
     30c:	8b b9       	out	0x0b, r24	; 11
			strob();
     30e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
     312:	11 c0       	rjmp	.+34     	; 0x336 <LCD_12864_send_command+0x82>
		}
		else
		{
			switch(command & 0x80)
     314:	81 2f       	mov	r24, r17
     316:	80 78       	andi	r24, 0x80	; 128
     318:	41 f0       	breq	.+16     	; 0x32a <LCD_12864_send_command+0x76>
     31a:	80 38       	cpi	r24, 0x80	; 128
     31c:	59 f4       	brne	.+22     	; 0x334 <LCD_12864_send_command+0x80>
			{
				case 0x80: PORTD |= (1<<RW);
     31e:	8b b1       	in	r24, 0x0b	; 11
     320:	80 64       	ori	r24, 0x40	; 64
     322:	8b b9       	out	0x0b, r24	; 11
				strob();
     324:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
				break;
     328:	05 c0       	rjmp	.+10     	; 0x334 <LCD_12864_send_command+0x80>
				case 0: PORTD &= ~(1<<RW);
     32a:	8b b1       	in	r24, 0x0b	; 11
     32c:	8f 7b       	andi	r24, 0xBF	; 191
     32e:	8b b9       	out	0x0b, r24	; 11
				strob();
     330:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
				break;
			}
			command = command << 1;
     334:	11 0f       	add	r17, r17
	strob();
	PORTD &= ~(1<<RW);//rs=0
	strob();
	PORTD &= ~(1<<RW);
	strob();
	for (int k = 0; k < 12; k++)
     336:	21 96       	adiw	r28, 0x01	; 1
     338:	cc 30       	cpi	r28, 0x0C	; 12
     33a:	d1 05       	cpc	r29, r1
     33c:	0c f3       	brlt	.-62     	; 0x300 <LCD_12864_send_command+0x4c>
			}
			command = command << 1;
		}
	}
	//передача 4 нулей
	PORTD &= ~(1<<RW);
     33e:	8b b1       	in	r24, 0x0b	; 11
     340:	8f 7b       	andi	r24, 0xBF	; 191
     342:	8b b9       	out	0x0b, r24	; 11
	strob();
     344:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     348:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     34c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	strob();
     350:	0e 94 da 00 	call	0x1b4	; 0x1b4 <strob>
	
	PORTD &= ~(1<<RS);
     354:	8b b1       	in	r24, 0x0b	; 11
     356:	8f 77       	andi	r24, 0x7F	; 127
     358:	8b b9       	out	0x0b, r24	; 11
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	08 95       	ret

00000362 <LCD_12864_GrapnicMode>:
	_delay_ms(10);
}
/*----------Включение графического режима--------------------*/
void LCD_12864_GrapnicMode(uint8_t enable)   // 1-enable, 0-disable
{
	if (enable) 
     362:	88 23       	and	r24, r24
     364:	99 f0       	breq	.+38     	; 0x38c <LCD_12864_GrapnicMode+0x2a>
	{
		LCD_12864_send_command(0x34); //Переходим в extended instruction
     366:	84 e3       	ldi	r24, 0x34	; 52
     368:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_12864_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36c:	8f e9       	ldi	r24, 0x9F	; 159
     36e:	9f e0       	ldi	r25, 0x0F	; 15
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <LCD_12864_GrapnicMode+0xe>
     374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_12864_GrapnicMode+0x14>
     376:	00 00       	nop
		_delay_ms(1);	
	    LCD_12864_send_command(0x36); //вкл графич. режим
     378:	86 e3       	ldi	r24, 0x36	; 54
     37a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_12864_send_command>
     37e:	8f e9       	ldi	r24, 0x9F	; 159
     380:	9f e0       	ldi	r25, 0x0F	; 15
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	f1 f7       	brne	.-4      	; 0x382 <LCD_12864_GrapnicMode+0x20>
     386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_12864_GrapnicMode+0x26>
     388:	00 00       	nop
     38a:	08 95       	ret
		_delay_ms(1);	
	}
	else
	{
		LCD_12864_send_command(0x30); //Переходим в basic instruction
     38c:	80 e3       	ldi	r24, 0x30	; 48
     38e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_12864_send_command>
     392:	8f e9       	ldi	r24, 0x9F	; 159
     394:	9f e0       	ldi	r25, 0x0F	; 15
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <LCD_12864_GrapnicMode+0x34>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <LCD_12864_GrapnicMode+0x3a>
     39c:	00 00       	nop
     39e:	08 95       	ret

000003a0 <LCD_12864_Draw_bitmap>:
		_delay_ms(1);
	}
}
/*----------Вывод изображения на экран дисплея--------------------*/
void LCD_12864_Draw_bitmap(const unsigned char *bitmap) {
     3a0:	8f 92       	push	r8
     3a2:	9f 92       	push	r9
     3a4:	af 92       	push	r10
     3a6:	bf 92       	push	r11
     3a8:	df 92       	push	r13
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	7c 01       	movw	r14, r24
	/// \param *bitmap - изображение 128*64. т.е. Буфер из 1024 элементов.
	uint8_t x, y;
	uint16_t i = 0;
	uint8_t Temp, Db;

	for (y = 0; y < 64; y++) {
     3b8:	d1 2c       	mov	r13, r1
     3ba:	31 c1       	rjmp	.+610    	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
		for (x = 0; x < 8; x++) {
			if (y < 32) {
     3bc:	8f e1       	ldi	r24, 0x1F	; 31
     3be:	8d 15       	cp	r24, r13
     3c0:	48 f0       	brcs	.+18     	; 0x3d4 <LCD_12864_Draw_bitmap+0x34>
				LCD_12864_send_command(0x80 | y);				//y(0-31)
     3c2:	8d 2d       	mov	r24, r13
     3c4:	80 68       	ori	r24, 0x80	; 128
     3c6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_12864_send_command>
				LCD_12864_send_command(0x80 | x);				//x(0-8)
     3ca:	80 2f       	mov	r24, r16
     3cc:	80 68       	ori	r24, 0x80	; 128
     3ce:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_12864_send_command>
     3d2:	09 c0       	rjmp	.+18     	; 0x3e6 <LCD_12864_Draw_bitmap+0x46>
				} else {
				LCD_12864_send_command(0x80 | (y - 32));		//y(0-31)
     3d4:	80 ee       	ldi	r24, 0xE0	; 224
     3d6:	8d 0d       	add	r24, r13
     3d8:	80 68       	ori	r24, 0x80	; 128
     3da:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_12864_send_command>
				LCD_12864_send_command(0x88 | x);				//x(0-8)
     3de:	80 2f       	mov	r24, r16
     3e0:	88 68       	ori	r24, 0x88	; 136
     3e2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_12864_send_command>
			}

			i = ((y / 8) * 128) + (x * 16);
     3e6:	cd 2d       	mov	r28, r13
     3e8:	c6 95       	lsr	r28
     3ea:	c6 95       	lsr	r28
     3ec:	c6 95       	lsr	r28
     3ee:	d0 e0       	ldi	r29, 0x00	; 0
     3f0:	cc 0f       	add	r28, r28
     3f2:	dd 1f       	adc	r29, r29
     3f4:	cc 0f       	add	r28, r28
     3f6:	dd 1f       	adc	r29, r29
     3f8:	cc 0f       	add	r28, r28
     3fa:	dd 1f       	adc	r29, r29
     3fc:	c0 0f       	add	r28, r16
     3fe:	d1 1d       	adc	r29, r1
     400:	c2 95       	swap	r28
     402:	d2 95       	swap	r29
     404:	d0 7f       	andi	r29, 0xF0	; 240
     406:	dc 27       	eor	r29, r28
     408:	c0 7f       	andi	r28, 0xF0	; 240
     40a:	dc 27       	eor	r29, r28
			Db = y % 8;

			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
     40c:	ce 0d       	add	r28, r14
     40e:	df 1d       	adc	r29, r15
     410:	88 80       	ld	r8, Y
     412:	91 2c       	mov	r9, r1
     414:	1d 2d       	mov	r17, r13
     416:	17 70       	andi	r17, 0x07	; 7
     418:	01 2e       	mov	r0, r17
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     41c:	95 94       	asr	r9
     41e:	87 94       	ror	r8
     420:	0a 94       	dec	r0
     422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     424:	96 94       	lsr	r9
     426:	98 2c       	mov	r9, r8
     428:	88 24       	eor	r8, r8
     42a:	97 94       	ror	r9
     42c:	87 94       	ror	r8
     42e:	a9 80       	ldd	r10, Y+1	; 0x01
     430:	b1 2c       	mov	r11, r1
     432:	01 2e       	mov	r0, r17
     434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     436:	b5 94       	asr	r11
     438:	a7 94       	ror	r10
     43a:	0a 94       	dec	r0
     43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	a8 22       	and	r10, r24
     442:	bb 24       	eor	r11, r11
     444:	00 24       	eor	r0, r0
     446:	b6 94       	lsr	r11
     448:	a7 94       	ror	r10
     44a:	07 94       	ror	r0
     44c:	b6 94       	lsr	r11
     44e:	a7 94       	ror	r10
     450:	07 94       	ror	r0
     452:	ba 2c       	mov	r11, r10
     454:	a0 2c       	mov	r10, r0
     456:	aa 81       	ldd	r26, Y+2	; 0x02
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	01 2e       	mov	r0, r17
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     45e:	b5 95       	asr	r27
     460:	a7 95       	ror	r26
     462:	0a 94       	dec	r0
     464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     466:	a1 70       	andi	r26, 0x01	; 1
     468:	bb 27       	eor	r27, r27
     46a:	aa 0f       	add	r26, r26
     46c:	bb 1f       	adc	r27, r27
     46e:	a2 95       	swap	r26
     470:	b2 95       	swap	r27
     472:	b0 7f       	andi	r27, 0xF0	; 240
     474:	ba 27       	eor	r27, r26
     476:	a0 7f       	andi	r26, 0xF0	; 240
     478:	ba 27       	eor	r27, r26
			| (((bitmap[i + 3] >> Db) & 0x01) << 4) | (((bitmap[i + 4] >> Db) & 0x01) << 3) | (((bitmap[i + 5] >> Db) & 0x01) << 2)
     47a:	eb 81       	ldd	r30, Y+3	; 0x03
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	01 2e       	mov	r0, r17
     480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     482:	f5 95       	asr	r31
     484:	e7 95       	ror	r30
     486:	0a 94       	dec	r0
     488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     48a:	e1 70       	andi	r30, 0x01	; 1
     48c:	ff 27       	eor	r31, r31
     48e:	e2 95       	swap	r30
     490:	f2 95       	swap	r31
     492:	f0 7f       	andi	r31, 0xF0	; 240
     494:	fe 27       	eor	r31, r30
     496:	e0 7f       	andi	r30, 0xF0	; 240
     498:	fe 27       	eor	r31, r30
     49a:	6c 81       	ldd	r22, Y+4	; 0x04
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	01 2e       	mov	r0, r17
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     4a2:	75 95       	asr	r23
     4a4:	67 95       	ror	r22
     4a6:	0a 94       	dec	r0
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     4aa:	61 70       	andi	r22, 0x01	; 1
     4ac:	77 27       	eor	r23, r23
     4ae:	66 0f       	add	r22, r22
     4b0:	77 1f       	adc	r23, r23
     4b2:	66 0f       	add	r22, r22
     4b4:	77 1f       	adc	r23, r23
     4b6:	66 0f       	add	r22, r22
     4b8:	77 1f       	adc	r23, r23
     4ba:	4d 81       	ldd	r20, Y+5	; 0x05
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	01 2e       	mov	r0, r17
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
     4c2:	55 95       	asr	r21
     4c4:	47 95       	ror	r20
     4c6:	0a 94       	dec	r0
     4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
     4ca:	41 70       	andi	r20, 0x01	; 1
     4cc:	55 27       	eor	r21, r21
     4ce:	44 0f       	add	r20, r20
     4d0:	55 1f       	adc	r21, r21
     4d2:	44 0f       	add	r20, r20
     4d4:	55 1f       	adc	r21, r21
			| (((bitmap[i + 6] >> Db) & 0x01) << 1) | (((bitmap[i + 7] >> Db) & 0x01) << 0);
     4d6:	2e 81       	ldd	r18, Y+6	; 0x06
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	01 2e       	mov	r0, r17
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
     4de:	35 95       	asr	r19
     4e0:	27 95       	ror	r18
     4e2:	0a 94       	dec	r0
     4e4:	e2 f7       	brpl	.-8      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
     4e6:	21 70       	andi	r18, 0x01	; 1
     4e8:	33 27       	eor	r19, r19
     4ea:	22 0f       	add	r18, r18
     4ec:	33 1f       	adc	r19, r19
     4ee:	8f 81       	ldd	r24, Y+7	; 0x07
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	01 2e       	mov	r0, r17
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
     4f6:	95 95       	asr	r25
     4f8:	87 95       	ror	r24
     4fa:	0a 94       	dec	r0
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			}

			i = ((y / 8) * 128) + (x * 16);
			Db = y % 8;

			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
     4fe:	a8 28       	or	r10, r8
     500:	aa 29       	or	r26, r10
     502:	ea 2b       	or	r30, r26
     504:	6e 2b       	or	r22, r30
     506:	46 2b       	or	r20, r22
     508:	24 2b       	or	r18, r20
     50a:	81 70       	andi	r24, 0x01	; 1
			| (((bitmap[i + 3] >> Db) & 0x01) << 4) | (((bitmap[i + 4] >> Db) & 0x01) << 3) | (((bitmap[i + 5] >> Db) & 0x01) << 2)
			| (((bitmap[i + 6] >> Db) & 0x01) << 1) | (((bitmap[i + 7] >> Db) & 0x01) << 0);
			LCD_12864_send_data(Temp);
     50c:	82 2b       	or	r24, r18
     50e:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_12864_send_data>

			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
     512:	88 84       	ldd	r8, Y+8	; 0x08
     514:	91 2c       	mov	r9, r1
     516:	01 2e       	mov	r0, r17
     518:	02 c0       	rjmp	.+4      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
     51a:	95 94       	asr	r9
     51c:	87 94       	ror	r8
     51e:	0a 94       	dec	r0
     520:	e2 f7       	brpl	.-8      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     522:	96 94       	lsr	r9
     524:	98 2c       	mov	r9, r8
     526:	88 24       	eor	r8, r8
     528:	97 94       	ror	r9
     52a:	87 94       	ror	r8
     52c:	a9 84       	ldd	r10, Y+9	; 0x09
     52e:	b1 2c       	mov	r11, r1
     530:	01 2e       	mov	r0, r17
     532:	02 c0       	rjmp	.+4      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
     534:	b5 94       	asr	r11
     536:	a7 94       	ror	r10
     538:	0a 94       	dec	r0
     53a:	e2 f7       	brpl	.-8      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	a8 22       	and	r10, r24
     540:	bb 24       	eor	r11, r11
     542:	00 24       	eor	r0, r0
     544:	b6 94       	lsr	r11
     546:	a7 94       	ror	r10
     548:	07 94       	ror	r0
     54a:	b6 94       	lsr	r11
     54c:	a7 94       	ror	r10
     54e:	07 94       	ror	r0
     550:	ba 2c       	mov	r11, r10
     552:	a0 2c       	mov	r10, r0
     554:	aa 85       	ldd	r26, Y+10	; 0x0a
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	01 2e       	mov	r0, r17
     55a:	02 c0       	rjmp	.+4      	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
     55c:	b5 95       	asr	r27
     55e:	a7 95       	ror	r26
     560:	0a 94       	dec	r0
     562:	e2 f7       	brpl	.-8      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
     564:	a1 70       	andi	r26, 0x01	; 1
     566:	bb 27       	eor	r27, r27
     568:	aa 0f       	add	r26, r26
     56a:	bb 1f       	adc	r27, r27
     56c:	a2 95       	swap	r26
     56e:	b2 95       	swap	r27
     570:	b0 7f       	andi	r27, 0xF0	; 240
     572:	ba 27       	eor	r27, r26
     574:	a0 7f       	andi	r26, 0xF0	; 240
     576:	ba 27       	eor	r27, r26
			| (((bitmap[i + 11] >> Db) & 0x01) << 4) | (((bitmap[i + 12] >> Db) & 0x01) << 3) | (((bitmap[i + 13] >> Db) & 0x01) << 2)
     578:	eb 85       	ldd	r30, Y+11	; 0x0b
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	01 2e       	mov	r0, r17
     57e:	02 c0       	rjmp	.+4      	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
     580:	f5 95       	asr	r31
     582:	e7 95       	ror	r30
     584:	0a 94       	dec	r0
     586:	e2 f7       	brpl	.-8      	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
     588:	e1 70       	andi	r30, 0x01	; 1
     58a:	ff 27       	eor	r31, r31
     58c:	e2 95       	swap	r30
     58e:	f2 95       	swap	r31
     590:	f0 7f       	andi	r31, 0xF0	; 240
     592:	fe 27       	eor	r31, r30
     594:	e0 7f       	andi	r30, 0xF0	; 240
     596:	fe 27       	eor	r31, r30
     598:	6c 85       	ldd	r22, Y+12	; 0x0c
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	01 2e       	mov	r0, r17
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     5a0:	75 95       	asr	r23
     5a2:	67 95       	ror	r22
     5a4:	0a 94       	dec	r0
     5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
     5a8:	61 70       	andi	r22, 0x01	; 1
     5aa:	77 27       	eor	r23, r23
     5ac:	66 0f       	add	r22, r22
     5ae:	77 1f       	adc	r23, r23
     5b0:	66 0f       	add	r22, r22
     5b2:	77 1f       	adc	r23, r23
     5b4:	66 0f       	add	r22, r22
     5b6:	77 1f       	adc	r23, r23
     5b8:	4d 85       	ldd	r20, Y+13	; 0x0d
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	01 2e       	mov	r0, r17
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
     5c0:	55 95       	asr	r21
     5c2:	47 95       	ror	r20
     5c4:	0a 94       	dec	r0
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
     5c8:	41 70       	andi	r20, 0x01	; 1
     5ca:	55 27       	eor	r21, r21
     5cc:	44 0f       	add	r20, r20
     5ce:	55 1f       	adc	r21, r21
     5d0:	44 0f       	add	r20, r20
     5d2:	55 1f       	adc	r21, r21
			| (((bitmap[i + 14] >> Db) & 0x01) << 1) | (((bitmap[i + 15] >> Db) & 0x01) << 0);
     5d4:	2e 85       	ldd	r18, Y+14	; 0x0e
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	01 2e       	mov	r0, r17
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
     5dc:	35 95       	asr	r19
     5de:	27 95       	ror	r18
     5e0:	0a 94       	dec	r0
     5e2:	e2 f7       	brpl	.-8      	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
     5e4:	21 70       	andi	r18, 0x01	; 1
     5e6:	33 27       	eor	r19, r19
     5e8:	22 0f       	add	r18, r18
     5ea:	33 1f       	adc	r19, r19
     5ec:	cf 85       	ldd	r28, Y+15	; 0x0f
     5ee:	d0 e0       	ldi	r29, 0x00	; 0
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5f2:	d5 95       	asr	r29
     5f4:	c7 95       	ror	r28
     5f6:	1a 95       	dec	r17
     5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
			| (((bitmap[i + 3] >> Db) & 0x01) << 4) | (((bitmap[i + 4] >> Db) & 0x01) << 3) | (((bitmap[i + 5] >> Db) & 0x01) << 2)
			| (((bitmap[i + 6] >> Db) & 0x01) << 1) | (((bitmap[i + 7] >> Db) & 0x01) << 0);
			LCD_12864_send_data(Temp);

			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
     5fa:	88 2d       	mov	r24, r8
     5fc:	8a 29       	or	r24, r10
     5fe:	8a 2b       	or	r24, r26
     600:	8e 2b       	or	r24, r30
     602:	86 2b       	or	r24, r22
     604:	84 2b       	or	r24, r20
     606:	82 2b       	or	r24, r18
     608:	c1 70       	andi	r28, 0x01	; 1
			| (((bitmap[i + 11] >> Db) & 0x01) << 4) | (((bitmap[i + 12] >> Db) & 0x01) << 3) | (((bitmap[i + 13] >> Db) & 0x01) << 2)
			| (((bitmap[i + 14] >> Db) & 0x01) << 1) | (((bitmap[i + 15] >> Db) & 0x01) << 0);

			LCD_12864_send_data(Temp);
     60a:	8c 2b       	or	r24, r28
     60c:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_12864_send_data>
	uint8_t x, y;
	uint16_t i = 0;
	uint8_t Temp, Db;

	for (y = 0; y < 64; y++) {
		for (x = 0; x < 8; x++) {
     610:	0f 5f       	subi	r16, 0xFF	; 255
     612:	01 c0       	rjmp	.+2      	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
     614:	00 e0       	ldi	r16, 0x00	; 0
     616:	08 30       	cpi	r16, 0x08	; 8
     618:	08 f4       	brcc	.+2      	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
     61a:	d0 ce       	rjmp	.-608    	; 0x3bc <LCD_12864_Draw_bitmap+0x1c>
	/// \param *bitmap - изображение 128*64. т.е. Буфер из 1024 элементов.
	uint8_t x, y;
	uint16_t i = 0;
	uint8_t Temp, Db;

	for (y = 0; y < 64; y++) {
     61c:	d3 94       	inc	r13
     61e:	8f e3       	ldi	r24, 0x3F	; 63
     620:	8d 15       	cp	r24, r13
     622:	c0 f7       	brcc	.-16     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
			| (((bitmap[i + 14] >> Db) & 0x01) << 1) | (((bitmap[i + 15] >> Db) & 0x01) << 0);

			LCD_12864_send_data(Temp);
		}
	}
}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	bf 90       	pop	r11
     634:	af 90       	pop	r10
     636:	9f 90       	pop	r9
     638:	8f 90       	pop	r8
     63a:	08 95       	ret

0000063c <clear_LCD_12864>:
	}
}
/*----------Очистка--------------------*/
void clear_LCD_12864(void)
{
	LCD_12864_send_command(0x1);//clear
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_12864_send_command>
     642:	8f e3       	ldi	r24, 0x3F	; 63
     644:	9c e9       	ldi	r25, 0x9C	; 156
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <clear_LCD_12864+0xa>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <clear_LCD_12864+0x10>
     64c:	00 00       	nop
     64e:	08 95       	ret

00000650 <LCD_12864_ini>:
     650:	2f ef       	ldi	r18, 0xFF	; 255
     652:	83 ef       	ldi	r24, 0xF3	; 243
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	21 50       	subi	r18, 0x01	; 1
     658:	80 40       	sbci	r24, 0x00	; 0
     65a:	90 40       	sbci	r25, 0x00	; 0
     65c:	e1 f7       	brne	.-8      	; 0x656 <LCD_12864_ini+0x6>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <LCD_12864_ini+0x10>
     660:	00 00       	nop
};*/
/*----------Инициализация--------------------*/
void LCD_12864_ini(void)
{
	_delay_ms(40);
	LCD_12864_send_command(0xC);//display on
     662:	8c e0       	ldi	r24, 0x0C	; 12
     664:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_12864_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     668:	8f e8       	ldi	r24, 0x8F	; 143
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	f1 f7       	brne	.-4      	; 0x66c <LCD_12864_ini+0x1c>
     670:	00 c0       	rjmp	.+0      	; 0x672 <LCD_12864_ini+0x22>
     672:	00 00       	nop
	_delay_us(100);
	clear_LCD_12864();
     674:	0e 94 1e 03 	call	0x63c	; 0x63c <clear_LCD_12864>
	LCD_12864_send_command(6);//курсор сдвигается вправо
     678:	86 e0       	ldi	r24, 0x06	; 6
     67a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_12864_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     67e:	8f e3       	ldi	r24, 0x3F	; 63
     680:	9c e9       	ldi	r25, 0x9C	; 156
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	f1 f7       	brne	.-4      	; 0x682 <LCD_12864_ini+0x32>
     686:	00 c0       	rjmp	.+0      	; 0x688 <LCD_12864_ini+0x38>
     688:	00 00       	nop
     68a:	08 95       	ret

0000068c <setpos_LCD_12864>:
}
/*----------Позиционирование символьного текста--------------------*/
void setpos_LCD_12864(unsigned char x, unsigned y)
{
	uint8_t command;
	switch (y)
     68c:	61 30       	cpi	r22, 0x01	; 1
     68e:	71 05       	cpc	r23, r1
     690:	41 f0       	breq	.+16     	; 0x6a2 <setpos_LCD_12864+0x16>
     692:	68 f0       	brcs	.+26     	; 0x6ae <setpos_LCD_12864+0x22>
     694:	62 30       	cpi	r22, 0x02	; 2
     696:	71 05       	cpc	r23, r1
     698:	31 f0       	breq	.+12     	; 0x6a6 <setpos_LCD_12864+0x1a>
     69a:	63 30       	cpi	r22, 0x03	; 3
     69c:	71 05       	cpc	r23, r1
     69e:	29 f0       	breq	.+10     	; 0x6aa <setpos_LCD_12864+0x1e>
     6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <setpos_LCD_12864+0x24>
	{
		case 0: command = 0x80; break;
		case 1: command = 0x90; break;
     6a2:	90 e9       	ldi	r25, 0x90	; 144
     6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <setpos_LCD_12864+0x24>
		case 2: command = 0x88; break;
     6a6:	98 e8       	ldi	r25, 0x88	; 136
     6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <setpos_LCD_12864+0x24>
		case 3: command = 0x98; break;
     6aa:	98 e9       	ldi	r25, 0x98	; 152
     6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <setpos_LCD_12864+0x24>
void setpos_LCD_12864(unsigned char x, unsigned y)
{
	uint8_t command;
	switch (y)
	{
		case 0: command = 0x80; break;
     6ae:	90 e8       	ldi	r25, 0x80	; 128
		case 1: command = 0x90; break;
		case 2: command = 0x88; break;
		case 3: command = 0x98; break;
	}
	command = command | x;
	LCD_12864_send_command(command);
     6b0:	89 2b       	or	r24, r25
     6b2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_12864_send_command>
     6b6:	08 95       	ret

000006b8 <LCD_12864_print_symbol>:
	_delay_us(1);
	PORTD &= ~(1<<E);
	_delay_us(1);
}
/*---------------------Функция вывода символа на дисплей-----------------------------*/
void LCD_12864_print_symbol(uint16_t x, uint16_t symbol, uint8_t inversion) {
     6b8:	bf 92       	push	r11
     6ba:	cf 92       	push	r12
     6bc:	df 92       	push	r13
     6be:	ef 92       	push	r14
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	6c 01       	movw	r12, r24
     6cc:	7b 01       	movw	r14, r22
     6ce:	b4 2e       	mov	r11, r20
	/// 6 строка: x = 640;
	/// 7 строка: x = 786;
	/// 8 строка: x = 896;
	/// \param symbol - код символа
	/// \param inversion - инверсия. 1 - вкл, 0 - выкл.
	for (int i = 0; i <= 6; i++) {
     6d0:	c0 e0       	ldi	r28, 0x00	; 0
     6d2:	d0 e0       	ldi	r29, 0x00	; 0
     6d4:	2d c0       	rjmp	.+90     	; 0x730 <LCD_12864_print_symbol+0x78>
		if (inversion) {
     6d6:	bb 20       	and	r11, r11
     6d8:	b1 f0       	breq	.+44     	; 0x706 <LCD_12864_print_symbol+0x4e>
			Frame_buffer[i + x - 1] = ~read_symbol_from_SD ((symbol * 6) + i);
     6da:	8e 01       	movw	r16, r28
     6dc:	0c 0d       	add	r16, r12
     6de:	1d 1d       	adc	r17, r13
     6e0:	01 50       	subi	r16, 0x01	; 1
     6e2:	11 09       	sbc	r17, r1
     6e4:	c7 01       	movw	r24, r14
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	8e 0d       	add	r24, r14
     6ec:	9f 1d       	adc	r25, r15
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	8c 0f       	add	r24, r28
     6f4:	9d 1f       	adc	r25, r29
     6f6:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <read_symbol_from_SD>
     6fa:	f8 01       	movw	r30, r16
     6fc:	e8 51       	subi	r30, 0x18	; 24
     6fe:	fe 4f       	sbci	r31, 0xFE	; 254
     700:	80 95       	com	r24
     702:	80 83       	st	Z, r24
     704:	14 c0       	rjmp	.+40     	; 0x72e <LCD_12864_print_symbol+0x76>
			//Frame_buffer[i + x - 1] = ~Font[(symbol * 6) + i];
			} else {
			Frame_buffer[i + x - 1] = read_symbol_from_SD ((symbol * 6) + i);
     706:	86 01       	movw	r16, r12
     708:	0c 0f       	add	r16, r28
     70a:	1d 1f       	adc	r17, r29
     70c:	01 50       	subi	r16, 0x01	; 1
     70e:	11 09       	sbc	r17, r1
     710:	c7 01       	movw	r24, r14
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	8e 0d       	add	r24, r14
     718:	9f 1d       	adc	r25, r15
     71a:	88 0f       	add	r24, r24
     71c:	99 1f       	adc	r25, r25
     71e:	8c 0f       	add	r24, r28
     720:	9d 1f       	adc	r25, r29
     722:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <read_symbol_from_SD>
     726:	f8 01       	movw	r30, r16
     728:	e8 51       	subi	r30, 0x18	; 24
     72a:	fe 4f       	sbci	r31, 0xFE	; 254
     72c:	80 83       	st	Z, r24
	/// 6 строка: x = 640;
	/// 7 строка: x = 786;
	/// 8 строка: x = 896;
	/// \param symbol - код символа
	/// \param inversion - инверсия. 1 - вкл, 0 - выкл.
	for (int i = 0; i <= 6; i++) {
     72e:	21 96       	adiw	r28, 0x01	; 1
     730:	c7 30       	cpi	r28, 0x07	; 7
     732:	d1 05       	cpc	r29, r1
     734:	84 f2       	brlt	.-96     	; 0x6d6 <LCD_12864_print_symbol+0x1e>
			} else {
			Frame_buffer[i + x - 1] = read_symbol_from_SD ((symbol * 6) + i);
			//Frame_buffer[i + x - 1] = Font[(symbol * 6) + i];
		}
	}
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	bf 90       	pop	r11
     748:	08 95       	ret

0000074a <LCD_12864_Decode_UTF8>:
/*----------------Функция декодирования UTF-8 в набор символов-----------------*/
void LCD_12864_Decode_UTF8(uint16_t x, uint8_t y, uint8_t inversion, char *tx_buffer) {
     74a:	9f 92       	push	r9
     74c:	af 92       	push	r10
     74e:	bf 92       	push	r11
     750:	cf 92       	push	r12
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	ac 97       	sbiw	r28, 0x2c	; 44
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	6c 01       	movw	r12, r24
     772:	16 2f       	mov	r17, r22
     774:	94 2e       	mov	r9, r20
     776:	59 01       	movw	r10, r18
	/// 7 строка: x = 786;
	/// 8 строка: x = 896;
	
	//Начинаем работу с файловой системой для считывания массива шрифтов
	FATFS fs;
	asm("nop");
     778:	00 00       	nop
	pf_mount(&fs); //Монтируем FAT
     77a:	ce 01       	movw	r24, r28
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <pf_mount>
	pf_open("/Font.txt");
     782:	87 e0       	ldi	r24, 0x07	; 7
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 68 10 	call	0x20d0	; 0x20d0 <pf_open>
	
	x = x + y * 128;
     78a:	80 e8       	ldi	r24, 0x80	; 128
     78c:	18 9f       	mul	r17, r24
     78e:	c0 0c       	add	r12, r0
     790:	d1 1c       	adc	r13, r1
     792:	11 24       	eor	r1, r1
	uint16_t symbol = 0;
	for (int i = 0; i < strlen(tx_buffer); i++) 
     794:	e1 2c       	mov	r14, r1
     796:	f1 2c       	mov	r15, r1
     798:	7e c0       	rjmp	.+252    	; 0x896 <__DATA_REGION_LENGTH__+0x96>
	{
		if ((tx_buffer[i] < 192)&&(tx_buffer[i]!=168)&&(tx_buffer[i]!=184)&&(tx_buffer[i]!=183)) 
     79a:	f5 01       	movw	r30, r10
     79c:	ee 0d       	add	r30, r14
     79e:	ff 1d       	adc	r31, r15
     7a0:	00 81       	ld	r16, Z
     7a2:	00 3c       	cpi	r16, 0xC0	; 192
     7a4:	d8 f4       	brcc	.+54     	; 0x7dc <LCD_12864_Decode_UTF8+0x92>
     7a6:	08 3a       	cpi	r16, 0xA8	; 168
     7a8:	c9 f0       	breq	.+50     	; 0x7dc <LCD_12864_Decode_UTF8+0x92>
     7aa:	08 3b       	cpi	r16, 0xB8	; 184
     7ac:	b9 f0       	breq	.+46     	; 0x7dc <LCD_12864_Decode_UTF8+0x92>
     7ae:	07 3b       	cpi	r16, 0xB7	; 183
     7b0:	a9 f0       	breq	.+42     	; 0x7dc <LCD_12864_Decode_UTF8+0x92>
		{   //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°" 
			symbol = tx_buffer[i];
     7b2:	60 2f       	mov	r22, r16
     7b4:	70 e0       	ldi	r23, 0x00	; 0
			if (inversion) 
     7b6:	99 20       	and	r9, r9
     7b8:	39 f0       	breq	.+14     	; 0x7c8 <LCD_12864_Decode_UTF8+0x7e>
			{
				LCD_12864_print_symbol(x, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
     7ba:	60 52       	subi	r22, 0x20	; 32
     7bc:	71 09       	sbc	r23, r1
     7be:	41 e0       	ldi	r20, 0x01	; 1
     7c0:	c6 01       	movw	r24, r12
     7c2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_12864_print_symbol>
     7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <LCD_12864_Decode_UTF8+0x8a>
			} 
			else 
			{
				LCD_12864_print_symbol(x, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
     7c8:	60 52       	subi	r22, 0x20	; 32
     7ca:	71 09       	sbc	r23, r1
     7cc:	40 e0       	ldi	r20, 0x00	; 0
     7ce:	c6 01       	movw	r24, r12
     7d0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_12864_print_symbol>
			}
			x = x + 6;			
     7d4:	86 e0       	ldi	r24, 0x06	; 6
     7d6:	c8 0e       	add	r12, r24
     7d8:	d1 1c       	adc	r13, r1
     7da:	5a c0       	rjmp	.+180    	; 0x890 <__DATA_REGION_LENGTH__+0x90>
		}
		else 
		{ //Русский текст
			symbol = tx_buffer[i];
     7dc:	10 e0       	ldi	r17, 0x00	; 0
			if ((symbol <= 255) && (symbol >= 192)) 
     7de:	c8 01       	movw	r24, r16
     7e0:	80 5c       	subi	r24, 0xC0	; 192
     7e2:	91 09       	sbc	r25, r1
     7e4:	80 34       	cpi	r24, 0x40	; 64
     7e6:	91 05       	cpc	r25, r1
     7e8:	a0 f4       	brcc	.+40     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
			{
				if (inversion) 
     7ea:	99 20       	and	r9, r9
     7ec:	41 f0       	breq	.+16     	; 0x7fe <LCD_12864_Decode_UTF8+0xb4>
				{
					LCD_12864_print_symbol(x, symbol - 97, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
     7ee:	41 e0       	ldi	r20, 0x01	; 1
     7f0:	b8 01       	movw	r22, r16
     7f2:	61 56       	subi	r22, 0x61	; 97
     7f4:	71 09       	sbc	r23, r1
     7f6:	c6 01       	movw	r24, r12
     7f8:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_12864_print_symbol>
     7fc:	07 c0       	rjmp	.+14     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
				} 
				else 
				{
					LCD_12864_print_symbol(x, symbol - 97, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	b8 01       	movw	r22, r16
     802:	61 56       	subi	r22, 0x61	; 97
     804:	71 09       	sbc	r23, r1
     806:	c6 01       	movw	r24, r12
     808:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_12864_print_symbol>
				}
				x = x + 6;
     80c:	86 e0       	ldi	r24, 0x06	; 6
     80e:	c8 0e       	add	r12, r24
     810:	d1 1c       	adc	r13, r1
			} 			
			if (symbol == 168) 
     812:	08 3a       	cpi	r16, 0xA8	; 168
     814:	11 05       	cpc	r17, r1
     816:	91 f4       	brne	.+36     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
			{
				if (inversion) 
     818:	99 20       	and	r9, r9
     81a:	39 f0       	breq	.+14     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
				{
					LCD_12864_print_symbol(x, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
     81c:	41 e0       	ldi	r20, 0x01	; 1
     81e:	6f e9       	ldi	r22, 0x9F	; 159
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	c6 01       	movw	r24, r12
     824:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_12864_print_symbol>
     828:	06 c0       	rjmp	.+12     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
				} 
				else 
				{
					LCD_12864_print_symbol(x, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	6f e9       	ldi	r22, 0x9F	; 159
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	c6 01       	movw	r24, r12
     832:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_12864_print_symbol>
				}
				x = x + 6;
     836:	86 e0       	ldi	r24, 0x06	; 6
     838:	c8 0e       	add	r12, r24
     83a:	d1 1c       	adc	r13, r1
			} 
		    if (symbol == 184) 
     83c:	08 3b       	cpi	r16, 0xB8	; 184
     83e:	11 05       	cpc	r17, r1
     840:	91 f4       	brne	.+36     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
			{
				if (inversion) 
     842:	99 20       	and	r9, r9
     844:	39 f0       	breq	.+14     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
				{
					LCD_12864_print_symbol(x, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
     846:	41 e0       	ldi	r20, 0x01	; 1
     848:	60 ea       	ldi	r22, 0xA0	; 160
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	c6 01       	movw	r24, r12
     84e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_12864_print_symbol>
     852:	06 c0       	rjmp	.+12     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
				} else 
				{
					LCD_12864_print_symbol(x, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	60 ea       	ldi	r22, 0xA0	; 160
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	c6 01       	movw	r24, r12
     85c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_12864_print_symbol>
				}
				x = x + 6;
     860:	86 e0       	ldi	r24, 0x06	; 6
     862:	c8 0e       	add	r12, r24
     864:	d1 1c       	adc	r13, r1
			} 
			if (symbol == 183) 
     866:	07 3b       	cpi	r16, 0xB7	; 183
     868:	11 05       	cpc	r17, r1
     86a:	91 f4       	brne	.+36     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
			{
				if (inversion)
     86c:	99 20       	and	r9, r9
     86e:	39 f0       	breq	.+14     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
			    {
					LCD_12864_print_symbol(x, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	61 ea       	ldi	r22, 0xA1	; 161
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	c6 01       	movw	r24, r12
     878:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_12864_print_symbol>
     87c:	06 c0       	rjmp	.+12     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
				} 
				else 
				{
					LCD_12864_print_symbol(x, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	61 ea       	ldi	r22, 0xA1	; 161
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	c6 01       	movw	r24, r12
     886:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_12864_print_symbol>
				}
				x = x + 6;
     88a:	86 e0       	ldi	r24, 0x06	; 6
     88c:	c8 0e       	add	r12, r24
     88e:	d1 1c       	adc	r13, r1
	pf_mount(&fs); //Монтируем FAT
	pf_open("/Font.txt");
	
	x = x + y * 128;
	uint16_t symbol = 0;
	for (int i = 0; i < strlen(tx_buffer); i++) 
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	e8 1a       	sub	r14, r24
     894:	f8 0a       	sbc	r15, r24
     896:	f5 01       	movw	r30, r10
     898:	01 90       	ld	r0, Z+
     89a:	00 20       	and	r0, r0
     89c:	e9 f7       	brne	.-6      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	ea 19       	sub	r30, r10
     8a2:	fb 09       	sbc	r31, r11
     8a4:	ee 16       	cp	r14, r30
     8a6:	ff 06       	cpc	r15, r31
     8a8:	08 f4       	brcc	.+2      	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     8aa:	77 cf       	rjmp	.-274    	; 0x79a <LCD_12864_Decode_UTF8+0x50>
			}

		}
	}
	// Завершаем работу с файлом
	pf_mount(0x00);
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <pf_mount>
}
     8b4:	ac 96       	adiw	r28, 0x2c	; 44
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	bf 90       	pop	r11
     8d2:	af 90       	pop	r10
     8d4:	9f 90       	pop	r9
     8d6:	08 95       	ret

000008d8 <wind_speed>:
uint8_t flag_irq = 1;

float RADIUS = 0.09;

float wind_speed (char *counter)
{
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <wind_speed+0xe>
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
	float speed = 0;
	int n;
	if (strlen(counter) != 0)
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 81       	ld	r18, Z
     8ee:	22 23       	and	r18, r18
     8f0:	a1 f0       	breq	.+40     	; 0x91a <__stack+0x1b>
	{
		sscanf(counter, "%d", &n);
     8f2:	9e 01       	movw	r18, r28
     8f4:	2f 5f       	subi	r18, 0xFF	; 255
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	3f 93       	push	r19
     8fa:	2f 93       	push	r18
     8fc:	21 e1       	ldi	r18, 0x11	; 17
     8fe:	31 e0       	ldi	r19, 0x01	; 1
     900:	3f 93       	push	r19
     902:	2f 93       	push	r18
     904:	9f 93       	push	r25
     906:	8f 93       	push	r24
     908:	0e 94 17 1a 	call	0x342e	; 0x342e <sscanf>
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0x1f>
	}
	else
	{
        n = 0;
     91a:	1a 82       	std	Y+2, r1	; 0x02
     91c:	19 82       	std	Y+1, r1	; 0x01
	}
	speed = 2*3.14*RADIUS*n/4; //период 2 сек+2 магнита
     91e:	23 ec       	ldi	r18, 0xC3	; 195
     920:	35 ef       	ldi	r19, 0xF5	; 245
     922:	48 ec       	ldi	r20, 0xC8	; 200
     924:	50 e4       	ldi	r21, 0x40	; 64
     926:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     92a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     92e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     932:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     936:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__mulsf3>
     93a:	6b 01       	movw	r12, r22
     93c:	7c 01       	movw	r14, r24
     93e:	69 81       	ldd	r22, Y+1	; 0x01
     940:	7a 81       	ldd	r23, Y+2	; 0x02
     942:	07 2e       	mov	r0, r23
     944:	00 0c       	add	r0, r0
     946:	88 0b       	sbc	r24, r24
     948:	99 0b       	sbc	r25, r25
     94a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatsisf>
     94e:	a7 01       	movw	r20, r14
     950:	96 01       	movw	r18, r12
     952:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__mulsf3>
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e8       	ldi	r20, 0x80	; 128
     95c:	5e e3       	ldi	r21, 0x3E	; 62
     95e:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__mulsf3>
	
	return speed;
}
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	df 90       	pop	r13
     970:	cf 90       	pop	r12
     972:	08 95       	ret

00000974 <V_BAT>:
float V_BAT (char *adc_value)
{
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	00 d0       	rcall	.+0      	; 0x97a <V_BAT+0x6>
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
	float VBAT;
	int V;
	if (strlen(adc_value) != 0)
     97e:	fc 01       	movw	r30, r24
     980:	20 81       	ld	r18, Z
     982:	22 23       	and	r18, r18
     984:	a1 f0       	breq	.+40     	; 0x9ae <V_BAT+0x3a>
	{
		sscanf(adc_value, "%d", &V);
     986:	9e 01       	movw	r18, r28
     988:	2f 5f       	subi	r18, 0xFF	; 255
     98a:	3f 4f       	sbci	r19, 0xFF	; 255
     98c:	3f 93       	push	r19
     98e:	2f 93       	push	r18
     990:	21 e1       	ldi	r18, 0x11	; 17
     992:	31 e0       	ldi	r19, 0x01	; 1
     994:	3f 93       	push	r19
     996:	2f 93       	push	r18
     998:	9f 93       	push	r25
     99a:	8f 93       	push	r24
     99c:	0e 94 17 1a 	call	0x342e	; 0x342e <sscanf>
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <V_BAT+0x3e>
	}
	else
	{
		V = 0;
     9ae:	1a 82       	std	Y+2, r1	; 0x02
     9b0:	19 82       	std	Y+1, r1	; 0x01
	}
	VBAT = V*2.45*3/1024;
     9b2:	69 81       	ldd	r22, Y+1	; 0x01
     9b4:	7a 81       	ldd	r23, Y+2	; 0x02
     9b6:	07 2e       	mov	r0, r23
     9b8:	00 0c       	add	r0, r0
     9ba:	88 0b       	sbc	r24, r24
     9bc:	99 0b       	sbc	r25, r25
     9be:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatsisf>
     9c2:	2d ec       	ldi	r18, 0xCD	; 205
     9c4:	3c ec       	ldi	r19, 0xCC	; 204
     9c6:	4c e1       	ldi	r20, 0x1C	; 28
     9c8:	50 e4       	ldi	r21, 0x40	; 64
     9ca:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__mulsf3>
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	40 e4       	ldi	r20, 0x40	; 64
     9d4:	50 e4       	ldi	r21, 0x40	; 64
     9d6:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__mulsf3>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	40 e8       	ldi	r20, 0x80	; 128
     9e0:	5a e3       	ldi	r21, 0x3A	; 58
     9e2:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__mulsf3>
	
	return VBAT;
}
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <RAIN_AMOUNT>:
float RAIN_AMOUNT(char *adc_value)
{
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <RAIN_AMOUNT+0x6>
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
	float RAIN;
	int R;
	if (strlen(adc_value) != 0)
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 81       	ld	r18, Z
     9fe:	22 23       	and	r18, r18
     a00:	a1 f0       	breq	.+40     	; 0xa2a <RAIN_AMOUNT+0x3a>
	{
		sscanf(adc_value, "%d", &R);
     a02:	9e 01       	movw	r18, r28
     a04:	2f 5f       	subi	r18, 0xFF	; 255
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	3f 93       	push	r19
     a0a:	2f 93       	push	r18
     a0c:	21 e1       	ldi	r18, 0x11	; 17
     a0e:	31 e0       	ldi	r19, 0x01	; 1
     a10:	3f 93       	push	r19
     a12:	2f 93       	push	r18
     a14:	9f 93       	push	r25
     a16:	8f 93       	push	r24
     a18:	0e 94 17 1a 	call	0x342e	; 0x342e <sscanf>
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <RAIN_AMOUNT+0x3e>
	}
	else
	{
		R = 0;
     a2a:	1a 82       	std	Y+2, r1	; 0x02
     a2c:	19 82       	std	Y+1, r1	; 0x01
	}
    RAIN = 3*R*2.45/5120;
     a2e:	69 81       	ldd	r22, Y+1	; 0x01
     a30:	7a 81       	ldd	r23, Y+2	; 0x02
     a32:	cb 01       	movw	r24, r22
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	68 0f       	add	r22, r24
     a3a:	79 1f       	adc	r23, r25
     a3c:	07 2e       	mov	r0, r23
     a3e:	00 0c       	add	r0, r0
     a40:	88 0b       	sbc	r24, r24
     a42:	99 0b       	sbc	r25, r25
     a44:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatsisf>
     a48:	2d ec       	ldi	r18, 0xCD	; 205
     a4a:	3c ec       	ldi	r19, 0xCC	; 204
     a4c:	4c e1       	ldi	r20, 0x1C	; 28
     a4e:	50 e4       	ldi	r21, 0x40	; 64
     a50:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__mulsf3>
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	40 ea       	ldi	r20, 0xA0	; 160
     a5a:	55 e4       	ldi	r21, 0x45	; 69
     a5c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__divsf3>
	
	return RAIN;	
}
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <timer_ini>:
void timer_ini(void)//период 4сек
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
     a6a:	e1 e8       	ldi	r30, 0x81	; 129
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	88 60       	ori	r24, 0x08	; 8
     a72:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
     a74:	af e6       	ldi	r26, 0x6F	; 111
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	8c 91       	ld	r24, X
     a7a:	82 60       	ori	r24, 0x02	; 2
     a7c:	8c 93       	st	X, r24
	OCR1AH = 0b11110100; //записываем в регистр число для сравнения
     a7e:	84 ef       	ldi	r24, 0xF4	; 244
     a80:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = 0b00100100;
     a84:	84 e2       	ldi	r24, 0x24	; 36
     a86:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1<<CS12)|(1<<CS10);//установим делитель 256.
     a8a:	80 81       	ld	r24, Z
     a8c:	85 60       	ori	r24, 0x05	; 5
     a8e:	80 83       	st	Z, r24
     a90:	08 95       	ret

00000a92 <__vector_11>:
}
//——————————————–
ISR (TIMER1_COMPA_vect)
{
     a92:	1f 92       	push	r1
     a94:	0f 92       	push	r0
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	0f 92       	push	r0
     a9a:	11 24       	eor	r1, r1
     a9c:	2f 93       	push	r18
     a9e:	3f 93       	push	r19
     aa0:	4f 93       	push	r20
     aa2:	5f 93       	push	r21
     aa4:	6f 93       	push	r22
     aa6:	7f 93       	push	r23
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25
     aac:	af 93       	push	r26
     aae:	bf 93       	push	r27
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
	if((strlen(temp_street)!=0)&&(strlen(hum_street)!=0)&&(strlen(WIND_speed)!=0)&&(strlen(Rain)!=0)&&(strlen(Vbat)!=0)&&(strlen(wind_direction)!=0))
     ab4:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <temp_street>
     ab8:	88 23       	and	r24, r24
     aba:	09 f4       	brne	.+2      	; 0xabe <__vector_11+0x2c>
     abc:	4c c0       	rjmp	.+152    	; 0xb56 <__vector_11+0xc4>
     abe:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <hum_street>
     ac2:	88 23       	and	r24, r24
     ac4:	09 f4       	brne	.+2      	; 0xac8 <__vector_11+0x36>
     ac6:	47 c0       	rjmp	.+142    	; 0xb56 <__vector_11+0xc4>
     ac8:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <WIND_speed>
     acc:	88 23       	and	r24, r24
     ace:	09 f4       	brne	.+2      	; 0xad2 <__vector_11+0x40>
     ad0:	42 c0       	rjmp	.+132    	; 0xb56 <__vector_11+0xc4>
     ad2:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <Rain>
     ad6:	88 23       	and	r24, r24
     ad8:	f1 f1       	breq	.+124    	; 0xb56 <__vector_11+0xc4>
     ada:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <Vbat>
     ade:	88 23       	and	r24, r24
     ae0:	d1 f1       	breq	.+116    	; 0xb56 <__vector_11+0xc4>
     ae2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <wind_direction>
     ae6:	88 23       	and	r24, r24
     ae8:	b1 f1       	breq	.+108    	; 0xb56 <__vector_11+0xc4>
	{
		//отправка строки по UART в формате: ул.темп./скор.ветра/осадки/ул.влажность/заряд АКБ/направл.ветра
	    sprintf(DATA_TO_UART,"%s ",temp_street);
     aea:	8e ed       	ldi	r24, 0xDE	; 222
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	9f 93       	push	r25
     af0:	8f 93       	push	r24
     af2:	84 e1       	ldi	r24, 0x14	; 20
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	9f 93       	push	r25
     af8:	8f 93       	push	r24
     afa:	8c e5       	ldi	r24, 0x5C	; 92
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	9f 93       	push	r25
     b00:	8f 93       	push	r24
     b02:	0e 94 f5 19 	call	0x33ea	; 0x33ea <sprintf>
		strcat(DATA_TO_UART,WIND_speed);
     b06:	60 ec       	ldi	r22, 0xC0	; 192
     b08:	71 e0       	ldi	r23, 0x01	; 1
     b0a:	8c e5       	ldi	r24, 0x5C	; 92
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 a3 19 	call	0x3346	; 0x3346 <strcat>
		strcat(DATA_TO_UART,Rain);
     b12:	6e e8       	ldi	r22, 0x8E	; 142
     b14:	71 e0       	ldi	r23, 0x01	; 1
     b16:	8c e5       	ldi	r24, 0x5C	; 92
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 a3 19 	call	0x3346	; 0x3346 <strcat>
		strcat(DATA_TO_UART,hum_street);
     b1e:	64 ed       	ldi	r22, 0xD4	; 212
     b20:	71 e0       	ldi	r23, 0x01	; 1
     b22:	8c e5       	ldi	r24, 0x5C	; 92
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 a3 19 	call	0x3346	; 0x3346 <strcat>
		strcat(DATA_TO_UART,Vbat);
     b2a:	68 e9       	ldi	r22, 0x98	; 152
     b2c:	71 e0       	ldi	r23, 0x01	; 1
     b2e:	8c e5       	ldi	r24, 0x5C	; 92
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 a3 19 	call	0x3346	; 0x3346 <strcat>
		strcat(DATA_TO_UART,wind_direction);
     b36:	66 eb       	ldi	r22, 0xB6	; 182
     b38:	71 e0       	ldi	r23, 0x01	; 1
     b3a:	8c e5       	ldi	r24, 0x5C	; 92
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 a3 19 	call	0x3346	; 0x3346 <strcat>
		USART_Transmit(DATA_TO_UART);
     b42:	8c e5       	ldi	r24, 0x5C	; 92
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 41 13 	call	0x2682	; 0x2682 <USART_Transmit>
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
	}

}
     b56:	ff 91       	pop	r31
     b58:	ef 91       	pop	r30
     b5a:	bf 91       	pop	r27
     b5c:	af 91       	pop	r26
     b5e:	9f 91       	pop	r25
     b60:	8f 91       	pop	r24
     b62:	7f 91       	pop	r23
     b64:	6f 91       	pop	r22
     b66:	5f 91       	pop	r21
     b68:	4f 91       	pop	r20
     b6a:	3f 91       	pop	r19
     b6c:	2f 91       	pop	r18
     b6e:	0f 90       	pop	r0
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	0f 90       	pop	r0
     b74:	1f 90       	pop	r1
     b76:	18 95       	reti

00000b78 <SPI_init>:

void SPI_init(void) //инициализация SPI
{
	DDRB |= ((1<<SS)|(1<<MOSI)|(1<<CE)|(1<<SCK)); //ножки SPI на выход
     b78:	84 b1       	in	r24, 0x04	; 4
     b7a:	8e 62       	ori	r24, 0x2E	; 46
     b7c:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<SS)|(1<<MOSI)|(1<<SCK)); //низкий уровень
     b7e:	85 b1       	in	r24, 0x05	; 5
     b80:	83 7d       	andi	r24, 0xD3	; 211
     b82:	85 b9       	out	0x05, r24	; 5
	DDRD &= ~(1<<IRQ);
     b84:	8a b1       	in	r24, 0x0a	; 10
     b86:	8b 7f       	andi	r24, 0xFB	; 251
     b88:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<IRQ);
     b8a:	8b b1       	in	r24, 0x0b	; 11
     b8c:	84 60       	ori	r24, 0x04	; 4
     b8e:	8b b9       	out	0x0b, r24	; 11
	HIGH_CSN;
     b90:	85 b1       	in	r24, 0x05	; 5
     b92:	84 60       	ori	r24, 0x04	; 4
     b94:	85 b9       	out	0x05, r24	; 5
	SPCR = ((1<<SPE)|(1<<MSTR));//включим шину, объявим ведущим
     b96:	80 e5       	ldi	r24, 0x50	; 80
     b98:	8c bd       	out	0x2c, r24	; 44
     b9a:	08 95       	ret

00000b9c <port_init>:
}
//-------------------------------------------------------------
void port_init(void)
{
	//инициализация портов для светодиода
	DDRD |= (1 << LED);//led
     b9c:	8a b1       	in	r24, 0x0a	; 10
     b9e:	80 61       	ori	r24, 0x10	; 16
     ba0:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~ (1 << LED);
     ba2:	8b b1       	in	r24, 0x0b	; 11
     ba4:	8f 7e       	andi	r24, 0xEF	; 239
     ba6:	8b b9       	out	0x0b, r24	; 11
	
	//инициализация портов для LCD12864
	DDRD |= (1<<RS);//ножка RS на выход для LCD12864
     ba8:	8a b1       	in	r24, 0x0a	; 10
     baa:	80 68       	ori	r24, 0x80	; 128
     bac:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<RS);
     bae:	8b b1       	in	r24, 0x0b	; 11
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	8b b9       	out	0x0b, r24	; 11
	DDRD |= (1<<E);
     bb4:	8a b1       	in	r24, 0x0a	; 10
     bb6:	80 62       	ori	r24, 0x20	; 32
     bb8:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<E);
     bba:	8b b1       	in	r24, 0x0b	; 11
     bbc:	8f 7d       	andi	r24, 0xDF	; 223
     bbe:	8b b9       	out	0x0b, r24	; 11
	DDRD |= (1<<RW);
     bc0:	8a b1       	in	r24, 0x0a	; 10
     bc2:	80 64       	ori	r24, 0x40	; 64
     bc4:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<RW);
     bc6:	8b b1       	in	r24, 0x0b	; 11
     bc8:	8f 7b       	andi	r24, 0xBF	; 191
     bca:	8b b9       	out	0x0b, r24	; 11
     bcc:	08 95       	ret

00000bce <spi_send_recv>:
	 DDRC|=(1<<MOSI_SD)|(1<<SCK_SD);*/
} 
//-------------------------------------------------------------
uint8_t spi_send_recv(uint8_t data) // Передаёт и принимает 1 байт по SPI, возвращает полученное значение
{
	SPDR = data;
     bce:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));
     bd0:	0d b4       	in	r0, 0x2d	; 45
     bd2:	07 fe       	sbrs	r0, 7
     bd4:	fd cf       	rjmp	.-6      	; 0xbd0 <spi_send_recv+0x2>
	return SPDR;
     bd6:	8e b5       	in	r24, 0x2e	; 46
}
     bd8:	08 95       	ret

00000bda <main>:
void main(void)
{	
	port_init();
     bda:	0e 94 ce 05 	call	0xb9c	; 0xb9c <port_init>
	PORTD |= (1<<LED);
     bde:	8b b1       	in	r24, 0x0b	; 11
     be0:	80 61       	ori	r24, 0x10	; 16
     be2:	8b b9       	out	0x0b, r24	; 11
    SPI_init();
     be4:	0e 94 bc 05 	call	0xb78	; 0xb78 <SPI_init>
	timer_ini();
     be8:	0e 94 35 05 	call	0xa6a	; 0xa6a <timer_ini>
	I2C_Init();
     bec:	0e 94 27 13 	call	0x264e	; 0x264e <I2C_Init>
	LCD_12864_ini();	
     bf0:	0e 94 28 03 	call	0x650	; 0x650 <LCD_12864_ini>
	USART_Init(16);    //Инициализация модуля USART скорость 115200
     bf4:	80 e1       	ldi	r24, 0x10	; 16
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 2b 13 	call	0x2656	; 0x2656 <USART_Init>
    NRF24_ini();
     bfc:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <NRF24_ini>
	// настраиваем параметры прерывания
	EICRA = (1<<ISC01) | (0<<ISC00);
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = (1<<INT0);
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	8d bb       	out	0x1d, r24	; 29
	// и разрешаем его глобально
	sei();
     c0a:	78 94       	sei
	//Вывод приветствия
	LCD_12864_GrapnicMode(1);
     c0c:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_12864_GrapnicMode>
	LCD_12864_Decode_UTF8(3, 3, 0, "Пожалуйста подождите.");
     c10:	28 e1       	ldi	r18, 0x18	; 24
     c12:	31 e0       	ldi	r19, 0x01	; 1
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	63 e0       	ldi	r22, 0x03	; 3
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_12864_Decode_UTF8>
	LCD_12864_Decode_UTF8(9, 4, 0, "Идёт загрузка...");
     c20:	2e e2       	ldi	r18, 0x2E	; 46
     c22:	31 e0       	ldi	r19, 0x01	; 1
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	64 e0       	ldi	r22, 0x04	; 4
     c28:	89 e0       	ldi	r24, 0x09	; 9
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_12864_Decode_UTF8>
	LCD_12864_Draw_bitmap(Frame_buffer);
     c30:	88 ee       	ldi	r24, 0xE8	; 232
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_12864_Draw_bitmap>
	LCD_12864_GrapnicMode(0);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_12864_GrapnicMode>
     c3e:	2f ef       	ldi	r18, 0xFF	; 255
     c40:	83 e2       	ldi	r24, 0x23	; 35
     c42:	94 ef       	ldi	r25, 0xF4	; 244
     c44:	21 50       	subi	r18, 0x01	; 1
     c46:	80 40       	sbci	r24, 0x00	; 0
     c48:	90 40       	sbci	r25, 0x00	; 0
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <main+0x6a>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <main+0x74>
     c4e:	00 00       	nop
	_delay_ms(5000);
	PORTD &= ~(1<<LED);
     c50:	8b b1       	in	r24, 0x0b	; 11
     c52:	8f 7e       	andi	r24, 0xEF	; 239
     c54:	8b b9       	out	0x0b, r24	; 11
	clear_LCD_12864();
     c56:	0e 94 1e 03 	call	0x63c	; 0x63c <clear_LCD_12864>
    while (1) 
    {
		setpos_LCD_12864(0,0);
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	0e 94 46 03 	call	0x68c	; 0x68c <setpos_LCD_12864>
		NRF24L01_Receive();
     c64:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <NRF24L01_Receive>
		str_LCD_12864 (temp_street);
     c68:	8e ed       	ldi	r24, 0xDE	; 222
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 44 01 	call	0x288	; 0x288 <str_LCD_12864>
		setpos_LCD_12864(3,0);
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	0e 94 46 03 	call	0x68c	; 0x68c <setpos_LCD_12864>
	    sprintf(WIND_speed,"%.2f ", wind_speed (HALL_counter));
     c7a:	8a ec       	ldi	r24, 0xCA	; 202
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <wind_speed>
     c82:	9f 93       	push	r25
     c84:	8f 93       	push	r24
     c86:	7f 93       	push	r23
     c88:	6f 93       	push	r22
     c8a:	cf e3       	ldi	r28, 0x3F	; 63
     c8c:	d1 e0       	ldi	r29, 0x01	; 1
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	80 ec       	ldi	r24, 0xC0	; 192
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	9f 93       	push	r25
     c98:	8f 93       	push	r24
     c9a:	0e 94 f5 19 	call	0x33ea	; 0x33ea <sprintf>
		str_LCD_12864 (WIND_speed);
     c9e:	80 ec       	ldi	r24, 0xC0	; 192
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	0e 94 44 01 	call	0x288	; 0x288 <str_LCD_12864>
		setpos_LCD_12864(6,0);
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	86 e0       	ldi	r24, 0x06	; 6
     cac:	0e 94 46 03 	call	0x68c	; 0x68c <setpos_LCD_12864>
	    sprintf(Rain,"%.2f ",RAIN_AMOUNT(adc_value2));
     cb0:	82 ea       	ldi	r24, 0xA2	; 162
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <RAIN_AMOUNT>
     cb8:	9f 93       	push	r25
     cba:	8f 93       	push	r24
     cbc:	7f 93       	push	r23
     cbe:	6f 93       	push	r22
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	8e e8       	ldi	r24, 0x8E	; 142
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	0e 94 f5 19 	call	0x33ea	; 0x33ea <sprintf>
		str_LCD_12864 (Rain);
     cd0:	8e e8       	ldi	r24, 0x8E	; 142
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	0e 94 44 01 	call	0x288	; 0x288 <str_LCD_12864>
		setpos_LCD_12864(0,1);
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	0e 94 46 03 	call	0x68c	; 0x68c <setpos_LCD_12864>
		str_LCD_12864 (hum_street);
     ce2:	84 ed       	ldi	r24, 0xD4	; 212
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 44 01 	call	0x288	; 0x288 <str_LCD_12864>
		setpos_LCD_12864(3,1);
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	0e 94 46 03 	call	0x68c	; 0x68c <setpos_LCD_12864>
		str_LCD_12864 (wind_direction);
     cf4:	86 eb       	ldi	r24, 0xB6	; 182
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	0e 94 44 01 	call	0x288	; 0x288 <str_LCD_12864>
		setpos_LCD_12864(6,1);
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	86 e0       	ldi	r24, 0x06	; 6
     d02:	0e 94 46 03 	call	0x68c	; 0x68c <setpos_LCD_12864>
	    sprintf(Vbat,"%.2f ",V_BAT(adc_value1));
     d06:	8c ea       	ldi	r24, 0xAC	; 172
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 ba 04 	call	0x974	; 0x974 <V_BAT>
     d0e:	9f 93       	push	r25
     d10:	8f 93       	push	r24
     d12:	7f 93       	push	r23
     d14:	6f 93       	push	r22
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	88 e9       	ldi	r24, 0x98	; 152
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	9f 93       	push	r25
     d20:	8f 93       	push	r24
     d22:	0e 94 f5 19 	call	0x33ea	; 0x33ea <sprintf>
		str_LCD_12864 (Vbat);
     d26:	88 e9       	ldi	r24, 0x98	; 152
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 44 01 	call	0x288	; 0x288 <str_LCD_12864>
     d2e:	2f ef       	ldi	r18, 0xFF	; 255
     d30:	81 ee       	ldi	r24, 0xE1	; 225
     d32:	94 e0       	ldi	r25, 0x04	; 4
     d34:	21 50       	subi	r18, 0x01	; 1
     d36:	80 40       	sbci	r24, 0x00	; 0
     d38:	90 40       	sbci	r25, 0x00	; 0
     d3a:	e1 f7       	brne	.-8      	; 0xd34 <main+0x15a>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <main+0x164>
     d3e:	00 00       	nop
     d40:	8d b7       	in	r24, 0x3d	; 61
     d42:	9e b7       	in	r25, 0x3e	; 62
     d44:	48 96       	adiw	r24, 0x18	; 24
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	9e bf       	out	0x3e, r25	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	8d bf       	out	0x3d, r24	; 61
     d50:	84 cf       	rjmp	.-248    	; 0xc5a <main+0x80>

00000d52 <xmit_spi>:
// SPI functions
//-----------------------------------------------------------------------
void xmit_spi (BYTE data)		// Send a byte 
{ BYTE i;

 for (i=0;i<8;i++)
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	12 c0       	rjmp	.+36     	; 0xd7a <xmit_spi+0x28>
  {
   if ((data&0x80)==0x00) PORTC&=~_BV(SD_DI);
     d56:	88 23       	and	r24, r24
     d58:	24 f0       	brlt	.+8      	; 0xd62 <xmit_spi+0x10>
     d5a:	98 b1       	in	r25, 0x08	; 8
     d5c:	9b 7f       	andi	r25, 0xFB	; 251
     d5e:	98 b9       	out	0x08, r25	; 8
     d60:	03 c0       	rjmp	.+6      	; 0xd68 <xmit_spi+0x16>
                     else PORTC|=_BV(SD_DI);
     d62:	98 b1       	in	r25, 0x08	; 8
     d64:	94 60       	ori	r25, 0x04	; 4
     d66:	98 b9       	out	0x08, r25	; 8
   data=data<<1; 
     d68:	88 0f       	add	r24, r24
   PORTC|=_BV(SD_CLK);
     d6a:	98 b1       	in	r25, 0x08	; 8
     d6c:	98 60       	ori	r25, 0x08	; 8
     d6e:	98 b9       	out	0x08, r25	; 8
   asm("nop"); 
     d70:	00 00       	nop
   PORTC&=~_BV(SD_CLK);
     d72:	98 b1       	in	r25, 0x08	; 8
     d74:	97 7f       	andi	r25, 0xF7	; 247
     d76:	98 b9       	out	0x08, r25	; 8
// SPI functions
//-----------------------------------------------------------------------
void xmit_spi (BYTE data)		// Send a byte 
{ BYTE i;

 for (i=0;i<8;i++)
     d78:	2f 5f       	subi	r18, 0xFF	; 255
     d7a:	28 30       	cpi	r18, 0x08	; 8
     d7c:	60 f3       	brcs	.-40     	; 0xd56 <xmit_spi+0x4>
   data=data<<1; 
   PORTC|=_BV(SD_CLK);
   asm("nop"); 
   PORTC&=~_BV(SD_CLK);
  }
}
     d7e:	08 95       	ret

00000d80 <rcv_spi>:

BYTE rcv_spi (void)				// Send 0xFF and receive a byte 
{ BYTE i, res=0;

 PORTC|=_BV(SD_DI);
     d80:	88 b1       	in	r24, 0x08	; 8
     d82:	84 60       	ori	r24, 0x04	; 4
     d84:	88 b9       	out	0x08, r24	; 8
   PORTC&=~_BV(SD_CLK);
  }
}

BYTE rcv_spi (void)				// Send 0xFF and receive a byte 
{ BYTE i, res=0;
     d86:	80 e0       	ldi	r24, 0x00	; 0

 PORTC|=_BV(SD_DI);

 for (i=0;i<8;i++)
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	0b c0       	rjmp	.+22     	; 0xda2 <rcv_spi+0x22>
  {
   PORTC|=_BV(SD_CLK);
     d8c:	98 b1       	in	r25, 0x08	; 8
     d8e:	98 60       	ori	r25, 0x08	; 8
     d90:	98 b9       	out	0x08, r25	; 8
   res=res<<1;
     d92:	88 0f       	add	r24, r24
   if ((PINC&_BV(SD_DO))!=0x00) res=res|0x01;
     d94:	31 99       	sbic	0x06, 1	; 6
     d96:	81 60       	ori	r24, 0x01	; 1
   PORTC&=~_BV(SD_CLK);
     d98:	98 b1       	in	r25, 0x08	; 8
     d9a:	97 7f       	andi	r25, 0xF7	; 247
     d9c:	98 b9       	out	0x08, r25	; 8
   asm("nop");
     d9e:	00 00       	nop
BYTE rcv_spi (void)				// Send 0xFF and receive a byte 
{ BYTE i, res=0;

 PORTC|=_BV(SD_DI);

 for (i=0;i<8;i++)
     da0:	2f 5f       	subi	r18, 0xFF	; 255
     da2:	28 30       	cpi	r18, 0x08	; 8
     da4:	98 f3       	brcs	.-26     	; 0xd8c <rcv_spi+0xc>
   if ((PINC&_BV(SD_DO))!=0x00) res=res|0x01;
   PORTC&=~_BV(SD_CLK);
   asm("nop");
  }
 return res;
}	/* Send 0xFF and receive a byte */
     da6:	08 95       	ret

00000da8 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		// Command byte 
	DWORD arg		// Argument 
)
{
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	c8 2f       	mov	r28, r24
     db4:	d4 2f       	mov	r29, r20
     db6:	15 2f       	mov	r17, r21
     db8:	06 2f       	mov	r16, r22
     dba:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	// ACMD<n> is the command sequense of CMD55-CMD<n> 
     dbc:	88 23       	and	r24, r24
     dbe:	4c f4       	brge	.+18     	; 0xdd2 <send_cmd+0x2a>
		cmd &= 0x7F;
     dc0:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	ba 01       	movw	r22, r20
     dc8:	87 e7       	ldi	r24, 0x77	; 119
     dca:	0e 94 d4 06 	call	0xda8	; 0xda8 <send_cmd>
		if (res > 1) return res;
     dce:	82 30       	cpi	r24, 0x02	; 2
     dd0:	50 f5       	brcc	.+84     	; 0xe26 <send_cmd+0x7e>
	}

	// Select the card 
	DESELECT();
     dd2:	85 b1       	in	r24, 0x05	; 5
     dd4:	81 60       	ori	r24, 0x01	; 1
     dd6:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     dd8:	0e 94 c0 06 	call	0xd80	; 0xd80 <rcv_spi>
	SELECT();
     ddc:	85 b1       	in	r24, 0x05	; 5
     dde:	8e 7f       	andi	r24, 0xFE	; 254
     de0:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     de2:	0e 94 c0 06 	call	0xd80	; 0xd80 <rcv_spi>

	// Send a command packet 
	xmit_spi(cmd);						// Start + Command index 
     de6:	8c 2f       	mov	r24, r28
     de8:	0e 94 a9 06 	call	0xd52	; 0xd52 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		// Argument[31..24] 
     dec:	8f 2d       	mov	r24, r15
     dee:	0e 94 a9 06 	call	0xd52	; 0xd52 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		// Argument[23..16] 
     df2:	80 2f       	mov	r24, r16
     df4:	0e 94 a9 06 	call	0xd52	; 0xd52 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			// Argument[15..8] 
     df8:	81 2f       	mov	r24, r17
     dfa:	0e 94 a9 06 	call	0xd52	; 0xd52 <xmit_spi>
	xmit_spi((BYTE)arg);				// Argument[7..0] 
     dfe:	8d 2f       	mov	r24, r29
     e00:	0e 94 a9 06 	call	0xd52	; 0xd52 <xmit_spi>
	n = 0x01;							// Dummy CRC + Stop 
	if (cmd == CMD0) n = 0x95;			// Valid CRC for CMD0(0) 
     e04:	c0 34       	cpi	r28, 0x40	; 64
     e06:	11 f0       	breq	.+4      	; 0xe0c <send_cmd+0x64>
	xmit_spi(cmd);						// Start + Command index 
	xmit_spi((BYTE)(arg >> 24));		// Argument[31..24] 
	xmit_spi((BYTE)(arg >> 16));		// Argument[23..16] 
	xmit_spi((BYTE)(arg >> 8));			// Argument[15..8] 
	xmit_spi((BYTE)arg);				// Argument[7..0] 
	n = 0x01;							// Dummy CRC + Stop 
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <send_cmd+0x66>
	if (cmd == CMD0) n = 0x95;			// Valid CRC for CMD0(0) 
     e0c:	85 e9       	ldi	r24, 0x95	; 149
	if (cmd == CMD8) n = 0x87;			// Valid CRC for CMD8(0x1AA) 
     e0e:	c8 34       	cpi	r28, 0x48	; 72
     e10:	09 f4       	brne	.+2      	; 0xe14 <send_cmd+0x6c>
     e12:	87 e8       	ldi	r24, 0x87	; 135
	xmit_spi(n);
     e14:	0e 94 a9 06 	call	0xd52	; 0xd52 <xmit_spi>

	// Receive a command response 
	n = 10;								// Wait for a valid response in timeout of 10 attempts 
     e18:	ca e0       	ldi	r28, 0x0A	; 10
	do {
		res = rcv_spi();
     e1a:	0e 94 c0 06 	call	0xd80	; 0xd80 <rcv_spi>
	} while ((res & 0x80) && --n);
     e1e:	88 23       	and	r24, r24
     e20:	14 f4       	brge	.+4      	; 0xe26 <send_cmd+0x7e>
     e22:	c1 50       	subi	r28, 0x01	; 1
     e24:	d1 f7       	brne	.-12     	; 0xe1a <send_cmd+0x72>

	return res;			// Return with the response value 
}
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	08 95       	ret

00000e32 <release_spi>:
// Deselect the card and release SPI bus                                 
//-----------------------------------------------------------------------
static
void release_spi (void)
{
	rcv_spi();
     e32:	0e 94 c0 06 	call	0xd80	; 0xd80 <rcv_spi>
     e36:	08 95       	ret

00000e38 <disk_readp>:
	BYTE *buff,		// Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) 
	DWORD lba,		// Sector number (LBA) 
	WORD ofs,		// Byte offset to read from (0..511) 
	WORD cnt		// Number of bytes to read (ofs + cnt mus be <= 512) 
)
{
     e38:	cf 92       	push	r12
     e3a:	df 92       	push	r13
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	7c 01       	movw	r14, r24
     e4a:	69 01       	movw	r12, r18
	BYTE rc;
	WORD bc;

//	if ((PINB&_BV(SD_INS))!=0x00) return RES_ERROR;

	if (!(CardType & CT_BLOCK))
     e4c:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <CardType>
     e50:	83 fd       	sbrc	r24, 3
     e52:	09 c0       	rjmp	.+18     	; 0xe66 <disk_readp+0x2e>
	{
		lba *= 512;		// Convert to byte address if needed 
     e54:	03 2e       	mov	r0, r19
     e56:	39 e0       	ldi	r19, 0x09	; 9
     e58:	44 0f       	add	r20, r20
     e5a:	55 1f       	adc	r21, r21
     e5c:	66 1f       	adc	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	3a 95       	dec	r19
     e62:	d1 f7       	brne	.-12     	; 0xe58 <disk_readp+0x20>
     e64:	30 2d       	mov	r19, r0
	}
	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		// READ_SINGLE_BLOCK 
     e66:	81 e5       	ldi	r24, 0x51	; 81
     e68:	0e 94 d4 06 	call	0xda8	; 0xda8 <send_cmd>
     e6c:	81 11       	cpse	r24, r1
     e6e:	34 c0       	rjmp	.+104    	; 0xed8 <disk_readp+0xa0>
     e70:	c0 e3       	ldi	r28, 0x30	; 48
     e72:	d5 e7       	ldi	r29, 0x75	; 117
		bc = 30000;
		do {							// Wait for data packet in timeout of 100ms 
			rc = rcv_spi();
     e74:	0e 94 c0 06 	call	0xd80	; 0xd80 <rcv_spi>
		} while (rc == 0xFF && --bc);
     e78:	8f 3f       	cpi	r24, 0xFF	; 255
     e7a:	11 f4       	brne	.+4      	; 0xe80 <disk_readp+0x48>
     e7c:	21 97       	sbiw	r28, 0x01	; 1
     e7e:	d1 f7       	brne	.-12     	; 0xe74 <disk_readp+0x3c>

		if (rc == 0xFE) {				// A data packet arrived 
     e80:	8e 3f       	cpi	r24, 0xFE	; 254
     e82:	61 f5       	brne	.+88     	; 0xedc <disk_readp+0xa4>
			bc = 514 - ofs - cnt;
     e84:	cc 27       	eor	r28, r28
     e86:	dd 27       	eor	r29, r29
     e88:	cc 19       	sub	r28, r12
     e8a:	dd 09       	sbc	r29, r13
     e8c:	c0 1b       	sub	r28, r16
     e8e:	d1 0b       	sbc	r29, r17
     e90:	ce 5f       	subi	r28, 0xFE	; 254
     e92:	dd 4f       	sbci	r29, 0xFD	; 253

			// Skip leading bytes 
			if (ofs) {
     e94:	c1 14       	cp	r12, r1
     e96:	d1 04       	cpc	r13, r1
     e98:	31 f0       	breq	.+12     	; 0xea6 <disk_readp+0x6e>
				do rcv_spi(); while (--ofs);
     e9a:	0e 94 c0 06 	call	0xd80	; 0xd80 <rcv_spi>
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	c8 1a       	sub	r12, r24
     ea2:	d1 08       	sbc	r13, r1
     ea4:	d1 f7       	brne	.-12     	; 0xe9a <disk_readp+0x62>
			}

			// Receive a part of the sector 
			if (buff) {	// Store data to the memory 
     ea6:	e1 14       	cp	r14, r1
     ea8:	f1 04       	cpc	r15, r1
     eaa:	69 f0       	breq	.+26     	; 0xec6 <disk_readp+0x8e>
				do
					*buff++ = rcv_spi();
     eac:	67 01       	movw	r12, r14
     eae:	ef ef       	ldi	r30, 0xFF	; 255
     eb0:	ce 1a       	sub	r12, r30
     eb2:	de 0a       	sbc	r13, r30
     eb4:	0e 94 c0 06 	call	0xd80	; 0xd80 <rcv_spi>
     eb8:	f7 01       	movw	r30, r14
     eba:	80 83       	st	Z, r24
				while (--cnt);
     ebc:	01 50       	subi	r16, 0x01	; 1
     ebe:	11 09       	sbc	r17, r1
			}

			// Receive a part of the sector 
			if (buff) {	// Store data to the memory 
				do
					*buff++ = rcv_spi();
     ec0:	76 01       	movw	r14, r12
				while (--cnt);
     ec2:	a1 f7       	brne	.-24     	; 0xeac <disk_readp+0x74>
     ec4:	03 c0       	rjmp	.+6      	; 0xecc <disk_readp+0x94>
			} else {	// Forward data to the outgoing stream (depends on the project) 
				do 
                ;//uart_transmit(rcv_spi());		// (Console output) 
				while (--cnt);
     ec6:	01 50       	subi	r16, 0x01	; 1
     ec8:	11 09       	sbc	r17, r1
     eca:	e9 f7       	brne	.-6      	; 0xec6 <disk_readp+0x8e>
			}

			// Skip trailing bytes and CRC 
			do rcv_spi(); while (--bc);
     ecc:	0e 94 c0 06 	call	0xd80	; 0xd80 <rcv_spi>
     ed0:	21 97       	sbiw	r28, 0x01	; 1
     ed2:	e1 f7       	brne	.-8      	; 0xecc <disk_readp+0x94>

			res = RES_OK;
     ed4:	c0 e0       	ldi	r28, 0x00	; 0
     ed6:	03 c0       	rjmp	.+6      	; 0xede <disk_readp+0xa6>

	if (!(CardType & CT_BLOCK))
	{
		lba *= 512;		// Convert to byte address if needed 
	}
	res = RES_ERROR;
     ed8:	c1 e0       	ldi	r28, 0x01	; 1
     eda:	01 c0       	rjmp	.+2      	; 0xede <disk_readp+0xa6>
     edc:	c1 e0       	ldi	r28, 0x01	; 1

			res = RES_OK;
		}
	}

	release_spi();
     ede:	0e 94 19 07 	call	0xe32	; 0xe32 <release_spi>

	return res;
}
     ee2:	8c 2f       	mov	r24, r28
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	cf 90       	pop	r12
     ef4:	08 95       	ret

00000ef6 <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	// Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) 
	DWORD sa			// Number of bytes to send, Sector number (LBA) or zero 
)
{
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	fc 01       	movw	r30, r24
// 	if ((PINB&_BV(SD_INS))!=0x00) return RES_ERROR;
// 	if ((PINB&_BV(SD_WP))!=0x00) return RES_ERROR;

	res = RES_ERROR;

	if (buff) {		// Send data bytes 
     f00:	89 2b       	or	r24, r25
     f02:	f1 f0       	breq	.+60     	; 0xf40 <disk_writep+0x4a>
		bc = (WORD)sa;
     f04:	ea 01       	movw	r28, r20
		while (bc && wc) {		// Send data bytes to the card 
     f06:	11 c0       	rjmp	.+34     	; 0xf2a <disk_writep+0x34>
			xmit_spi(*buff++);
     f08:	8f 01       	movw	r16, r30
     f0a:	0f 5f       	subi	r16, 0xFF	; 255
     f0c:	1f 4f       	sbci	r17, 0xFF	; 255
     f0e:	80 81       	ld	r24, Z
     f10:	0e 94 a9 06 	call	0xd52	; 0xd52 <xmit_spi>
			wc--; bc--;
     f14:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <wc.1710>
     f18:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <wc.1710+0x1>
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	90 93 e9 05 	sts	0x05E9, r25	; 0x8005e9 <wc.1710+0x1>
     f22:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <wc.1710>
     f26:	21 97       	sbiw	r28, 0x01	; 1
	res = RES_ERROR;

	if (buff) {		// Send data bytes 
		bc = (WORD)sa;
		while (bc && wc) {		// Send data bytes to the card 
			xmit_spi(*buff++);
     f28:	f8 01       	movw	r30, r16

	res = RES_ERROR;

	if (buff) {		// Send data bytes 
		bc = (WORD)sa;
		while (bc && wc) {		// Send data bytes to the card 
     f2a:	20 97       	sbiw	r28, 0x00	; 0
     f2c:	09 f4       	brne	.+2      	; 0xf30 <disk_writep+0x3a>
     f2e:	54 c0       	rjmp	.+168    	; 0xfd8 <disk_writep+0xe2>
     f30:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <wc.1710>
     f34:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <wc.1710+0x1>
     f38:	89 2b       	or	r24, r25
     f3a:	31 f7       	brne	.-52     	; 0xf08 <disk_writep+0x12>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
     f3c:	c0 e0       	ldi	r28, 0x00	; 0
     f3e:	4f c0       	rjmp	.+158    	; 0xfde <disk_writep+0xe8>
	} else {
		if (sa) {	// Initiate sector write process 
     f40:	41 15       	cp	r20, r1
     f42:	51 05       	cpc	r21, r1
     f44:	61 05       	cpc	r22, r1
     f46:	71 05       	cpc	r23, r1
     f48:	01 f1       	breq	.+64     	; 0xf8a <disk_writep+0x94>
			if (!(CardType & CT_BLOCK)) sa *= 512;	// Convert to byte address if needed 
     f4a:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <CardType>
     f4e:	83 fd       	sbrc	r24, 3
     f50:	09 c0       	rjmp	.+18     	; 0xf64 <disk_writep+0x6e>
     f52:	03 2e       	mov	r0, r19
     f54:	39 e0       	ldi	r19, 0x09	; 9
     f56:	44 0f       	add	r20, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	66 1f       	adc	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	3a 95       	dec	r19
     f60:	d1 f7       	brne	.-12     	; 0xf56 <disk_writep+0x60>
     f62:	30 2d       	mov	r19, r0
			if (send_cmd(CMD24, sa) == 0) {			// WRITE_SINGLE_BLOCK 
     f64:	88 e5       	ldi	r24, 0x58	; 88
     f66:	0e 94 d4 06 	call	0xda8	; 0xda8 <send_cmd>
     f6a:	81 11       	cpse	r24, r1
     f6c:	37 c0       	rjmp	.+110    	; 0xfdc <disk_writep+0xe6>
				xmit_spi(0xFF); xmit_spi(0xFE);		// Data block header 
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	0e 94 a9 06 	call	0xd52	; 0xd52 <xmit_spi>
     f74:	8e ef       	ldi	r24, 0xFE	; 254
     f76:	0e 94 a9 06 	call	0xd52	; 0xd52 <xmit_spi>
				wc = 512;							// Set byte counter 
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	90 93 e9 05 	sts	0x05E9, r25	; 0x8005e9 <wc.1710+0x1>
     f82:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <wc.1710>
				res = RES_OK;
     f86:	c0 e0       	ldi	r28, 0x00	; 0
     f88:	2a c0       	rjmp	.+84     	; 0xfde <disk_writep+0xe8>
			}
		} else {	// Finalize sector write process 
			bc = wc + 2;
     f8a:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <wc.1710>
     f8e:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <wc.1710+0x1>
     f92:	02 96       	adiw	r24, 0x02	; 2
			while (bc--) xmit_spi(0);	// Fill left bytes and CRC with zeros 
     f94:	04 c0       	rjmp	.+8      	; 0xf9e <disk_writep+0xa8>
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	0e 94 a9 06 	call	0xd52	; 0xd52 <xmit_spi>
     f9c:	ce 01       	movw	r24, r28
     f9e:	ec 01       	movw	r28, r24
     fa0:	21 97       	sbiw	r28, 0x01	; 1
     fa2:	89 2b       	or	r24, r25
     fa4:	c1 f7       	brne	.-16     	; 0xf96 <disk_writep+0xa0>
			if ((rcv_spi() & 0x1F) == 0x05) {	// Receive data resp and wait for end of write process in timeout of 300ms 
     fa6:	0e 94 c0 06 	call	0xd80	; 0xd80 <rcv_spi>
     faa:	8f 71       	andi	r24, 0x1F	; 31
     fac:	85 30       	cpi	r24, 0x05	; 5
     fae:	21 f0       	breq	.+8      	; 0xfb8 <disk_writep+0xc2>
	static WORD wc;

// 	if ((PINB&_BV(SD_INS))!=0x00) return RES_ERROR;
// 	if ((PINB&_BV(SD_WP))!=0x00) return RES_ERROR;

	res = RES_ERROR;
     fb0:	c1 e0       	ldi	r28, 0x01	; 1
     fb2:	0f c0       	rjmp	.+30     	; 0xfd2 <disk_writep+0xdc>
			}
		} else {	// Finalize sector write process 
			bc = wc + 2;
			while (bc--) xmit_spi(0);	// Fill left bytes and CRC with zeros 
			if ((rcv_spi() & 0x1F) == 0x05) {	// Receive data resp and wait for end of write process in timeout of 300ms 
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	// Wait ready 
     fb4:	21 97       	sbiw	r28, 0x01	; 1
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <disk_writep+0xc6>
     fb8:	c8 ee       	ldi	r28, 0xE8	; 232
     fba:	dd ef       	ldi	r29, 0xFD	; 253
     fbc:	0e 94 c0 06 	call	0xd80	; 0xd80 <rcv_spi>
     fc0:	8f 3f       	cpi	r24, 0xFF	; 255
     fc2:	11 f0       	breq	.+4      	; 0xfc8 <disk_writep+0xd2>
     fc4:	20 97       	sbiw	r28, 0x00	; 0
     fc6:	b1 f7       	brne	.-20     	; 0xfb4 <disk_writep+0xbe>
				if (bc) res = RES_OK;
     fc8:	cd 2b       	or	r28, r29
     fca:	11 f4       	brne	.+4      	; 0xfd0 <disk_writep+0xda>
	static WORD wc;

// 	if ((PINB&_BV(SD_INS))!=0x00) return RES_ERROR;
// 	if ((PINB&_BV(SD_WP))!=0x00) return RES_ERROR;

	res = RES_ERROR;
     fcc:	c1 e0       	ldi	r28, 0x01	; 1
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <disk_writep+0xdc>
		} else {	// Finalize sector write process 
			bc = wc + 2;
			while (bc--) xmit_spi(0);	// Fill left bytes and CRC with zeros 
			if ((rcv_spi() & 0x1F) == 0x05) {	// Receive data resp and wait for end of write process in timeout of 300ms 
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	// Wait ready 
				if (bc) res = RES_OK;
     fd0:	c0 e0       	ldi	r28, 0x00	; 0
			}
			release_spi();
     fd2:	0e 94 19 07 	call	0xe32	; 0xe32 <release_spi>
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <disk_writep+0xe8>
		bc = (WORD)sa;
		while (bc && wc) {		// Send data bytes to the card 
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
     fd8:	c0 e0       	ldi	r28, 0x00	; 0
     fda:	01 c0       	rjmp	.+2      	; 0xfde <disk_writep+0xe8>
	static WORD wc;

// 	if ((PINB&_BV(SD_INS))!=0x00) return RES_ERROR;
// 	if ((PINB&_BV(SD_WP))!=0x00) return RES_ERROR;

	res = RES_ERROR;
     fdc:	c1 e0       	ldi	r28, 0x01	; 1
			release_spi();
		}
	}

	return res;
}
     fde:	8c 2f       	mov	r24, r28
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	08 95       	ret

00000fea <disk_initialize>:

//--------------------------------------------------------------------------
// Initialize Disk Drive                                                 
//--------------------------------------------------------------------------
DSTATUS disk_initialize (void)
{
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <disk_initialize+0xe>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <disk_initialize+0x10>
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;


	INIT_SPI();
     ffe:	85 b1       	in	r24, 0x05	; 5
    1000:	81 60       	ori	r24, 0x01	; 1
    1002:	85 b9       	out	0x05, r24	; 5
    1004:	88 b1       	in	r24, 0x08	; 8
    1006:	86 60       	ori	r24, 0x06	; 6
    1008:	88 b9       	out	0x08, r24	; 8
    100a:	84 b1       	in	r24, 0x04	; 4
    100c:	81 60       	ori	r24, 0x01	; 1
    100e:	84 b9       	out	0x04, r24	; 4
    1010:	87 b1       	in	r24, 0x07	; 7
    1012:	8c 60       	ori	r24, 0x0C	; 12
    1014:	87 b9       	out	0x07, r24	; 7

//	if ((PINB&_BV(SD_INS))!=0x00) return STA_NOINIT;

#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		// Finalize write process if it is in progress 
    1016:	28 99       	sbic	0x05, 0	; 5
    1018:	07 c0       	rjmp	.+14     	; 0x1028 <disk_initialize+0x3e>
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	ba 01       	movw	r22, r20
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 7b 07 	call	0xef6	; 0xef6 <disk_writep>

//--------------------------------------------------------------------------
// Initialize Disk Drive                                                 
//--------------------------------------------------------------------------
DSTATUS disk_initialize (void)
{
    1028:	14 e6       	ldi	r17, 0x64	; 100
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <disk_initialize+0x48>
//	if ((PINB&_BV(SD_INS))!=0x00) return STA_NOINIT;

#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		// Finalize write process if it is in progress 
#endif
	for (n = 100; n; n--) rcv_spi();	// Dummy clocks 
    102c:	0e 94 c0 06 	call	0xd80	; 0xd80 <rcv_spi>
    1030:	11 50       	subi	r17, 0x01	; 1
    1032:	11 11       	cpse	r17, r1
    1034:	fb cf       	rjmp	.-10     	; 0x102c <disk_initialize+0x42>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			// Enter Idle state 
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	ba 01       	movw	r22, r20
    103c:	80 e4       	ldi	r24, 0x40	; 64
    103e:	0e 94 d4 06 	call	0xda8	; 0xda8 <send_cmd>
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	09 f0       	breq	.+2      	; 0x1048 <disk_initialize+0x5e>
    1046:	8f c0       	rjmp	.+286    	; 0x1166 <disk_initialize+0x17c>
		if (send_cmd(CMD8, 0x1AA) == 1) {	// SDv2 
    1048:	4a ea       	ldi	r20, 0xAA	; 170
    104a:	51 e0       	ldi	r21, 0x01	; 1
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	88 e4       	ldi	r24, 0x48	; 72
    1052:	0e 94 d4 06 	call	0xda8	; 0xda8 <send_cmd>
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	09 f0       	breq	.+2      	; 0x105c <disk_initialize+0x72>
    105a:	53 c0       	rjmp	.+166    	; 0x1102 <disk_initialize+0x118>
    105c:	0d c0       	rjmp	.+26     	; 0x1078 <disk_initialize+0x8e>

// 	  		setpos(0,3);
// 	  		str_lcd("SDv2");

			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Get trailing return value of R7 resp 
    105e:	e0 2e       	mov	r14, r16
    1060:	f1 2c       	mov	r15, r1
    1062:	0e 94 c0 06 	call	0xd80	; 0xd80 <rcv_spi>
    1066:	e1 e0       	ldi	r30, 0x01	; 1
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	ec 0f       	add	r30, r28
    106c:	fd 1f       	adc	r31, r29
    106e:	ee 0d       	add	r30, r14
    1070:	ff 1d       	adc	r31, r15
    1072:	80 83       	st	Z, r24
    1074:	0f 5f       	subi	r16, 0xFF	; 255
    1076:	01 c0       	rjmp	.+2      	; 0x107a <disk_initialize+0x90>
    1078:	01 2f       	mov	r16, r17
    107a:	04 30       	cpi	r16, 0x04	; 4
    107c:	80 f3       	brcs	.-32     	; 0x105e <disk_initialize+0x74>
//  			sprintf(str,"%02X",ocr[1]);
//  			str_lcd(str);
//  			setpos(17,0);
//  			sprintf(str,"%02X",ocr[0]);
//  			str_lcd(str);
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				// The card can work at vdd range of 2.7-3.6V 
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	09 f0       	breq	.+2      	; 0x1086 <disk_initialize+0x9c>
    1084:	72 c0       	rjmp	.+228    	; 0x116a <disk_initialize+0x180>
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	8a 3a       	cpi	r24, 0xAA	; 170
    108a:	31 f0       	breq	.+12     	; 0x1098 <disk_initialize+0xae>
#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		// Finalize write process if it is in progress 
#endif
	for (n = 100; n; n--) rcv_spi();	// Dummy clocks 

	ty = 0;
    108c:	f1 2c       	mov	r15, r1
    108e:	78 c0       	rjmp	.+240    	; 0x1180 <disk_initialize+0x196>
//  			sprintf(str,"%02X",ocr[0]);
//  			str_lcd(str);
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				// The card can work at vdd range of 2.7-3.6V 
// 	  		setpos(5,3);
// 	  		str_lcd("AA01");
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	// Wait for leaving idle state (ACMD41 with HCS bit) 
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	e8 1a       	sub	r14, r24
    1094:	f1 08       	sbc	r15, r1
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <disk_initialize+0xba>
    1098:	0f 2e       	mov	r0, r31
    109a:	f0 ee       	ldi	r31, 0xE0	; 224
    109c:	ef 2e       	mov	r14, r31
    109e:	fe e2       	ldi	r31, 0x2E	; 46
    10a0:	ff 2e       	mov	r15, r31
    10a2:	f0 2d       	mov	r31, r0
    10a4:	e1 14       	cp	r14, r1
    10a6:	f1 04       	cpc	r15, r1
    10a8:	49 f0       	breq	.+18     	; 0x10bc <disk_initialize+0xd2>
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	70 e4       	ldi	r23, 0x40	; 64
    10b2:	89 ee       	ldi	r24, 0xE9	; 233
    10b4:	0e 94 d4 06 	call	0xda8	; 0xda8 <send_cmd>
    10b8:	81 11       	cpse	r24, r1
    10ba:	ea cf       	rjmp	.-44     	; 0x1090 <disk_initialize+0xa6>
				if (tmr && send_cmd(CMD58, 0) == 0) {		// Check CCS bit in the OCR 
    10bc:	ef 28       	or	r14, r15
    10be:	09 f4       	brne	.+2      	; 0x10c2 <disk_initialize+0xd8>
    10c0:	56 c0       	rjmp	.+172    	; 0x116e <disk_initialize+0x184>
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	ba 01       	movw	r22, r20
    10c8:	8a e7       	ldi	r24, 0x7A	; 122
    10ca:	0e 94 d4 06 	call	0xda8	; 0xda8 <send_cmd>
    10ce:	88 23       	and	r24, r24
    10d0:	71 f0       	breq	.+28     	; 0x10ee <disk_initialize+0x104>
#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		// Finalize write process if it is in progress 
#endif
	for (n = 100; n; n--) rcv_spi();	// Dummy clocks 

	ty = 0;
    10d2:	f1 2c       	mov	r15, r1
    10d4:	55 c0       	rjmp	.+170    	; 0x1180 <disk_initialize+0x196>
// 	  		str_lcd("AA01");
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	// Wait for leaving idle state (ACMD41 with HCS bit) 
				if (tmr && send_cmd(CMD58, 0) == 0) {		// Check CCS bit in the OCR 
// 			  		setpos(10,3);
// 					str_lcd("CCS");
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    10d6:	e1 2e       	mov	r14, r17
    10d8:	f1 2c       	mov	r15, r1
    10da:	0e 94 c0 06 	call	0xd80	; 0xd80 <rcv_spi>
    10de:	e1 e0       	ldi	r30, 0x01	; 1
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	ec 0f       	add	r30, r28
    10e4:	fd 1f       	adc	r31, r29
    10e6:	ee 0d       	add	r30, r14
    10e8:	ff 1d       	adc	r31, r15
    10ea:	80 83       	st	Z, r24
    10ec:	1f 5f       	subi	r17, 0xFF	; 255
    10ee:	14 30       	cpi	r17, 0x04	; 4
    10f0:	90 f3       	brcs	.-28     	; 0x10d6 <disk_initialize+0xec>
//  					sprintf(str,"%02X",ocr[1]);
//  					str_lcd(str);
//  					setpos(17,1);
//  					sprintf(str,"%02X",ocr[0]);
//  					str_lcd(str);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	// SDv2 (HC or SC) 
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	86 ff       	sbrs	r24, 6
    10f6:	3d c0       	rjmp	.+122    	; 0x1172 <disk_initialize+0x188>
    10f8:	0f 2e       	mov	r0, r31
    10fa:	fc e0       	ldi	r31, 0x0C	; 12
    10fc:	ff 2e       	mov	r15, r31
    10fe:	f0 2d       	mov	r31, r0
    1100:	3f c0       	rjmp	.+126    	; 0x1180 <disk_initialize+0x196>
				}
			}
		} else {							// SDv1 or MMCv3 
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	ba 01       	movw	r22, r20
    1108:	89 ee       	ldi	r24, 0xE9	; 233
    110a:	0e 94 d4 06 	call	0xda8	; 0xda8 <send_cmd>
    110e:	82 30       	cpi	r24, 0x02	; 2
    1110:	40 f4       	brcc	.+16     	; 0x1122 <disk_initialize+0x138>
				ty = CT_SD1; cmd = ACMD41;	// SDv1 
    1112:	68 94       	set
    1114:	ff 24       	eor	r15, r15
    1116:	f1 f8       	bld	r15, 1
    1118:	0f 2e       	mov	r0, r31
    111a:	f9 ee       	ldi	r31, 0xE9	; 233
    111c:	ef 2e       	mov	r14, r31
    111e:	f0 2d       	mov	r31, r0
    1120:	06 c0       	rjmp	.+12     	; 0x112e <disk_initialize+0x144>
			} else {
				ty = CT_MMC; cmd = CMD1;	// MMCv3 
    1122:	ff 24       	eor	r15, r15
    1124:	f3 94       	inc	r15
    1126:	0f 2e       	mov	r0, r31
    1128:	f1 e4       	ldi	r31, 0x41	; 65
    112a:	ef 2e       	mov	r14, r31
    112c:	f0 2d       	mov	r31, r0
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	// Wait for leaving idle state 
    112e:	08 ea       	ldi	r16, 0xA8	; 168
    1130:	11 e6       	ldi	r17, 0x61	; 97
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <disk_initialize+0x14e>
    1134:	01 50       	subi	r16, 0x01	; 1
    1136:	11 09       	sbc	r17, r1
    1138:	01 15       	cp	r16, r1
    113a:	11 05       	cpc	r17, r1
    113c:	41 f0       	breq	.+16     	; 0x114e <disk_initialize+0x164>
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	ba 01       	movw	r22, r20
    1144:	8e 2d       	mov	r24, r14
    1146:	0e 94 d4 06 	call	0xda8	; 0xda8 <send_cmd>
    114a:	81 11       	cpse	r24, r1
    114c:	f3 cf       	rjmp	.-26     	; 0x1134 <disk_initialize+0x14a>
			if (!tmr || send_cmd(CMD16, 512) != 0)			// Set R/W block length to 512 
    114e:	01 2b       	or	r16, r17
    1150:	a1 f0       	breq	.+40     	; 0x117a <disk_initialize+0x190>
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	52 e0       	ldi	r21, 0x02	; 2
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	80 e5       	ldi	r24, 0x50	; 80
    115c:	0e 94 d4 06 	call	0xda8	; 0xda8 <send_cmd>
    1160:	81 11       	cpse	r24, r1
    1162:	0d c0       	rjmp	.+26     	; 0x117e <disk_initialize+0x194>
    1164:	0d c0       	rjmp	.+26     	; 0x1180 <disk_initialize+0x196>
#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		// Finalize write process if it is in progress 
#endif
	for (n = 100; n; n--) rcv_spi();	// Dummy clocks 

	ty = 0;
    1166:	f1 2c       	mov	r15, r1
    1168:	0b c0       	rjmp	.+22     	; 0x1180 <disk_initialize+0x196>
    116a:	f1 2c       	mov	r15, r1
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <disk_initialize+0x196>
    116e:	f1 2c       	mov	r15, r1
    1170:	07 c0       	rjmp	.+14     	; 0x1180 <disk_initialize+0x196>
//  					sprintf(str,"%02X",ocr[1]);
//  					str_lcd(str);
//  					setpos(17,1);
//  					sprintf(str,"%02X",ocr[0]);
//  					str_lcd(str);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	// SDv2 (HC or SC) 
    1172:	68 94       	set
    1174:	ff 24       	eor	r15, r15
    1176:	f2 f8       	bld	r15, 2
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <disk_initialize+0x196>
			} else {
				ty = CT_MMC; cmd = CMD1;	// MMCv3 
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	// Wait for leaving idle state 
			if (!tmr || send_cmd(CMD16, 512) != 0)			// Set R/W block length to 512 
				ty = 0;
    117a:	f1 2c       	mov	r15, r1
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <disk_initialize+0x196>
    117e:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
    1180:	f0 92 ea 05 	sts	0x05EA, r15	; 0x8005ea <CardType>
//   	sprintf(str,"%d",CardType);
//   	setpos(0,1);
//   	str_lcd(str);
	release_spi();
    1184:	0e 94 19 07 	call	0xe32	; 0xe32 <release_spi>

	return ty ? 0 : STA_NOINIT;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	f1 10       	cpse	r15, r1
    118c:	80 e0       	ldi	r24, 0x00	; 0
}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	ff 90       	pop	r15
    11a0:	ef 90       	pop	r14
    11a2:	08 95       	ret

000011a4 <NRF24L01_Receive>:
//-------------------------------------------------------------
void nRF_command(uint8_t command)
{
	LOW_CSN;
	spi_send_recv(command);
	HIGH_CSN;
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <rx_flag>
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <NRF24L01_Receive+0xe>
    11b0:	6b c1       	rjmp	.+726    	; 0x1488 <NRF24L01_Receive+0x2e4>
    11b2:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <RX_BUF>
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	09 f0       	breq	.+2      	; 0x11bc <NRF24L01_Receive+0x18>
    11ba:	59 c0       	rjmp	.+178    	; 0x126e <NRF24L01_Receive+0xca>
    11bc:	ee ed       	ldi	r30, 0xDE	; 222
    11be:	f1 e0       	ldi	r31, 0x01	; 1
    11c0:	01 90       	ld	r0, Z+
    11c2:	00 20       	and	r0, r0
    11c4:	e9 f7       	brne	.-6      	; 0x11c0 <NRF24L01_Receive+0x1c>
    11c6:	31 97       	sbiw	r30, 0x01	; 1
    11c8:	af 01       	movw	r20, r30
    11ca:	4e 5d       	subi	r20, 0xDE	; 222
    11cc:	51 40       	sbci	r21, 0x01	; 1
    11ce:	44 0f       	add	r20, r20
    11d0:	55 1f       	adc	r21, r21
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	8e ed       	ldi	r24, 0xDE	; 222
    11d8:	91 e0       	ldi	r25, 0x01	; 1
    11da:	0e 94 9c 19 	call	0x3338	; 0x3338 <memset>
    11de:	ec ee       	ldi	r30, 0xEC	; 236
    11e0:	f5 e0       	ldi	r31, 0x05	; 5
    11e2:	81 81       	ldd	r24, Z+1	; 0x01
    11e4:	c2 81       	ldd	r28, Z+2	; 0x02
    11e6:	d0 e0       	ldi	r29, 0x00	; 0
    11e8:	dc 2f       	mov	r29, r28
    11ea:	cc 27       	eor	r28, r28
    11ec:	c8 2b       	or	r28, r24
    11ee:	be 01       	movw	r22, r28
    11f0:	0d 2e       	mov	r0, r29
    11f2:	00 0c       	add	r0, r0
    11f4:	88 0b       	sbc	r24, r24
    11f6:	99 0b       	sbc	r25, r25
    11f8:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatsisf>
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e2       	ldi	r20, 0x20	; 32
    1202:	51 e4       	ldi	r21, 0x41	; 65
    1204:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__divsf3>
    1208:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <temp>
    120c:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <temp+0x1>
    1210:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <temp+0x2>
    1214:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <temp+0x3>
    1218:	dd 23       	and	r29, r29
    121a:	5c f4       	brge	.+22     	; 0x1232 <NRF24L01_Receive+0x8e>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	b0 58       	subi	r27, 0x80	; 128
    1222:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <temp>
    1226:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <temp+0x1>
    122a:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <temp+0x2>
    122e:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <temp+0x3>
    1232:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <temp+0x3>
    1236:	8f 93       	push	r24
    1238:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <temp+0x2>
    123c:	8f 93       	push	r24
    123e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <temp+0x1>
    1242:	8f 93       	push	r24
    1244:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <temp>
    1248:	8f 93       	push	r24
    124a:	85 e4       	ldi	r24, 0x45	; 69
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	9f 93       	push	r25
    1250:	8f 93       	push	r24
    1252:	8e ed       	ldi	r24, 0xDE	; 222
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	9f 93       	push	r25
    1258:	8f 93       	push	r24
    125a:	0e 94 f5 19 	call	0x33ea	; 0x33ea <sprintf>
    125e:	8d b7       	in	r24, 0x3d	; 61
    1260:	9e b7       	in	r25, 0x3e	; 62
    1262:	08 96       	adiw	r24, 0x08	; 8
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	9e bf       	out	0x3e, r25	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	8d bf       	out	0x3d, r24	; 61
    126e:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <RX_BUF>
    1272:	85 30       	cpi	r24, 0x05	; 5
    1274:	09 f0       	breq	.+2      	; 0x1278 <NRF24L01_Receive+0xd4>
    1276:	47 c0       	rjmp	.+142    	; 0x1306 <NRF24L01_Receive+0x162>
    1278:	c4 ed       	ldi	r28, 0xD4	; 212
    127a:	d1 e0       	ldi	r29, 0x01	; 1
    127c:	fe 01       	movw	r30, r28
    127e:	01 90       	ld	r0, Z+
    1280:	00 20       	and	r0, r0
    1282:	e9 f7       	brne	.-6      	; 0x127e <NRF24L01_Receive+0xda>
    1284:	31 97       	sbiw	r30, 0x01	; 1
    1286:	af 01       	movw	r20, r30
    1288:	44 5d       	subi	r20, 0xD4	; 212
    128a:	51 40       	sbci	r21, 0x01	; 1
    128c:	44 0f       	add	r20, r20
    128e:	55 1f       	adc	r21, r21
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	ce 01       	movw	r24, r28
    1296:	0e 94 9c 19 	call	0x3338	; 0x3338 <memset>
    129a:	ec ee       	ldi	r30, 0xEC	; 236
    129c:	f5 e0       	ldi	r31, 0x05	; 5
    129e:	81 81       	ldd	r24, Z+1	; 0x01
    12a0:	62 81       	ldd	r22, Z+2	; 0x02
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	76 2f       	mov	r23, r22
    12a6:	66 27       	eor	r22, r22
    12a8:	68 2b       	or	r22, r24
    12aa:	07 2e       	mov	r0, r23
    12ac:	00 0c       	add	r0, r0
    12ae:	88 0b       	sbc	r24, r24
    12b0:	99 0b       	sbc	r25, r25
    12b2:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatsisf>
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e2       	ldi	r20, 0x20	; 32
    12bc:	51 e4       	ldi	r21, 0x41	; 65
    12be:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__divsf3>
    12c2:	26 2f       	mov	r18, r22
    12c4:	37 2f       	mov	r19, r23
    12c6:	46 2f       	mov	r20, r22
    12c8:	57 2f       	mov	r21, r23
    12ca:	68 2f       	mov	r22, r24
    12cc:	79 2f       	mov	r23, r25
    12ce:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <__data_end>
    12d2:	50 93 55 01 	sts	0x0155, r21	; 0x800155 <__data_end+0x1>
    12d6:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <__data_end+0x2>
    12da:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <__data_end+0x3>
    12de:	9f 93       	push	r25
    12e0:	8f 93       	push	r24
    12e2:	3f 93       	push	r19
    12e4:	2f 93       	push	r18
    12e6:	8a e4       	ldi	r24, 0x4A	; 74
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	9f 93       	push	r25
    12ec:	8f 93       	push	r24
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	0e 94 f5 19 	call	0x33ea	; 0x33ea <sprintf>
    12f6:	8d b7       	in	r24, 0x3d	; 61
    12f8:	9e b7       	in	r25, 0x3e	; 62
    12fa:	08 96       	adiw	r24, 0x08	; 8
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	9e bf       	out	0x3e, r25	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	8d bf       	out	0x3d, r24	; 61
    1306:	c0 91 ec 05 	lds	r28, 0x05EC	; 0x8005ec <RX_BUF>
    130a:	c2 30       	cpi	r28, 0x02	; 2
    130c:	61 f5       	brne	.+88     	; 0x1366 <NRF24L01_Receive+0x1c2>
    130e:	ea ec       	ldi	r30, 0xCA	; 202
    1310:	f1 e0       	ldi	r31, 0x01	; 1
    1312:	01 90       	ld	r0, Z+
    1314:	00 20       	and	r0, r0
    1316:	e9 f7       	brne	.-6      	; 0x1312 <NRF24L01_Receive+0x16e>
    1318:	31 97       	sbiw	r30, 0x01	; 1
    131a:	af 01       	movw	r20, r30
    131c:	4a 5c       	subi	r20, 0xCA	; 202
    131e:	51 40       	sbci	r21, 0x01	; 1
    1320:	44 0f       	add	r20, r20
    1322:	55 1f       	adc	r21, r21
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	8a ec       	ldi	r24, 0xCA	; 202
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	0e 94 9c 19 	call	0x3338	; 0x3338 <memset>
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	0b c0       	rjmp	.+22     	; 0x134a <NRF24L01_Receive+0x1a6>
    1334:	82 2f       	mov	r24, r18
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	fc 01       	movw	r30, r24
    133a:	e3 51       	subi	r30, 0x13	; 19
    133c:	fa 4f       	sbci	r31, 0xFA	; 250
    133e:	30 81       	ld	r19, Z
    1340:	fc 01       	movw	r30, r24
    1342:	e6 53       	subi	r30, 0x36	; 54
    1344:	fe 4f       	sbci	r31, 0xFE	; 254
    1346:	30 83       	st	Z, r19
    1348:	2f 5f       	subi	r18, 0xFF	; 255
    134a:	82 2f       	mov	r24, r18
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	ec ee       	ldi	r30, 0xEC	; 236
    1350:	f5 e0       	ldi	r31, 0x05	; 5
    1352:	01 90       	ld	r0, Z+
    1354:	00 20       	and	r0, r0
    1356:	e9 f7       	brne	.-6      	; 0x1352 <NRF24L01_Receive+0x1ae>
    1358:	31 97       	sbiw	r30, 0x01	; 1
    135a:	ec 5e       	subi	r30, 0xEC	; 236
    135c:	f5 40       	sbci	r31, 0x05	; 5
    135e:	31 97       	sbiw	r30, 0x01	; 1
    1360:	8e 17       	cp	r24, r30
    1362:	9f 07       	cpc	r25, r31
    1364:	38 f3       	brcs	.-50     	; 0x1334 <NRF24L01_Receive+0x190>
    1366:	c3 30       	cpi	r28, 0x03	; 3
    1368:	89 f5       	brne	.+98     	; 0x13cc <NRF24L01_Receive+0x228>
    136a:	e6 eb       	ldi	r30, 0xB6	; 182
    136c:	f1 e0       	ldi	r31, 0x01	; 1
    136e:	01 90       	ld	r0, Z+
    1370:	00 20       	and	r0, r0
    1372:	e9 f7       	brne	.-6      	; 0x136e <NRF24L01_Receive+0x1ca>
    1374:	31 97       	sbiw	r30, 0x01	; 1
    1376:	af 01       	movw	r20, r30
    1378:	46 5b       	subi	r20, 0xB6	; 182
    137a:	51 40       	sbci	r21, 0x01	; 1
    137c:	44 0f       	add	r20, r20
    137e:	55 1f       	adc	r21, r21
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	86 eb       	ldi	r24, 0xB6	; 182
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	0e 94 9c 19 	call	0x3338	; 0x3338 <memset>
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	0b c0       	rjmp	.+22     	; 0x13a6 <NRF24L01_Receive+0x202>
    1390:	82 2f       	mov	r24, r18
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	fc 01       	movw	r30, r24
    1396:	e3 51       	subi	r30, 0x13	; 19
    1398:	fa 4f       	sbci	r31, 0xFA	; 250
    139a:	30 81       	ld	r19, Z
    139c:	fc 01       	movw	r30, r24
    139e:	ea 54       	subi	r30, 0x4A	; 74
    13a0:	fe 4f       	sbci	r31, 0xFE	; 254
    13a2:	30 83       	st	Z, r19
    13a4:	2f 5f       	subi	r18, 0xFF	; 255
    13a6:	82 2f       	mov	r24, r18
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	ec ee       	ldi	r30, 0xEC	; 236
    13ac:	f5 e0       	ldi	r31, 0x05	; 5
    13ae:	01 90       	ld	r0, Z+
    13b0:	00 20       	and	r0, r0
    13b2:	e9 f7       	brne	.-6      	; 0x13ae <NRF24L01_Receive+0x20a>
    13b4:	31 97       	sbiw	r30, 0x01	; 1
    13b6:	ec 5e       	subi	r30, 0xEC	; 236
    13b8:	f5 40       	sbci	r31, 0x05	; 5
    13ba:	31 97       	sbiw	r30, 0x01	; 1
    13bc:	8e 17       	cp	r24, r30
    13be:	9f 07       	cpc	r25, r31
    13c0:	38 f3       	brcs	.-50     	; 0x1390 <NRF24L01_Receive+0x1ec>
    13c2:	fc 01       	movw	r30, r24
    13c4:	e9 54       	subi	r30, 0x49	; 73
    13c6:	fe 4f       	sbci	r31, 0xFE	; 254
    13c8:	80 e2       	ldi	r24, 0x20	; 32
    13ca:	80 83       	st	Z, r24
    13cc:	c4 30       	cpi	r28, 0x04	; 4
    13ce:	61 f5       	brne	.+88     	; 0x1428 <NRF24L01_Receive+0x284>
    13d0:	ec ea       	ldi	r30, 0xAC	; 172
    13d2:	f1 e0       	ldi	r31, 0x01	; 1
    13d4:	01 90       	ld	r0, Z+
    13d6:	00 20       	and	r0, r0
    13d8:	e9 f7       	brne	.-6      	; 0x13d4 <NRF24L01_Receive+0x230>
    13da:	31 97       	sbiw	r30, 0x01	; 1
    13dc:	af 01       	movw	r20, r30
    13de:	4c 5a       	subi	r20, 0xAC	; 172
    13e0:	51 40       	sbci	r21, 0x01	; 1
    13e2:	44 0f       	add	r20, r20
    13e4:	55 1f       	adc	r21, r21
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	8c ea       	ldi	r24, 0xAC	; 172
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	0e 94 9c 19 	call	0x3338	; 0x3338 <memset>
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	0b c0       	rjmp	.+22     	; 0x140c <NRF24L01_Receive+0x268>
    13f6:	82 2f       	mov	r24, r18
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	fc 01       	movw	r30, r24
    13fc:	e3 51       	subi	r30, 0x13	; 19
    13fe:	fa 4f       	sbci	r31, 0xFA	; 250
    1400:	30 81       	ld	r19, Z
    1402:	fc 01       	movw	r30, r24
    1404:	e4 55       	subi	r30, 0x54	; 84
    1406:	fe 4f       	sbci	r31, 0xFE	; 254
    1408:	30 83       	st	Z, r19
    140a:	2f 5f       	subi	r18, 0xFF	; 255
    140c:	82 2f       	mov	r24, r18
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	ec ee       	ldi	r30, 0xEC	; 236
    1412:	f5 e0       	ldi	r31, 0x05	; 5
    1414:	01 90       	ld	r0, Z+
    1416:	00 20       	and	r0, r0
    1418:	e9 f7       	brne	.-6      	; 0x1414 <NRF24L01_Receive+0x270>
    141a:	31 97       	sbiw	r30, 0x01	; 1
    141c:	ec 5e       	subi	r30, 0xEC	; 236
    141e:	f5 40       	sbci	r31, 0x05	; 5
    1420:	31 97       	sbiw	r30, 0x01	; 1
    1422:	8e 17       	cp	r24, r30
    1424:	9f 07       	cpc	r25, r31
    1426:	38 f3       	brcs	.-50     	; 0x13f6 <NRF24L01_Receive+0x252>
    1428:	c6 30       	cpi	r28, 0x06	; 6
    142a:	61 f5       	brne	.+88     	; 0x1484 <NRF24L01_Receive+0x2e0>
    142c:	e2 ea       	ldi	r30, 0xA2	; 162
    142e:	f1 e0       	ldi	r31, 0x01	; 1
    1430:	01 90       	ld	r0, Z+
    1432:	00 20       	and	r0, r0
    1434:	e9 f7       	brne	.-6      	; 0x1430 <NRF24L01_Receive+0x28c>
    1436:	31 97       	sbiw	r30, 0x01	; 1
    1438:	af 01       	movw	r20, r30
    143a:	42 5a       	subi	r20, 0xA2	; 162
    143c:	51 40       	sbci	r21, 0x01	; 1
    143e:	44 0f       	add	r20, r20
    1440:	55 1f       	adc	r21, r21
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	82 ea       	ldi	r24, 0xA2	; 162
    1448:	91 e0       	ldi	r25, 0x01	; 1
    144a:	0e 94 9c 19 	call	0x3338	; 0x3338 <memset>
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	0b c0       	rjmp	.+22     	; 0x1468 <NRF24L01_Receive+0x2c4>
    1452:	82 2f       	mov	r24, r18
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	fc 01       	movw	r30, r24
    1458:	e3 51       	subi	r30, 0x13	; 19
    145a:	fa 4f       	sbci	r31, 0xFA	; 250
    145c:	30 81       	ld	r19, Z
    145e:	fc 01       	movw	r30, r24
    1460:	ee 55       	subi	r30, 0x5E	; 94
    1462:	fe 4f       	sbci	r31, 0xFE	; 254
    1464:	30 83       	st	Z, r19
    1466:	2f 5f       	subi	r18, 0xFF	; 255
    1468:	82 2f       	mov	r24, r18
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	ec ee       	ldi	r30, 0xEC	; 236
    146e:	f5 e0       	ldi	r31, 0x05	; 5
    1470:	01 90       	ld	r0, Z+
    1472:	00 20       	and	r0, r0
    1474:	e9 f7       	brne	.-6      	; 0x1470 <NRF24L01_Receive+0x2cc>
    1476:	31 97       	sbiw	r30, 0x01	; 1
    1478:	ec 5e       	subi	r30, 0xEC	; 236
    147a:	f5 40       	sbci	r31, 0x05	; 5
    147c:	31 97       	sbiw	r30, 0x01	; 1
    147e:	8e 17       	cp	r24, r30
    1480:	9f 07       	cpc	r25, r31
    1482:	38 f3       	brcs	.-50     	; 0x1452 <NRF24L01_Receive+0x2ae>
    1484:	10 92 eb 05 	sts	0x05EB, r1	; 0x8005eb <rx_flag>
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <NRF24_FlushRX>:
    148e:	85 b1       	in	r24, 0x05	; 5
    1490:	8b 7f       	andi	r24, 0xFB	; 251
    1492:	85 b9       	out	0x05, r24	; 5
    1494:	82 ee       	ldi	r24, 0xE2	; 226
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_send_recv>
    149c:	85 e0       	ldi	r24, 0x05	; 5
    149e:	8a 95       	dec	r24
    14a0:	f1 f7       	brne	.-4      	; 0x149e <NRF24_FlushRX+0x10>
    14a2:	00 00       	nop
    14a4:	85 b1       	in	r24, 0x05	; 5
    14a6:	84 60       	ori	r24, 0x04	; 4
    14a8:	85 b9       	out	0x05, r24	; 5
    14aa:	08 95       	ret

000014ac <NRF24_FlushTX>:
    14ac:	85 b1       	in	r24, 0x05	; 5
    14ae:	8b 7f       	andi	r24, 0xFB	; 251
    14b0:	85 b9       	out	0x05, r24	; 5
    14b2:	81 ee       	ldi	r24, 0xE1	; 225
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_send_recv>
    14ba:	85 e0       	ldi	r24, 0x05	; 5
    14bc:	8a 95       	dec	r24
    14be:	f1 f7       	brne	.-4      	; 0x14bc <NRF24_FlushTX+0x10>
    14c0:	00 00       	nop
    14c2:	85 b1       	in	r24, 0x05	; 5
    14c4:	84 60       	ori	r24, 0x04	; 4
    14c6:	85 b9       	out	0x05, r24	; 5
    14c8:	08 95       	ret

000014ca <NRF24_ToggleFeatures>:
    14ca:	85 b1       	in	r24, 0x05	; 5
    14cc:	8b 7f       	andi	r24, 0xFB	; 251
    14ce:	85 b9       	out	0x05, r24	; 5
    14d0:	80 e5       	ldi	r24, 0x50	; 80
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_send_recv>
    14d8:	85 e0       	ldi	r24, 0x05	; 5
    14da:	8a 95       	dec	r24
    14dc:	f1 f7       	brne	.-4      	; 0x14da <NRF24_ToggleFeatures+0x10>
    14de:	00 00       	nop
    14e0:	83 e7       	ldi	r24, 0x73	; 115
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_send_recv>
    14e8:	85 b1       	in	r24, 0x05	; 5
    14ea:	84 60       	ori	r24, 0x04	; 4
    14ec:	85 b9       	out	0x05, r24	; 5
    14ee:	08 95       	ret

000014f0 <NRF24_Read_Buf>:
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	8b 01       	movw	r16, r22
    14fe:	c4 2f       	mov	r28, r20
    1500:	95 b1       	in	r25, 0x05	; 5
    1502:	9b 7f       	andi	r25, 0xFB	; 251
    1504:	95 b9       	out	0x05, r25	; 5
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_send_recv>
    150c:	0c c0       	rjmp	.+24     	; 0x1526 <NRF24_Read_Buf+0x36>
    150e:	78 01       	movw	r14, r16
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	e8 1a       	sub	r14, r24
    1514:	f8 0a       	sbc	r15, r24
    1516:	8f ef       	ldi	r24, 0xFF	; 255
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_send_recv>
    151e:	f8 01       	movw	r30, r16
    1520:	80 83       	st	Z, r24
    1522:	cd 2f       	mov	r28, r29
    1524:	87 01       	movw	r16, r14
    1526:	df ef       	ldi	r29, 0xFF	; 255
    1528:	dc 0f       	add	r29, r28
    152a:	c1 11       	cpse	r28, r1
    152c:	f0 cf       	rjmp	.-32     	; 0x150e <NRF24_Read_Buf+0x1e>
    152e:	85 b1       	in	r24, 0x05	; 5
    1530:	84 60       	ori	r24, 0x04	; 4
    1532:	85 b9       	out	0x05, r24	; 5
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ff 90       	pop	r15
    153e:	ef 90       	pop	r14
    1540:	08 95       	ret

00001542 <NRF24_Write_Buf>:
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	8b 01       	movw	r16, r22
    1550:	c4 2f       	mov	r28, r20
    1552:	80 62       	ori	r24, 0x20	; 32
    1554:	95 b1       	in	r25, 0x05	; 5
    1556:	9b 7f       	andi	r25, 0xFB	; 251
    1558:	95 b9       	out	0x05, r25	; 5
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_send_recv>
    1560:	85 e0       	ldi	r24, 0x05	; 5
    1562:	8a 95       	dec	r24
    1564:	f1 f7       	brne	.-4      	; 0x1562 <NRF24_Write_Buf+0x20>
    1566:	00 00       	nop
    1568:	0b c0       	rjmp	.+22     	; 0x1580 <NRF24_Write_Buf+0x3e>
    156a:	78 01       	movw	r14, r16
    156c:	ef ef       	ldi	r30, 0xFF	; 255
    156e:	ee 1a       	sub	r14, r30
    1570:	fe 0a       	sbc	r15, r30
    1572:	f8 01       	movw	r30, r16
    1574:	80 81       	ld	r24, Z
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_send_recv>
    157c:	cd 2f       	mov	r28, r29
    157e:	87 01       	movw	r16, r14
    1580:	df ef       	ldi	r29, 0xFF	; 255
    1582:	dc 0f       	add	r29, r28
    1584:	c1 11       	cpse	r28, r1
    1586:	f1 cf       	rjmp	.-30     	; 0x156a <NRF24_Write_Buf+0x28>
    1588:	85 b1       	in	r24, 0x05	; 5
    158a:	84 60       	ori	r24, 0x04	; 4
    158c:	85 b9       	out	0x05, r24	; 5
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	ff 90       	pop	r15
    1598:	ef 90       	pop	r14
    159a:	08 95       	ret

0000159c <nRF_write_register>:
}
//-------------------------------------------------------------
void nRF_write_register(uint8_t reg, uint8_t data_out)
{
    159c:	cf 93       	push	r28
    159e:	c6 2f       	mov	r28, r22
	reg |= W_REGISTER;
    15a0:	80 62       	ori	r24, 0x20	; 32
	LOW_CSN;
    15a2:	95 b1       	in	r25, 0x05	; 5
    15a4:	9b 7f       	andi	r25, 0xFB	; 251
    15a6:	95 b9       	out	0x05, r25	; 5
	spi_send_recv(reg);
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_send_recv>
	spi_send_recv(data_out);
    15ae:	8c 2f       	mov	r24, r28
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_send_recv>
	HIGH_CSN;
    15b6:	85 b1       	in	r24, 0x05	; 5
    15b8:	84 60       	ori	r24, 0x04	; 4
    15ba:	85 b9       	out	0x05, r24	; 5
}
    15bc:	cf 91       	pop	r28
    15be:	08 95       	ret

000015c0 <nRF_read_register>:
//-------------------------------------------------------------
uint8_t nRF_read_register(uint8_t reg)
{
    15c0:	cf 93       	push	r28
    15c2:	c8 2f       	mov	r28, r24
	uint8_t data_in;
	LOW_CSN;
    15c4:	85 b1       	in	r24, 0x05	; 5
    15c6:	8b 7f       	andi	r24, 0xFB	; 251
    15c8:	85 b9       	out	0x05, r24	; 5
	data_in = spi_send_recv(reg);
    15ca:	8c 2f       	mov	r24, r28
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_send_recv>
	if(reg != STATUS)
    15d2:	c7 30       	cpi	r28, 0x07	; 7
    15d4:	21 f0       	breq	.+8      	; 0x15de <nRF_read_register+0x1e>
	{
		data_in = spi_send_recv(NOP);
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_send_recv>
	}
	HIGH_CSN;
    15de:	95 b1       	in	r25, 0x05	; 5
    15e0:	94 60       	ori	r25, 0x04	; 4
    15e2:	95 b9       	out	0x05, r25	; 5
	return data_in;
}
    15e4:	cf 91       	pop	r28
    15e6:	08 95       	ret

000015e8 <__vector_1>:
		//memset(RX_BUF, 0, sizeof(int) * strlen(RX_BUF));//очистка массива
		rx_flag = 0;
	}
}
ISR(INT0_vect)
{
    15e8:	1f 92       	push	r1
    15ea:	0f 92       	push	r0
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	0f 92       	push	r0
    15f0:	11 24       	eor	r1, r1
    15f2:	2f 93       	push	r18
    15f4:	3f 93       	push	r19
    15f6:	4f 93       	push	r20
    15f8:	5f 93       	push	r21
    15fa:	6f 93       	push	r22
    15fc:	7f 93       	push	r23
    15fe:	8f 93       	push	r24
    1600:	9f 93       	push	r25
    1602:	af 93       	push	r26
    1604:	bf 93       	push	r27
    1606:	ef 93       	push	r30
    1608:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    160a:	8f ea       	ldi	r24, 0xAF	; 175
    160c:	94 e0       	ldi	r25, 0x04	; 4
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	f1 f7       	brne	.-4      	; 0x160e <__vector_1+0x26>
    1612:	00 c0       	rjmp	.+0      	; 0x1614 <__vector_1+0x2c>
    1614:	00 00       	nop
	uint8_t status=0x01;
	uint8_t pipe;
	_delay_us(300);
	PORTD |= (1<<LED);
    1616:	8b b1       	in	r24, 0x0b	; 11
    1618:	80 61       	ori	r24, 0x10	; 16
    161a:	8b b9       	out	0x0b, r24	; 11
    161c:	8f ea       	ldi	r24, 0xAF	; 175
    161e:	94 e0       	ldi	r25, 0x04	; 4
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <__vector_1+0x38>
    1624:	00 c0       	rjmp	.+0      	; 0x1626 <__vector_1+0x3e>
    1626:	00 00       	nop
	_delay_us(300);
	PORTD &= ~(1<<LED);
    1628:	8b b1       	in	r24, 0x0b	; 11
    162a:	8f 7e       	andi	r24, 0xEF	; 239
    162c:	8b b9       	out	0x0b, r24	; 11
	status = nRF_read_register(STATUS);
    162e:	87 e0       	ldi	r24, 0x07	; 7
    1630:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <nRF_read_register>
	if(status & 0x40)
    1634:	86 ff       	sbrs	r24, 6
    1636:	0a c0       	rjmp	.+20     	; 0x164c <__vector_1+0x64>
	{
		NRF24_Read_Buf(R_RX_PAYLOAD,RX_BUF,TX_PLOAD_WIDTH);
    1638:	45 e0       	ldi	r20, 0x05	; 5
    163a:	6c ee       	ldi	r22, 0xEC	; 236
    163c:	75 e0       	ldi	r23, 0x05	; 5
    163e:	81 e6       	ldi	r24, 0x61	; 97
    1640:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <NRF24_Read_Buf>
		nRF_write_register(STATUS, 0x40);
    1644:	60 e4       	ldi	r22, 0x40	; 64
    1646:	87 e0       	ldi	r24, 0x07	; 7
    1648:	0e 94 ce 0a 	call	0x159c	; 0x159c <nRF_write_register>
	}
	 rx_flag = 1;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <rx_flag>
}
    1652:	ff 91       	pop	r31
    1654:	ef 91       	pop	r30
    1656:	bf 91       	pop	r27
    1658:	af 91       	pop	r26
    165a:	9f 91       	pop	r25
    165c:	8f 91       	pop	r24
    165e:	7f 91       	pop	r23
    1660:	6f 91       	pop	r22
    1662:	5f 91       	pop	r21
    1664:	4f 91       	pop	r20
    1666:	3f 91       	pop	r19
    1668:	2f 91       	pop	r18
    166a:	0f 90       	pop	r0
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	0f 90       	pop	r0
    1670:	1f 90       	pop	r1
    1672:	18 95       	reti

00001674 <NRF24L01_RX_Mode>:
}
//-------------------------------------------------------------
void NRF24L01_RX_Mode(void) // включение режима приема
{
	uint8_t regval = 0x00;
	regval = nRF_read_register(CONFIG);
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <nRF_read_register>
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
    167a:	68 2f       	mov	r22, r24
    167c:	63 60       	ori	r22, 0x03	; 3
	nRF_write_register(CONFIG,regval);
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	0e 94 ce 0a 	call	0x159c	; 0x159c <nRF_write_register>
	HIGH_CE;
    1684:	85 b1       	in	r24, 0x05	; 5
    1686:	82 60       	ori	r24, 0x02	; 2
    1688:	85 b9       	out	0x05, r24	; 5
    168a:	87 e5       	ldi	r24, 0x57	; 87
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <NRF24L01_RX_Mode+0x1a>
    1692:	00 c0       	rjmp	.+0      	; 0x1694 <NRF24L01_RX_Mode+0x20>
    1694:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
    1696:	0e 94 47 0a 	call	0x148e	; 0x148e <NRF24_FlushRX>
	NRF24_FlushTX();
    169a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <NRF24_FlushTX>
    169e:	08 95       	ret

000016a0 <NRF24_ini>:
extern uint8_t flag_irq;
volatile uint8_t rx_flag = 0;
//-------------------------------------------------------------
void NRF24_ini(void)
{
	LOW_CE;
    16a0:	85 b1       	in	r24, 0x05	; 5
    16a2:	8d 7f       	andi	r24, 0xFD	; 253
    16a4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16a6:	8f e1       	ldi	r24, 0x1F	; 31
    16a8:	9e e4       	ldi	r25, 0x4E	; 78
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <NRF24_ini+0xa>
    16ae:	00 c0       	rjmp	.+0      	; 0x16b0 <NRF24_ini+0x10>
    16b0:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
    16b2:	6a e0       	ldi	r22, 0x0A	; 10
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	0e 94 ce 0a 	call	0x159c	; 0x159c <nRF_write_register>
    16ba:	8f e1       	ldi	r24, 0x1F	; 31
    16bc:	9e e4       	ldi	r25, 0x4E	; 78
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <NRF24_ini+0x1e>
    16c2:	00 c0       	rjmp	.+0      	; 0x16c4 <NRF24_ini+0x24>
    16c4:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(EN_AA, 0x02); // Enable Pipe1
    16c6:	62 e0       	ldi	r22, 0x02	; 2
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	0e 94 ce 0a 	call	0x159c	; 0x159c <nRF_write_register>
	nRF_write_register(EN_RXADDR, 0x02); // Enable Pipe1
    16ce:	62 e0       	ldi	r22, 0x02	; 2
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	0e 94 ce 0a 	call	0x159c	; 0x159c <nRF_write_register>
	nRF_write_register(SETUP_AW, 0x01); // Setup address width=3 bytes
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	83 e0       	ldi	r24, 0x03	; 3
    16da:	0e 94 ce 0a 	call	0x159c	; 0x159c <nRF_write_register>
	nRF_write_register(SETUP_RETR, 0x5F); // // 1500us, 15 retrans
    16de:	6f e5       	ldi	r22, 0x5F	; 95
    16e0:	84 e0       	ldi	r24, 0x04	; 4
    16e2:	0e 94 ce 0a 	call	0x159c	; 0x159c <nRF_write_register>
	NRF24_ToggleFeatures();
    16e6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <NRF24_ToggleFeatures>
	nRF_write_register(FEATURE, 0);
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	8d e1       	ldi	r24, 0x1D	; 29
    16ee:	0e 94 ce 0a 	call	0x159c	; 0x159c <nRF_write_register>
	nRF_write_register(DYNPD, 0);
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	8c e1       	ldi	r24, 0x1C	; 28
    16f6:	0e 94 ce 0a 	call	0x159c	; 0x159c <nRF_write_register>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
    16fa:	60 e7       	ldi	r22, 0x70	; 112
    16fc:	87 e0       	ldi	r24, 0x07	; 7
    16fe:	0e 94 ce 0a 	call	0x159c	; 0x159c <nRF_write_register>
	nRF_write_register(RF_CH, 76); // частота 2476 MHz
    1702:	6c e4       	ldi	r22, 0x4C	; 76
    1704:	85 e0       	ldi	r24, 0x05	; 5
    1706:	0e 94 ce 0a 	call	0x159c	; 0x159c <nRF_write_register>
	nRF_write_register(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
    170a:	66 e0       	ldi	r22, 0x06	; 6
    170c:	86 e0       	ldi	r24, 0x06	; 6
    170e:	0e 94 ce 0a 	call	0x159c	; 0x159c <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
    1712:	43 e0       	ldi	r20, 0x03	; 3
    1714:	64 e0       	ldi	r22, 0x04	; 4
    1716:	71 e0       	ldi	r23, 0x01	; 1
    1718:	80 e1       	ldi	r24, 0x10	; 16
    171a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS, TX_ADR_WIDTH);
    171e:	43 e0       	ldi	r20, 0x03	; 3
    1720:	64 e0       	ldi	r22, 0x04	; 4
    1722:	71 e0       	ldi	r23, 0x01	; 1
    1724:	8b e0       	ldi	r24, 0x0B	; 11
    1726:	0e 94 a1 0a 	call	0x1542	; 0x1542 <NRF24_Write_Buf>
	nRF_write_register(RX_PW_P1, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
    172a:	65 e0       	ldi	r22, 0x05	; 5
    172c:	82 e1       	ldi	r24, 0x12	; 18
    172e:	0e 94 ce 0a 	call	0x159c	; 0x159c <nRF_write_register>
	//пока уходим в режим приёмника
	NRF24L01_RX_Mode();
    1732:	0e 94 3a 0b 	call	0x1674	; 0x1674 <NRF24L01_RX_Mode>
    1736:	08 95       	ret

00001738 <mem_set>:
	return FR_OK;

fw_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
    1738:	fc 01       	movw	r30, r24
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <mem_set+0xa>
    173c:	60 83       	st	Z, r22
    173e:	ac 01       	movw	r20, r24
    1740:	31 96       	adiw	r30, 0x01	; 1
    1742:	ca 01       	movw	r24, r20
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	45 2b       	or	r20, r21
    1748:	c9 f7       	brne	.-14     	; 0x173c <mem_set+0x4>
    174a:	08 95       	ret

0000174c <mem_cmp>:
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	dc 01       	movw	r26, r24
    1752:	fb 01       	movw	r30, r22
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 c0       	rjmp	.+4      	; 0x175e <mem_cmp+0x12>
    175a:	fb 01       	movw	r30, r22
    175c:	de 01       	movw	r26, r28
    175e:	9a 01       	movw	r18, r20
    1760:	21 50       	subi	r18, 0x01	; 1
    1762:	31 09       	sbc	r19, r1
    1764:	45 2b       	or	r20, r21
    1766:	61 f0       	breq	.+24     	; 0x1780 <mem_cmp+0x34>
    1768:	ed 01       	movw	r28, r26
    176a:	21 96       	adiw	r28, 0x01	; 1
    176c:	8c 91       	ld	r24, X
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	bf 01       	movw	r22, r30
    1772:	6f 5f       	subi	r22, 0xFF	; 255
    1774:	7f 4f       	sbci	r23, 0xFF	; 255
    1776:	40 81       	ld	r20, Z
    1778:	84 1b       	sub	r24, r20
    177a:	91 09       	sbc	r25, r1
    177c:	a9 01       	movw	r20, r18
    177e:	69 f3       	breq	.-38     	; 0x175a <mem_cmp+0xe>
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	08 95       	ret

00001786 <clust2sect>:
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	e0 91 f1 05 	lds	r30, 0x05F1	; 0x8005f1 <FatFs>
    178e:	f0 91 f2 05 	lds	r31, 0x05F2	; 0x8005f2 <FatFs+0x1>
    1792:	9b 01       	movw	r18, r22
    1794:	ac 01       	movw	r20, r24
    1796:	22 50       	subi	r18, 0x02	; 2
    1798:	31 09       	sbc	r19, r1
    179a:	41 09       	sbc	r20, r1
    179c:	51 09       	sbc	r21, r1
    179e:	80 85       	ldd	r24, Z+8	; 0x08
    17a0:	91 85       	ldd	r25, Z+9	; 0x09
    17a2:	a2 85       	ldd	r26, Z+10	; 0x0a
    17a4:	b3 85       	ldd	r27, Z+11	; 0x0b
    17a6:	02 97       	sbiw	r24, 0x02	; 2
    17a8:	a1 09       	sbc	r26, r1
    17aa:	b1 09       	sbc	r27, r1
    17ac:	28 17       	cp	r18, r24
    17ae:	39 07       	cpc	r19, r25
    17b0:	4a 07       	cpc	r20, r26
    17b2:	5b 07       	cpc	r21, r27
    17b4:	68 f4       	brcc	.+26     	; 0x17d0 <clust2sect+0x4a>
    17b6:	a1 81       	ldd	r26, Z+1	; 0x01
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__muluhisi3>
    17be:	04 89       	ldd	r16, Z+20	; 0x14
    17c0:	15 89       	ldd	r17, Z+21	; 0x15
    17c2:	26 89       	ldd	r18, Z+22	; 0x16
    17c4:	37 89       	ldd	r19, Z+23	; 0x17
    17c6:	60 0f       	add	r22, r16
    17c8:	71 1f       	adc	r23, r17
    17ca:	82 1f       	adc	r24, r18
    17cc:	93 1f       	adc	r25, r19
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <clust2sect+0x50>
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	cb 01       	movw	r24, r22
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	08 95       	ret

000017dc <dir_rewind>:
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	fc 01       	movw	r30, r24
    17e6:	a0 91 f1 05 	lds	r26, 0x05F1	; 0x8005f1 <FatFs>
    17ea:	b0 91 f2 05 	lds	r27, 0x05F2	; 0x8005f2 <FatFs+0x1>
    17ee:	11 82       	std	Z+1, r1	; 0x01
    17f0:	10 82       	st	Z, r1
    17f2:	64 81       	ldd	r22, Z+4	; 0x04
    17f4:	75 81       	ldd	r23, Z+5	; 0x05
    17f6:	86 81       	ldd	r24, Z+6	; 0x06
    17f8:	97 81       	ldd	r25, Z+7	; 0x07
    17fa:	61 30       	cpi	r22, 0x01	; 1
    17fc:	71 05       	cpc	r23, r1
    17fe:	81 05       	cpc	r24, r1
    1800:	91 05       	cpc	r25, r1
    1802:	91 f1       	breq	.+100    	; 0x1868 <dir_rewind+0x8c>
    1804:	18 96       	adiw	r26, 0x08	; 8
    1806:	0d 91       	ld	r16, X+
    1808:	1d 91       	ld	r17, X+
    180a:	2d 91       	ld	r18, X+
    180c:	3c 91       	ld	r19, X
    180e:	1b 97       	sbiw	r26, 0x0b	; 11
    1810:	60 17       	cp	r22, r16
    1812:	71 07       	cpc	r23, r17
    1814:	82 07       	cpc	r24, r18
    1816:	93 07       	cpc	r25, r19
    1818:	48 f5       	brcc	.+82     	; 0x186c <dir_rewind+0x90>
    181a:	61 15       	cp	r22, r1
    181c:	71 05       	cpc	r23, r1
    181e:	81 05       	cpc	r24, r1
    1820:	91 05       	cpc	r25, r1
    1822:	49 f4       	brne	.+18     	; 0x1836 <dir_rewind+0x5a>
    1824:	2c 91       	ld	r18, X
    1826:	23 30       	cpi	r18, 0x03	; 3
    1828:	31 f4       	brne	.+12     	; 0x1836 <dir_rewind+0x5a>
    182a:	50 96       	adiw	r26, 0x10	; 16
    182c:	6d 91       	ld	r22, X+
    182e:	7d 91       	ld	r23, X+
    1830:	8d 91       	ld	r24, X+
    1832:	9c 91       	ld	r25, X
    1834:	53 97       	sbiw	r26, 0x13	; 19
    1836:	ef 01       	movw	r28, r30
    1838:	60 87       	std	Z+8, r22	; 0x08
    183a:	71 87       	std	Z+9, r23	; 0x09
    183c:	82 87       	std	Z+10, r24	; 0x0a
    183e:	93 87       	std	Z+11, r25	; 0x0b
    1840:	61 15       	cp	r22, r1
    1842:	71 05       	cpc	r23, r1
    1844:	81 05       	cpc	r24, r1
    1846:	91 05       	cpc	r25, r1
    1848:	19 f0       	breq	.+6      	; 0x1850 <dir_rewind+0x74>
    184a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <clust2sect>
    184e:	06 c0       	rjmp	.+12     	; 0x185c <dir_rewind+0x80>
    1850:	50 96       	adiw	r26, 0x10	; 16
    1852:	6d 91       	ld	r22, X+
    1854:	7d 91       	ld	r23, X+
    1856:	8d 91       	ld	r24, X+
    1858:	9c 91       	ld	r25, X
    185a:	53 97       	sbiw	r26, 0x13	; 19
    185c:	6c 87       	std	Y+12, r22	; 0x0c
    185e:	7d 87       	std	Y+13, r23	; 0x0d
    1860:	8e 87       	std	Y+14, r24	; 0x0e
    1862:	9f 87       	std	Y+15, r25	; 0x0f
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	03 c0       	rjmp	.+6      	; 0x186e <dir_rewind+0x92>
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	01 c0       	rjmp	.+2      	; 0x186e <dir_rewind+0x92>
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	08 95       	ret

00001878 <create_name>:
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	eb 01       	movw	r28, r22
    1882:	fc 01       	movw	r30, r24
    1884:	02 81       	ldd	r16, Z+2	; 0x02
    1886:	13 81       	ldd	r17, Z+3	; 0x03
    1888:	4b e0       	ldi	r20, 0x0B	; 11
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	60 e2       	ldi	r22, 0x20	; 32
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	c8 01       	movw	r24, r16
    1892:	0e 94 9c 0b 	call	0x1738	; 0x1738 <mem_set>
    1896:	28 81       	ld	r18, Y
    1898:	39 81       	ldd	r19, Y+1	; 0x01
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	58 e0       	ldi	r21, 0x08	; 8
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <create_name+0x2c>
    18a2:	84 2f       	mov	r24, r20
    18a4:	41 e0       	ldi	r20, 0x01	; 1
    18a6:	48 0f       	add	r20, r24
    18a8:	f9 01       	movw	r30, r18
    18aa:	e8 0f       	add	r30, r24
    18ac:	f1 1d       	adc	r31, r1
    18ae:	80 81       	ld	r24, Z
    18b0:	81 32       	cpi	r24, 0x21	; 33
    18b2:	c0 f0       	brcs	.+48     	; 0x18e4 <create_name+0x6c>
    18b4:	8f 32       	cpi	r24, 0x2F	; 47
    18b6:	b1 f0       	breq	.+44     	; 0x18e4 <create_name+0x6c>
    18b8:	8e 32       	cpi	r24, 0x2E	; 46
    18ba:	11 f0       	breq	.+4      	; 0x18c0 <create_name+0x48>
    18bc:	95 17       	cp	r25, r21
    18be:	38 f0       	brcs	.+14     	; 0x18ce <create_name+0x56>
    18c0:	58 30       	cpi	r21, 0x08	; 8
    18c2:	81 f4       	brne	.+32     	; 0x18e4 <create_name+0x6c>
    18c4:	8e 32       	cpi	r24, 0x2E	; 46
    18c6:	71 f4       	brne	.+28     	; 0x18e4 <create_name+0x6c>
    18c8:	98 e0       	ldi	r25, 0x08	; 8
    18ca:	5b e0       	ldi	r21, 0x0B	; 11
    18cc:	ea cf       	rjmp	.-44     	; 0x18a2 <create_name+0x2a>
    18ce:	6f e9       	ldi	r22, 0x9F	; 159
    18d0:	68 0f       	add	r22, r24
    18d2:	6a 31       	cpi	r22, 0x1A	; 26
    18d4:	08 f4       	brcc	.+2      	; 0x18d8 <create_name+0x60>
    18d6:	80 52       	subi	r24, 0x20	; 32
    18d8:	f8 01       	movw	r30, r16
    18da:	e9 0f       	add	r30, r25
    18dc:	f1 1d       	adc	r31, r1
    18de:	80 83       	st	Z, r24
    18e0:	9f 5f       	subi	r25, 0xFF	; 255
    18e2:	df cf       	rjmp	.-66     	; 0x18a2 <create_name+0x2a>
    18e4:	24 0f       	add	r18, r20
    18e6:	31 1d       	adc	r19, r1
    18e8:	39 83       	std	Y+1, r19	; 0x01
    18ea:	28 83       	st	Y, r18
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	81 32       	cpi	r24, 0x21	; 33
    18f0:	08 f0       	brcs	.+2      	; 0x18f4 <create_name+0x7c>
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	f8 01       	movw	r30, r16
    18f6:	93 87       	std	Z+11, r25	; 0x0b
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	08 95       	ret

00001904 <check_fs>:
    1904:	cf 92       	push	r12
    1906:	df 92       	push	r13
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	ec 01       	movw	r28, r24
    1916:	6a 01       	movw	r12, r20
    1918:	7b 01       	movw	r14, r22
    191a:	02 e0       	ldi	r16, 0x02	; 2
    191c:	10 e0       	ldi	r17, 0x00	; 0
    191e:	2e ef       	ldi	r18, 0xFE	; 254
    1920:	31 e0       	ldi	r19, 0x01	; 1
    1922:	0e 94 1c 07 	call	0xe38	; 0xe38 <disk_readp>
    1926:	81 11       	cpse	r24, r1
    1928:	25 c0       	rjmp	.+74     	; 0x1974 <check_fs+0x70>
    192a:	88 81       	ld	r24, Y
    192c:	99 81       	ldd	r25, Y+1	; 0x01
    192e:	85 35       	cpi	r24, 0x55	; 85
    1930:	9a 4a       	sbci	r25, 0xAA	; 170
    1932:	11 f5       	brne	.+68     	; 0x1978 <check_fs+0x74>
    1934:	26 e3       	ldi	r18, 0x36	; 54
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	b7 01       	movw	r22, r14
    193a:	a6 01       	movw	r20, r12
    193c:	ce 01       	movw	r24, r28
    193e:	0e 94 1c 07 	call	0xe38	; 0xe38 <disk_readp>
    1942:	81 11       	cpse	r24, r1
    1944:	05 c0       	rjmp	.+10     	; 0x1950 <check_fs+0x4c>
    1946:	88 81       	ld	r24, Y
    1948:	99 81       	ldd	r25, Y+1	; 0x01
    194a:	86 34       	cpi	r24, 0x46	; 70
    194c:	91 44       	sbci	r25, 0x41	; 65
    194e:	b1 f0       	breq	.+44     	; 0x197c <check_fs+0x78>
    1950:	02 e0       	ldi	r16, 0x02	; 2
    1952:	10 e0       	ldi	r17, 0x00	; 0
    1954:	22 e5       	ldi	r18, 0x52	; 82
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	b7 01       	movw	r22, r14
    195a:	a6 01       	movw	r20, r12
    195c:	ce 01       	movw	r24, r28
    195e:	0e 94 1c 07 	call	0xe38	; 0xe38 <disk_readp>
    1962:	81 11       	cpse	r24, r1
    1964:	0d c0       	rjmp	.+26     	; 0x1980 <check_fs+0x7c>
    1966:	88 81       	ld	r24, Y
    1968:	99 81       	ldd	r25, Y+1	; 0x01
    196a:	86 34       	cpi	r24, 0x46	; 70
    196c:	91 44       	sbci	r25, 0x41	; 65
    196e:	51 f0       	breq	.+20     	; 0x1984 <check_fs+0x80>
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <check_fs+0x82>
    1974:	83 e0       	ldi	r24, 0x03	; 3
    1976:	07 c0       	rjmp	.+14     	; 0x1986 <check_fs+0x82>
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <check_fs+0x82>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	03 c0       	rjmp	.+6      	; 0x1986 <check_fs+0x82>
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <check_fs+0x82>
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	ff 90       	pop	r15
    1990:	ef 90       	pop	r14
    1992:	df 90       	pop	r13
    1994:	cf 90       	pop	r12
    1996:	08 95       	ret

00001998 <get_fat>:
    1998:	4f 92       	push	r4
    199a:	5f 92       	push	r5
    199c:	6f 92       	push	r6
    199e:	7f 92       	push	r7
    19a0:	8f 92       	push	r8
    19a2:	9f 92       	push	r9
    19a4:	af 92       	push	r10
    19a6:	bf 92       	push	r11
    19a8:	cf 92       	push	r12
    19aa:	df 92       	push	r13
    19ac:	ef 92       	push	r14
    19ae:	ff 92       	push	r15
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <get_fat+0x22>
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <get_fat+0x24>
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	e0 90 f1 05 	lds	r14, 0x05F1	; 0x8005f1 <FatFs>
    19c4:	f0 90 f2 05 	lds	r15, 0x05F2	; 0x8005f2 <FatFs+0x1>
    19c8:	62 30       	cpi	r22, 0x02	; 2
    19ca:	71 05       	cpc	r23, r1
    19cc:	81 05       	cpc	r24, r1
    19ce:	91 05       	cpc	r25, r1
    19d0:	08 f4       	brcc	.+2      	; 0x19d4 <get_fat+0x3c>
    19d2:	bf c0       	rjmp	.+382    	; 0x1b52 <get_fat+0x1ba>
    19d4:	f7 01       	movw	r30, r14
    19d6:	80 84       	ldd	r8, Z+8	; 0x08
    19d8:	91 84       	ldd	r9, Z+9	; 0x09
    19da:	a2 84       	ldd	r10, Z+10	; 0x0a
    19dc:	b3 84       	ldd	r11, Z+11	; 0x0b
    19de:	68 15       	cp	r22, r8
    19e0:	79 05       	cpc	r23, r9
    19e2:	8a 05       	cpc	r24, r10
    19e4:	9b 05       	cpc	r25, r11
    19e6:	08 f0       	brcs	.+2      	; 0x19ea <get_fat+0x52>
    19e8:	b9 c0       	rjmp	.+370    	; 0x1b5c <get_fat+0x1c4>
    19ea:	4b 01       	movw	r8, r22
    19ec:	5c 01       	movw	r10, r24
    19ee:	80 81       	ld	r24, Z
    19f0:	82 30       	cpi	r24, 0x02	; 2
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <get_fat+0x5e>
    19f4:	62 c0       	rjmp	.+196    	; 0x1aba <get_fat+0x122>
    19f6:	83 30       	cpi	r24, 0x03	; 3
    19f8:	09 f4       	brne	.+2      	; 0x19fc <get_fat+0x64>
    19fa:	7f c0       	rjmp	.+254    	; 0x1afa <get_fat+0x162>
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <get_fat+0x6a>
    1a00:	b2 c0       	rjmp	.+356    	; 0x1b66 <get_fat+0x1ce>
    1a02:	c4 01       	movw	r24, r8
    1a04:	96 95       	lsr	r25
    1a06:	87 95       	ror	r24
    1a08:	88 0d       	add	r24, r8
    1a0a:	99 1d       	adc	r25, r9
    1a0c:	9c 01       	movw	r18, r24
    1a0e:	31 70       	andi	r19, 0x01	; 1
    1a10:	89 2f       	mov	r24, r25
    1a12:	99 27       	eor	r25, r25
    1a14:	86 95       	lsr	r24
    1a16:	2f 3f       	cpi	r18, 0xFF	; 255
    1a18:	f1 e0       	ldi	r31, 0x01	; 1
    1a1a:	3f 07       	cpc	r19, r31
    1a1c:	91 f0       	breq	.+36     	; 0x1a42 <get_fat+0xaa>
    1a1e:	f7 01       	movw	r30, r14
    1a20:	44 85       	ldd	r20, Z+12	; 0x0c
    1a22:	55 85       	ldd	r21, Z+13	; 0x0d
    1a24:	66 85       	ldd	r22, Z+14	; 0x0e
    1a26:	77 85       	ldd	r23, Z+15	; 0x0f
    1a28:	48 0f       	add	r20, r24
    1a2a:	59 1f       	adc	r21, r25
    1a2c:	61 1d       	adc	r22, r1
    1a2e:	71 1d       	adc	r23, r1
    1a30:	02 e0       	ldi	r16, 0x02	; 2
    1a32:	10 e0       	ldi	r17, 0x00	; 0
    1a34:	ce 01       	movw	r24, r28
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	0e 94 1c 07 	call	0xe38	; 0xe38 <disk_readp>
    1a3c:	88 23       	and	r24, r24
    1a3e:	61 f1       	breq	.+88     	; 0x1a98 <get_fat+0x100>
    1a40:	97 c0       	rjmp	.+302    	; 0x1b70 <get_fat+0x1d8>
    1a42:	f7 01       	movw	r30, r14
    1a44:	44 85       	ldd	r20, Z+12	; 0x0c
    1a46:	55 85       	ldd	r21, Z+13	; 0x0d
    1a48:	66 85       	ldd	r22, Z+14	; 0x0e
    1a4a:	77 85       	ldd	r23, Z+15	; 0x0f
    1a4c:	2c 01       	movw	r4, r24
    1a4e:	61 2c       	mov	r6, r1
    1a50:	71 2c       	mov	r7, r1
    1a52:	44 0d       	add	r20, r4
    1a54:	55 1d       	adc	r21, r5
    1a56:	66 1d       	adc	r22, r6
    1a58:	77 1d       	adc	r23, r7
    1a5a:	01 e0       	ldi	r16, 0x01	; 1
    1a5c:	10 e0       	ldi	r17, 0x00	; 0
    1a5e:	2f ef       	ldi	r18, 0xFF	; 255
    1a60:	31 e0       	ldi	r19, 0x01	; 1
    1a62:	ce 01       	movw	r24, r28
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	0e 94 1c 07 	call	0xe38	; 0xe38 <disk_readp>
    1a6a:	81 11       	cpse	r24, r1
    1a6c:	86 c0       	rjmp	.+268    	; 0x1b7a <get_fat+0x1e2>
    1a6e:	f7 01       	movw	r30, r14
    1a70:	44 85       	ldd	r20, Z+12	; 0x0c
    1a72:	55 85       	ldd	r21, Z+13	; 0x0d
    1a74:	66 85       	ldd	r22, Z+14	; 0x0e
    1a76:	77 85       	ldd	r23, Z+15	; 0x0f
    1a78:	44 0d       	add	r20, r4
    1a7a:	55 1d       	adc	r21, r5
    1a7c:	66 1d       	adc	r22, r6
    1a7e:	77 1d       	adc	r23, r7
    1a80:	4f 5f       	subi	r20, 0xFF	; 255
    1a82:	5f 4f       	sbci	r21, 0xFF	; 255
    1a84:	6f 4f       	sbci	r22, 0xFF	; 255
    1a86:	7f 4f       	sbci	r23, 0xFF	; 255
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	02 96       	adiw	r24, 0x02	; 2
    1a90:	0e 94 1c 07 	call	0xe38	; 0xe38 <disk_readp>
    1a94:	81 11       	cpse	r24, r1
    1a96:	76 c0       	rjmp	.+236    	; 0x1b84 <get_fat+0x1ec>
    1a98:	69 81       	ldd	r22, Y+1	; 0x01
    1a9a:	7a 81       	ldd	r23, Y+2	; 0x02
    1a9c:	80 fe       	sbrs	r8, 0
    1a9e:	09 c0       	rjmp	.+18     	; 0x1ab2 <get_fat+0x11a>
    1aa0:	72 95       	swap	r23
    1aa2:	62 95       	swap	r22
    1aa4:	6f 70       	andi	r22, 0x0F	; 15
    1aa6:	67 27       	eor	r22, r23
    1aa8:	7f 70       	andi	r23, 0x0F	; 15
    1aaa:	67 27       	eor	r22, r23
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	77 c0       	rjmp	.+238    	; 0x1ba0 <get_fat+0x208>
    1ab2:	7f 70       	andi	r23, 0x0F	; 15
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	73 c0       	rjmp	.+230    	; 0x1ba0 <get_fat+0x208>
    1aba:	94 01       	movw	r18, r8
    1abc:	33 27       	eor	r19, r19
    1abe:	22 0f       	add	r18, r18
    1ac0:	33 1f       	adc	r19, r19
    1ac2:	f7 01       	movw	r30, r14
    1ac4:	c4 84       	ldd	r12, Z+12	; 0x0c
    1ac6:	d5 84       	ldd	r13, Z+13	; 0x0d
    1ac8:	e6 84       	ldd	r14, Z+14	; 0x0e
    1aca:	f7 84       	ldd	r15, Z+15	; 0x0f
    1acc:	bb 27       	eor	r27, r27
    1ace:	ab 2d       	mov	r26, r11
    1ad0:	9a 2d       	mov	r25, r10
    1ad2:	89 2d       	mov	r24, r9
    1ad4:	b7 01       	movw	r22, r14
    1ad6:	a6 01       	movw	r20, r12
    1ad8:	48 0f       	add	r20, r24
    1ada:	59 1f       	adc	r21, r25
    1adc:	6a 1f       	adc	r22, r26
    1ade:	7b 1f       	adc	r23, r27
    1ae0:	02 e0       	ldi	r16, 0x02	; 2
    1ae2:	10 e0       	ldi	r17, 0x00	; 0
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	0e 94 1c 07 	call	0xe38	; 0xe38 <disk_readp>
    1aec:	81 11       	cpse	r24, r1
    1aee:	4f c0       	rjmp	.+158    	; 0x1b8e <get_fat+0x1f6>
    1af0:	69 81       	ldd	r22, Y+1	; 0x01
    1af2:	7a 81       	ldd	r23, Y+2	; 0x02
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	53 c0       	rjmp	.+166    	; 0x1ba0 <get_fat+0x208>
    1afa:	94 01       	movw	r18, r8
    1afc:	2f 77       	andi	r18, 0x7F	; 127
    1afe:	33 27       	eor	r19, r19
    1b00:	22 0f       	add	r18, r18
    1b02:	33 1f       	adc	r19, r19
    1b04:	22 0f       	add	r18, r18
    1b06:	33 1f       	adc	r19, r19
    1b08:	f7 01       	movw	r30, r14
    1b0a:	c4 84       	ldd	r12, Z+12	; 0x0c
    1b0c:	d5 84       	ldd	r13, Z+13	; 0x0d
    1b0e:	e6 84       	ldd	r14, Z+14	; 0x0e
    1b10:	f7 84       	ldd	r15, Z+15	; 0x0f
    1b12:	d5 01       	movw	r26, r10
    1b14:	c4 01       	movw	r24, r8
    1b16:	68 94       	set
    1b18:	16 f8       	bld	r1, 6
    1b1a:	b6 95       	lsr	r27
    1b1c:	a7 95       	ror	r26
    1b1e:	97 95       	ror	r25
    1b20:	87 95       	ror	r24
    1b22:	16 94       	lsr	r1
    1b24:	d1 f7       	brne	.-12     	; 0x1b1a <get_fat+0x182>
    1b26:	b7 01       	movw	r22, r14
    1b28:	a6 01       	movw	r20, r12
    1b2a:	48 0f       	add	r20, r24
    1b2c:	59 1f       	adc	r21, r25
    1b2e:	6a 1f       	adc	r22, r26
    1b30:	7b 1f       	adc	r23, r27
    1b32:	04 e0       	ldi	r16, 0x04	; 4
    1b34:	10 e0       	ldi	r17, 0x00	; 0
    1b36:	ce 01       	movw	r24, r28
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	0e 94 1c 07 	call	0xe38	; 0xe38 <disk_readp>
    1b3e:	81 11       	cpse	r24, r1
    1b40:	2b c0       	rjmp	.+86     	; 0x1b98 <get_fat+0x200>
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	ab 81       	ldd	r26, Y+3	; 0x03
    1b48:	bc 81       	ldd	r27, Y+4	; 0x04
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	9f 70       	andi	r25, 0x0F	; 15
    1b50:	27 c0       	rjmp	.+78     	; 0x1ba0 <get_fat+0x208>
    1b52:	61 e0       	ldi	r22, 0x01	; 1
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	22 c0       	rjmp	.+68     	; 0x1ba0 <get_fat+0x208>
    1b5c:	61 e0       	ldi	r22, 0x01	; 1
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	1d c0       	rjmp	.+58     	; 0x1ba0 <get_fat+0x208>
    1b66:	61 e0       	ldi	r22, 0x01	; 1
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	18 c0       	rjmp	.+48     	; 0x1ba0 <get_fat+0x208>
    1b70:	61 e0       	ldi	r22, 0x01	; 1
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	13 c0       	rjmp	.+38     	; 0x1ba0 <get_fat+0x208>
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	0e c0       	rjmp	.+28     	; 0x1ba0 <get_fat+0x208>
    1b84:	61 e0       	ldi	r22, 0x01	; 1
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	09 c0       	rjmp	.+18     	; 0x1ba0 <get_fat+0x208>
    1b8e:	61 e0       	ldi	r22, 0x01	; 1
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <get_fat+0x208>
    1b98:	61 e0       	ldi	r22, 0x01	; 1
    1b9a:	70 e0       	ldi	r23, 0x00	; 0
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	ff 90       	pop	r15
    1bb2:	ef 90       	pop	r14
    1bb4:	df 90       	pop	r13
    1bb6:	cf 90       	pop	r12
    1bb8:	bf 90       	pop	r11
    1bba:	af 90       	pop	r10
    1bbc:	9f 90       	pop	r9
    1bbe:	8f 90       	pop	r8
    1bc0:	7f 90       	pop	r7
    1bc2:	6f 90       	pop	r6
    1bc4:	5f 90       	pop	r5
    1bc6:	4f 90       	pop	r4
    1bc8:	08 95       	ret

00001bca <dir_next>:
    1bca:	cf 92       	push	r12
    1bcc:	df 92       	push	r13
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	e0 90 f1 05 	lds	r14, 0x05F1	; 0x8005f1 <FatFs>
    1bde:	f0 90 f2 05 	lds	r15, 0x05F2	; 0x8005f2 <FatFs+0x1>
    1be2:	fc 01       	movw	r30, r24
    1be4:	c0 81       	ld	r28, Z
    1be6:	d1 81       	ldd	r29, Z+1	; 0x01
    1be8:	21 96       	adiw	r28, 0x01	; 1
    1bea:	09 f4       	brne	.+2      	; 0x1bee <dir_next+0x24>
    1bec:	5c c0       	rjmp	.+184    	; 0x1ca6 <dir_next+0xdc>
    1bee:	44 85       	ldd	r20, Z+12	; 0x0c
    1bf0:	55 85       	ldd	r21, Z+13	; 0x0d
    1bf2:	66 85       	ldd	r22, Z+14	; 0x0e
    1bf4:	77 85       	ldd	r23, Z+15	; 0x0f
    1bf6:	41 15       	cp	r20, r1
    1bf8:	51 05       	cpc	r21, r1
    1bfa:	61 05       	cpc	r22, r1
    1bfc:	71 05       	cpc	r23, r1
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <dir_next+0x38>
    1c00:	54 c0       	rjmp	.+168    	; 0x1caa <dir_next+0xe0>
    1c02:	8c 01       	movw	r16, r24
    1c04:	ce 01       	movw	r24, r28
    1c06:	8f 70       	andi	r24, 0x0F	; 15
    1c08:	99 27       	eor	r25, r25
    1c0a:	89 2b       	or	r24, r25
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <dir_next+0x46>
    1c0e:	46 c0       	rjmp	.+140    	; 0x1c9c <dir_next+0xd2>
    1c10:	4f 5f       	subi	r20, 0xFF	; 255
    1c12:	5f 4f       	sbci	r21, 0xFF	; 255
    1c14:	6f 4f       	sbci	r22, 0xFF	; 255
    1c16:	7f 4f       	sbci	r23, 0xFF	; 255
    1c18:	44 87       	std	Z+12, r20	; 0x0c
    1c1a:	55 87       	std	Z+13, r21	; 0x0d
    1c1c:	66 87       	std	Z+14, r22	; 0x0e
    1c1e:	77 87       	std	Z+15, r23	; 0x0f
    1c20:	40 85       	ldd	r20, Z+8	; 0x08
    1c22:	51 85       	ldd	r21, Z+9	; 0x09
    1c24:	62 85       	ldd	r22, Z+10	; 0x0a
    1c26:	73 85       	ldd	r23, Z+11	; 0x0b
    1c28:	41 15       	cp	r20, r1
    1c2a:	51 05       	cpc	r21, r1
    1c2c:	61 05       	cpc	r22, r1
    1c2e:	71 05       	cpc	r23, r1
    1c30:	39 f4       	brne	.+14     	; 0x1c40 <dir_next+0x76>
    1c32:	f7 01       	movw	r30, r14
    1c34:	84 81       	ldd	r24, Z+4	; 0x04
    1c36:	95 81       	ldd	r25, Z+5	; 0x05
    1c38:	c8 17       	cp	r28, r24
    1c3a:	d9 07       	cpc	r29, r25
    1c3c:	c0 f5       	brcc	.+112    	; 0x1cae <dir_next+0xe4>
    1c3e:	2e c0       	rjmp	.+92     	; 0x1c9c <dir_next+0xd2>
    1c40:	f7 01       	movw	r30, r14
    1c42:	81 81       	ldd	r24, Z+1	; 0x01
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	9e 01       	movw	r18, r28
    1c4a:	32 95       	swap	r19
    1c4c:	22 95       	swap	r18
    1c4e:	2f 70       	andi	r18, 0x0F	; 15
    1c50:	23 27       	eor	r18, r19
    1c52:	3f 70       	andi	r19, 0x0F	; 15
    1c54:	23 27       	eor	r18, r19
    1c56:	82 23       	and	r24, r18
    1c58:	93 23       	and	r25, r19
    1c5a:	89 2b       	or	r24, r25
    1c5c:	f9 f4       	brne	.+62     	; 0x1c9c <dir_next+0xd2>
    1c5e:	cb 01       	movw	r24, r22
    1c60:	ba 01       	movw	r22, r20
    1c62:	0e 94 cc 0c 	call	0x1998	; 0x1998 <get_fat>
    1c66:	62 30       	cpi	r22, 0x02	; 2
    1c68:	71 05       	cpc	r23, r1
    1c6a:	81 05       	cpc	r24, r1
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	08 f1       	brcs	.+66     	; 0x1cb2 <dir_next+0xe8>
    1c70:	f7 01       	movw	r30, r14
    1c72:	c0 84       	ldd	r12, Z+8	; 0x08
    1c74:	d1 84       	ldd	r13, Z+9	; 0x09
    1c76:	e2 84       	ldd	r14, Z+10	; 0x0a
    1c78:	f3 84       	ldd	r15, Z+11	; 0x0b
    1c7a:	6c 15       	cp	r22, r12
    1c7c:	7d 05       	cpc	r23, r13
    1c7e:	8e 05       	cpc	r24, r14
    1c80:	9f 05       	cpc	r25, r15
    1c82:	c8 f4       	brcc	.+50     	; 0x1cb6 <dir_next+0xec>
    1c84:	f8 01       	movw	r30, r16
    1c86:	60 87       	std	Z+8, r22	; 0x08
    1c88:	71 87       	std	Z+9, r23	; 0x09
    1c8a:	82 87       	std	Z+10, r24	; 0x0a
    1c8c:	93 87       	std	Z+11, r25	; 0x0b
    1c8e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <clust2sect>
    1c92:	f8 01       	movw	r30, r16
    1c94:	64 87       	std	Z+12, r22	; 0x0c
    1c96:	75 87       	std	Z+13, r23	; 0x0d
    1c98:	86 87       	std	Z+14, r24	; 0x0e
    1c9a:	97 87       	std	Z+15, r25	; 0x0f
    1c9c:	f8 01       	movw	r30, r16
    1c9e:	d1 83       	std	Z+1, r29	; 0x01
    1ca0:	c0 83       	st	Z, r28
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	09 c0       	rjmp	.+18     	; 0x1cb8 <dir_next+0xee>
    1ca6:	83 e0       	ldi	r24, 0x03	; 3
    1ca8:	07 c0       	rjmp	.+14     	; 0x1cb8 <dir_next+0xee>
    1caa:	83 e0       	ldi	r24, 0x03	; 3
    1cac:	05 c0       	rjmp	.+10     	; 0x1cb8 <dir_next+0xee>
    1cae:	83 e0       	ldi	r24, 0x03	; 3
    1cb0:	03 c0       	rjmp	.+6      	; 0x1cb8 <dir_next+0xee>
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	01 c0       	rjmp	.+2      	; 0x1cb8 <dir_next+0xee>
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	ff 90       	pop	r15
    1cc2:	ef 90       	pop	r14
    1cc4:	df 90       	pop	r13
    1cc6:	cf 90       	pop	r12
    1cc8:	08 95       	ret

00001cca <dir_find>:
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	7c 01       	movw	r14, r24
    1cda:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <dir_rewind>
    1cde:	81 11       	cpse	r24, r1
    1ce0:	3e c0       	rjmp	.+124    	; 0x1d5e <dir_find+0x94>
    1ce2:	e0 91 f1 05 	lds	r30, 0x05F1	; 0x8005f1 <FatFs>
    1ce6:	f0 91 f2 05 	lds	r31, 0x05F2	; 0x8005f2 <FatFs+0x1>
    1cea:	c6 81       	ldd	r28, Z+6	; 0x06
    1cec:	d7 81       	ldd	r29, Z+7	; 0x07
    1cee:	f7 01       	movw	r30, r14
    1cf0:	20 81       	ld	r18, Z
    1cf2:	31 81       	ldd	r19, Z+1	; 0x01
    1cf4:	2f 70       	andi	r18, 0x0F	; 15
    1cf6:	33 27       	eor	r19, r19
    1cf8:	22 0f       	add	r18, r18
    1cfa:	33 1f       	adc	r19, r19
    1cfc:	22 95       	swap	r18
    1cfe:	32 95       	swap	r19
    1d00:	30 7f       	andi	r19, 0xF0	; 240
    1d02:	32 27       	eor	r19, r18
    1d04:	20 7f       	andi	r18, 0xF0	; 240
    1d06:	32 27       	eor	r19, r18
    1d08:	44 85       	ldd	r20, Z+12	; 0x0c
    1d0a:	55 85       	ldd	r21, Z+13	; 0x0d
    1d0c:	66 85       	ldd	r22, Z+14	; 0x0e
    1d0e:	77 85       	ldd	r23, Z+15	; 0x0f
    1d10:	00 e2       	ldi	r16, 0x20	; 32
    1d12:	10 e0       	ldi	r17, 0x00	; 0
    1d14:	ce 01       	movw	r24, r28
    1d16:	0e 94 1c 07 	call	0xe38	; 0xe38 <disk_readp>
    1d1a:	91 e0       	ldi	r25, 0x01	; 1
    1d1c:	81 11       	cpse	r24, r1
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <dir_find+0x58>
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	d9 2e       	mov	r13, r25
    1d24:	91 11       	cpse	r25, r1
    1d26:	16 c0       	rjmp	.+44     	; 0x1d54 <dir_find+0x8a>
    1d28:	88 81       	ld	r24, Y
    1d2a:	88 23       	and	r24, r24
    1d2c:	a9 f0       	breq	.+42     	; 0x1d58 <dir_find+0x8e>
    1d2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d30:	83 fd       	sbrc	r24, 3
    1d32:	0a c0       	rjmp	.+20     	; 0x1d48 <dir_find+0x7e>
    1d34:	f7 01       	movw	r30, r14
    1d36:	62 81       	ldd	r22, Z+2	; 0x02
    1d38:	73 81       	ldd	r23, Z+3	; 0x03
    1d3a:	4b e0       	ldi	r20, 0x0B	; 11
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	ce 01       	movw	r24, r28
    1d40:	0e 94 a6 0b 	call	0x174c	; 0x174c <mem_cmp>
    1d44:	89 2b       	or	r24, r25
    1d46:	51 f0       	breq	.+20     	; 0x1d5c <dir_find+0x92>
    1d48:	c7 01       	movw	r24, r14
    1d4a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <dir_next>
    1d4e:	88 23       	and	r24, r24
    1d50:	71 f2       	breq	.-100    	; 0x1cee <dir_find+0x24>
    1d52:	05 c0       	rjmp	.+10     	; 0x1d5e <dir_find+0x94>
    1d54:	89 2f       	mov	r24, r25
    1d56:	03 c0       	rjmp	.+6      	; 0x1d5e <dir_find+0x94>
    1d58:	83 e0       	ldi	r24, 0x03	; 3
    1d5a:	01 c0       	rjmp	.+2      	; 0x1d5e <dir_find+0x94>
    1d5c:	8d 2d       	mov	r24, r13
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	ff 90       	pop	r15
    1d68:	ef 90       	pop	r14
    1d6a:	df 90       	pop	r13
    1d6c:	08 95       	ret

00001d6e <follow_path>:
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <follow_path+0xa>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	8c 01       	movw	r16, r24
    1d7e:	7a 83       	std	Y+2, r23	; 0x02
    1d80:	69 83       	std	Y+1, r22	; 0x01
    1d82:	03 c0       	rjmp	.+6      	; 0x1d8a <follow_path+0x1c>
    1d84:	31 96       	adiw	r30, 0x01	; 1
    1d86:	fa 83       	std	Y+2, r31	; 0x02
    1d88:	e9 83       	std	Y+1, r30	; 0x01
    1d8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 32       	cpi	r24, 0x20	; 32
    1d92:	c1 f3       	breq	.-16     	; 0x1d84 <follow_path+0x16>
    1d94:	8f 32       	cpi	r24, 0x2F	; 47
    1d96:	19 f4       	brne	.+6      	; 0x1d9e <follow_path+0x30>
    1d98:	31 96       	adiw	r30, 0x01	; 1
    1d9a:	fa 83       	std	Y+2, r31	; 0x02
    1d9c:	e9 83       	std	Y+1, r30	; 0x01
    1d9e:	d8 01       	movw	r26, r16
    1da0:	14 96       	adiw	r26, 0x04	; 4
    1da2:	1d 92       	st	X+, r1
    1da4:	1d 92       	st	X+, r1
    1da6:	1d 92       	st	X+, r1
    1da8:	1c 92       	st	X, r1
    1daa:	17 97       	sbiw	r26, 0x07	; 7
    1dac:	e9 81       	ldd	r30, Y+1	; 0x01
    1dae:	fa 81       	ldd	r31, Y+2	; 0x02
    1db0:	80 81       	ld	r24, Z
    1db2:	81 32       	cpi	r24, 0x21	; 33
    1db4:	60 f4       	brcc	.+24     	; 0x1dce <follow_path+0x60>
    1db6:	c8 01       	movw	r24, r16
    1db8:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <dir_rewind>
    1dbc:	e0 91 f1 05 	lds	r30, 0x05F1	; 0x8005f1 <FatFs>
    1dc0:	f0 91 f2 05 	lds	r31, 0x05F2	; 0x8005f2 <FatFs+0x1>
    1dc4:	06 80       	ldd	r0, Z+6	; 0x06
    1dc6:	f7 81       	ldd	r31, Z+7	; 0x07
    1dc8:	e0 2d       	mov	r30, r0
    1dca:	10 82       	st	Z, r1
    1dcc:	42 c0       	rjmp	.+132    	; 0x1e52 <follow_path+0xe4>
    1dce:	be 01       	movw	r22, r28
    1dd0:	6f 5f       	subi	r22, 0xFF	; 255
    1dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd4:	c8 01       	movw	r24, r16
    1dd6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <create_name>
    1dda:	81 11       	cpse	r24, r1
    1ddc:	3a c0       	rjmp	.+116    	; 0x1e52 <follow_path+0xe4>
    1dde:	c8 01       	movw	r24, r16
    1de0:	0e 94 65 0e 	call	0x1cca	; 0x1cca <dir_find>
    1de4:	88 23       	and	r24, r24
    1de6:	59 f0       	breq	.+22     	; 0x1dfe <follow_path+0x90>
    1de8:	83 30       	cpi	r24, 0x03	; 3
    1dea:	99 f5       	brne	.+102    	; 0x1e52 <follow_path+0xe4>
    1dec:	d8 01       	movw	r26, r16
    1dee:	12 96       	adiw	r26, 0x02	; 2
    1df0:	ed 91       	ld	r30, X+
    1df2:	fc 91       	ld	r31, X
    1df4:	13 97       	sbiw	r26, 0x03	; 3
    1df6:	93 85       	ldd	r25, Z+11	; 0x0b
    1df8:	99 23       	and	r25, r25
    1dfa:	41 f1       	breq	.+80     	; 0x1e4c <follow_path+0xde>
    1dfc:	2a c0       	rjmp	.+84     	; 0x1e52 <follow_path+0xe4>
    1dfe:	d8 01       	movw	r26, r16
    1e00:	12 96       	adiw	r26, 0x02	; 2
    1e02:	ed 91       	ld	r30, X+
    1e04:	fc 91       	ld	r31, X
    1e06:	13 97       	sbiw	r26, 0x03	; 3
    1e08:	93 85       	ldd	r25, Z+11	; 0x0b
    1e0a:	91 11       	cpse	r25, r1
    1e0c:	22 c0       	rjmp	.+68     	; 0x1e52 <follow_path+0xe4>
    1e0e:	e0 91 f1 05 	lds	r30, 0x05F1	; 0x8005f1 <FatFs>
    1e12:	f0 91 f2 05 	lds	r31, 0x05F2	; 0x8005f2 <FatFs+0x1>
    1e16:	06 80       	ldd	r0, Z+6	; 0x06
    1e18:	f7 81       	ldd	r31, Z+7	; 0x07
    1e1a:	e0 2d       	mov	r30, r0
    1e1c:	83 85       	ldd	r24, Z+11	; 0x0b
    1e1e:	84 ff       	sbrs	r24, 4
    1e20:	17 c0       	rjmp	.+46     	; 0x1e50 <follow_path+0xe2>
    1e22:	84 89       	ldd	r24, Z+20	; 0x14
    1e24:	95 89       	ldd	r25, Z+21	; 0x15
    1e26:	a0 e0       	ldi	r26, 0x00	; 0
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	55 27       	eor	r21, r21
    1e2e:	44 27       	eor	r20, r20
    1e30:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e32:	93 8d       	ldd	r25, Z+27	; 0x1b
    1e34:	a0 e0       	ldi	r26, 0x00	; 0
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	84 2b       	or	r24, r20
    1e3a:	95 2b       	or	r25, r21
    1e3c:	a6 2b       	or	r26, r22
    1e3e:	b7 2b       	or	r27, r23
    1e40:	f8 01       	movw	r30, r16
    1e42:	84 83       	std	Z+4, r24	; 0x04
    1e44:	95 83       	std	Z+5, r25	; 0x05
    1e46:	a6 83       	std	Z+6, r26	; 0x06
    1e48:	b7 83       	std	Z+7, r27	; 0x07
    1e4a:	c1 cf       	rjmp	.-126    	; 0x1dce <follow_path+0x60>
    1e4c:	84 e0       	ldi	r24, 0x04	; 4
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <follow_path+0xe4>
    1e50:	84 e0       	ldi	r24, 0x04	; 4
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	08 95       	ret

00001e60 <pf_mount>:
    1e60:	4f 92       	push	r4
    1e62:	5f 92       	push	r5
    1e64:	6f 92       	push	r6
    1e66:	7f 92       	push	r7
    1e68:	8f 92       	push	r8
    1e6a:	9f 92       	push	r9
    1e6c:	af 92       	push	r10
    1e6e:	bf 92       	push	r11
    1e70:	df 92       	push	r13
    1e72:	ef 92       	push	r14
    1e74:	ff 92       	push	r15
    1e76:	0f 93       	push	r16
    1e78:	1f 93       	push	r17
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	a8 97       	sbiw	r28, 0x28	; 40
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
    1e8e:	10 92 f2 05 	sts	0x05F2, r1	; 0x8005f2 <FatFs+0x1>
    1e92:	10 92 f1 05 	sts	0x05F1, r1	; 0x8005f1 <FatFs>
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <pf_mount+0x3c>
    1e9a:	fb c0       	rjmp	.+502    	; 0x2092 <pf_mount+0x232>
    1e9c:	7c 01       	movw	r14, r24
    1e9e:	0e 94 f5 07 	call	0xfea	; 0xfea <disk_initialize>
    1ea2:	80 fd       	sbrc	r24, 0
    1ea4:	f8 c0       	rjmp	.+496    	; 0x2096 <pf_mount+0x236>
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	50 e0       	ldi	r21, 0x00	; 0
    1eaa:	ba 01       	movw	r22, r20
    1eac:	ce 01       	movw	r24, r28
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	0e 94 82 0c 	call	0x1904	; 0x1904 <check_fs>
    1eb4:	d8 2e       	mov	r13, r24
    1eb6:	41 e0       	ldi	r20, 0x01	; 1
    1eb8:	84 13       	cpse	r24, r20
    1eba:	1c c0       	rjmp	.+56     	; 0x1ef4 <pf_mount+0x94>
    1ebc:	00 e1       	ldi	r16, 0x10	; 16
    1ebe:	10 e0       	ldi	r17, 0x00	; 0
    1ec0:	2e eb       	ldi	r18, 0xBE	; 190
    1ec2:	31 e0       	ldi	r19, 0x01	; 1
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	ba 01       	movw	r22, r20
    1eca:	ce 01       	movw	r24, r28
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	0e 94 1c 07 	call	0xe38	; 0xe38 <disk_readp>
    1ed2:	81 11       	cpse	r24, r1
    1ed4:	13 c0       	rjmp	.+38     	; 0x1efc <pf_mount+0x9c>
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	88 23       	and	r24, r24
    1eda:	c1 f0       	breq	.+48     	; 0x1f0c <pf_mount+0xac>
    1edc:	89 84       	ldd	r8, Y+9	; 0x09
    1ede:	9a 84       	ldd	r9, Y+10	; 0x0a
    1ee0:	ab 84       	ldd	r10, Y+11	; 0x0b
    1ee2:	bc 84       	ldd	r11, Y+12	; 0x0c
    1ee4:	b5 01       	movw	r22, r10
    1ee6:	a4 01       	movw	r20, r8
    1ee8:	ce 01       	movw	r24, r28
    1eea:	01 96       	adiw	r24, 0x01	; 1
    1eec:	0e 94 82 0c 	call	0x1904	; 0x1904 <check_fs>
    1ef0:	d8 2e       	mov	r13, r24
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <pf_mount+0xb2>
    1ef4:	81 2c       	mov	r8, r1
    1ef6:	91 2c       	mov	r9, r1
    1ef8:	54 01       	movw	r10, r8
    1efa:	0b c0       	rjmp	.+22     	; 0x1f12 <pf_mount+0xb2>
    1efc:	81 2c       	mov	r8, r1
    1efe:	91 2c       	mov	r9, r1
    1f00:	54 01       	movw	r10, r8
    1f02:	0f 2e       	mov	r0, r31
    1f04:	f3 e0       	ldi	r31, 0x03	; 3
    1f06:	df 2e       	mov	r13, r31
    1f08:	f0 2d       	mov	r31, r0
    1f0a:	03 c0       	rjmp	.+6      	; 0x1f12 <pf_mount+0xb2>
    1f0c:	81 2c       	mov	r8, r1
    1f0e:	91 2c       	mov	r9, r1
    1f10:	54 01       	movw	r10, r8
    1f12:	53 e0       	ldi	r21, 0x03	; 3
    1f14:	d5 16       	cp	r13, r21
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <pf_mount+0xba>
    1f18:	c0 c0       	rjmp	.+384    	; 0x209a <pf_mount+0x23a>
    1f1a:	d1 10       	cpse	r13, r1
    1f1c:	c0 c0       	rjmp	.+384    	; 0x209e <pf_mount+0x23e>
    1f1e:	04 e2       	ldi	r16, 0x24	; 36
    1f20:	10 e0       	ldi	r17, 0x00	; 0
    1f22:	2d e0       	ldi	r18, 0x0D	; 13
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	b5 01       	movw	r22, r10
    1f28:	a4 01       	movw	r20, r8
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	0e 94 1c 07 	call	0xe38	; 0xe38 <disk_readp>
    1f32:	81 11       	cpse	r24, r1
    1f34:	b6 c0       	rjmp	.+364    	; 0x20a2 <pf_mount+0x242>
    1f36:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f38:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	50 e0       	ldi	r21, 0x00	; 0
    1f3e:	21 15       	cp	r18, r1
    1f40:	31 05       	cpc	r19, r1
    1f42:	41 05       	cpc	r20, r1
    1f44:	51 05       	cpc	r21, r1
    1f46:	21 f4       	brne	.+8      	; 0x1f50 <pf_mount+0xf0>
    1f48:	28 8d       	ldd	r18, Y+24	; 0x18
    1f4a:	39 8d       	ldd	r19, Y+25	; 0x19
    1f4c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1f4e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1f50:	ac 81       	ldd	r26, Y+4	; 0x04
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__muluhisi3>
    1f58:	6d a3       	std	Y+37, r22	; 0x25
    1f5a:	7e a3       	std	Y+38, r23	; 0x26
    1f5c:	8f a3       	std	Y+39, r24	; 0x27
    1f5e:	98 a7       	std	Y+40, r25	; 0x28
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	9b 81       	ldd	r25, Y+3	; 0x03
    1f64:	88 0e       	add	r8, r24
    1f66:	99 1e       	adc	r9, r25
    1f68:	a1 1c       	adc	r10, r1
    1f6a:	b1 1c       	adc	r11, r1
    1f6c:	d7 01       	movw	r26, r14
    1f6e:	1c 96       	adiw	r26, 0x0c	; 12
    1f70:	8d 92       	st	X+, r8
    1f72:	9d 92       	st	X+, r9
    1f74:	ad 92       	st	X+, r10
    1f76:	bc 92       	st	X, r11
    1f78:	1f 97       	sbiw	r26, 0x0f	; 15
    1f7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7c:	11 96       	adiw	r26, 0x01	; 1
    1f7e:	ec 93       	st	X, r30
    1f80:	11 97       	sbiw	r26, 0x01	; 1
    1f82:	8d 81       	ldd	r24, Y+5	; 0x05
    1f84:	9e 81       	ldd	r25, Y+6	; 0x06
    1f86:	15 96       	adiw	r26, 0x05	; 5
    1f88:	9c 93       	st	X, r25
    1f8a:	8e 93       	st	-X, r24
    1f8c:	14 97       	sbiw	r26, 0x04	; 4
    1f8e:	0f 81       	ldd	r16, Y+7	; 0x07
    1f90:	18 85       	ldd	r17, Y+8	; 0x08
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	01 15       	cp	r16, r1
    1f98:	11 05       	cpc	r17, r1
    1f9a:	21 05       	cpc	r18, r1
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	21 f4       	brne	.+8      	; 0x1fa8 <pf_mount+0x148>
    1fa0:	0c 89       	ldd	r16, Y+20	; 0x14
    1fa2:	1d 89       	ldd	r17, Y+21	; 0x15
    1fa4:	2e 89       	ldd	r18, Y+22	; 0x16
    1fa6:	3f 89       	ldd	r19, Y+23	; 0x17
    1fa8:	4a 81       	ldd	r20, Y+2	; 0x02
    1faa:	5b 81       	ldd	r21, Y+3	; 0x03
    1fac:	04 1b       	sub	r16, r20
    1fae:	15 0b       	sbc	r17, r21
    1fb0:	21 09       	sbc	r18, r1
    1fb2:	31 09       	sbc	r19, r1
    1fb4:	4d a1       	ldd	r20, Y+37	; 0x25
    1fb6:	5e a1       	ldd	r21, Y+38	; 0x26
    1fb8:	6f a1       	ldd	r22, Y+39	; 0x27
    1fba:	78 a5       	ldd	r23, Y+40	; 0x28
    1fbc:	04 1b       	sub	r16, r20
    1fbe:	15 0b       	sbc	r17, r21
    1fc0:	26 0b       	sbc	r18, r22
    1fc2:	37 0b       	sbc	r19, r23
    1fc4:	92 95       	swap	r25
    1fc6:	82 95       	swap	r24
    1fc8:	8f 70       	andi	r24, 0x0F	; 15
    1fca:	89 27       	eor	r24, r25
    1fcc:	9f 70       	andi	r25, 0x0F	; 15
    1fce:	89 27       	eor	r24, r25
    1fd0:	2c 01       	movw	r4, r24
    1fd2:	61 2c       	mov	r6, r1
    1fd4:	71 2c       	mov	r7, r1
    1fd6:	c9 01       	movw	r24, r18
    1fd8:	b8 01       	movw	r22, r16
    1fda:	64 19       	sub	r22, r4
    1fdc:	75 09       	sbc	r23, r5
    1fde:	86 09       	sbc	r24, r6
    1fe0:	97 09       	sbc	r25, r7
    1fe2:	2e 2f       	mov	r18, r30
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	0e 94 46 18 	call	0x308c	; 0x308c <__udivmodsi4>
    1fee:	ba 01       	movw	r22, r20
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	4e 5f       	subi	r20, 0xFE	; 254
    1ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff6:	6f 4f       	sbci	r22, 0xFF	; 255
    1ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffa:	d7 01       	movw	r26, r14
    1ffc:	18 96       	adiw	r26, 0x08	; 8
    1ffe:	4d 93       	st	X+, r20
    2000:	5d 93       	st	X+, r21
    2002:	6d 93       	st	X+, r22
    2004:	7c 93       	st	X, r23
    2006:	1b 97       	sbiw	r26, 0x0b	; 11
    2008:	47 3f       	cpi	r20, 0xF7	; 247
    200a:	bf e0       	ldi	r27, 0x0F	; 15
    200c:	5b 07       	cpc	r21, r27
    200e:	61 05       	cpc	r22, r1
    2010:	71 05       	cpc	r23, r1
    2012:	10 f4       	brcc	.+4      	; 0x2018 <pf_mount+0x1b8>
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	01 c0       	rjmp	.+2      	; 0x201a <pf_mount+0x1ba>
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	47 3f       	cpi	r20, 0xF7	; 247
    201c:	5f 4f       	sbci	r21, 0xFF	; 255
    201e:	61 05       	cpc	r22, r1
    2020:	71 05       	cpc	r23, r1
    2022:	08 f0       	brcs	.+2      	; 0x2026 <pf_mount+0x1c6>
    2024:	83 e0       	ldi	r24, 0x03	; 3
    2026:	d7 01       	movw	r26, r14
    2028:	8c 93       	st	X, r24
    202a:	83 30       	cpi	r24, 0x03	; 3
    202c:	51 f4       	brne	.+20     	; 0x2042 <pf_mount+0x1e2>
    202e:	88 a1       	ldd	r24, Y+32	; 0x20
    2030:	99 a1       	ldd	r25, Y+33	; 0x21
    2032:	aa a1       	ldd	r26, Y+34	; 0x22
    2034:	bb a1       	ldd	r27, Y+35	; 0x23
    2036:	f7 01       	movw	r30, r14
    2038:	80 8b       	std	Z+16, r24	; 0x10
    203a:	91 8b       	std	Z+17, r25	; 0x11
    203c:	a2 8b       	std	Z+18, r26	; 0x12
    203e:	b3 8b       	std	Z+19, r27	; 0x13
    2040:	0d c0       	rjmp	.+26     	; 0x205c <pf_mount+0x1fc>
    2042:	8d a1       	ldd	r24, Y+37	; 0x25
    2044:	9e a1       	ldd	r25, Y+38	; 0x26
    2046:	af a1       	ldd	r26, Y+39	; 0x27
    2048:	b8 a5       	ldd	r27, Y+40	; 0x28
    204a:	88 0d       	add	r24, r8
    204c:	99 1d       	adc	r25, r9
    204e:	aa 1d       	adc	r26, r10
    2050:	bb 1d       	adc	r27, r11
    2052:	f7 01       	movw	r30, r14
    2054:	80 8b       	std	Z+16, r24	; 0x10
    2056:	91 8b       	std	Z+17, r25	; 0x11
    2058:	a2 8b       	std	Z+18, r26	; 0x12
    205a:	b3 8b       	std	Z+19, r27	; 0x13
    205c:	4d a1       	ldd	r20, Y+37	; 0x25
    205e:	5e a1       	ldd	r21, Y+38	; 0x26
    2060:	6f a1       	ldd	r22, Y+39	; 0x27
    2062:	78 a5       	ldd	r23, Y+40	; 0x28
    2064:	84 0e       	add	r8, r20
    2066:	95 1e       	adc	r9, r21
    2068:	a6 1e       	adc	r10, r22
    206a:	b7 1e       	adc	r11, r23
    206c:	84 0c       	add	r8, r4
    206e:	95 1c       	adc	r9, r5
    2070:	a6 1c       	adc	r10, r6
    2072:	b7 1c       	adc	r11, r7
    2074:	d7 01       	movw	r26, r14
    2076:	54 96       	adiw	r26, 0x14	; 20
    2078:	8d 92       	st	X+, r8
    207a:	9d 92       	st	X+, r9
    207c:	ad 92       	st	X+, r10
    207e:	bc 92       	st	X, r11
    2080:	57 97       	sbiw	r26, 0x17	; 23
    2082:	12 96       	adiw	r26, 0x02	; 2
    2084:	1c 92       	st	X, r1
    2086:	f0 92 f2 05 	sts	0x05F2, r15	; 0x8005f2 <FatFs+0x1>
    208a:	e0 92 f1 05 	sts	0x05F1, r14	; 0x8005f1 <FatFs>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	09 c0       	rjmp	.+18     	; 0x20a4 <pf_mount+0x244>
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	07 c0       	rjmp	.+14     	; 0x20a4 <pf_mount+0x244>
    2096:	82 e0       	ldi	r24, 0x02	; 2
    2098:	05 c0       	rjmp	.+10     	; 0x20a4 <pf_mount+0x244>
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	03 c0       	rjmp	.+6      	; 0x20a4 <pf_mount+0x244>
    209e:	87 e0       	ldi	r24, 0x07	; 7
    20a0:	01 c0       	rjmp	.+2      	; 0x20a4 <pf_mount+0x244>
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	a8 96       	adiw	r28, 0x28	; 40
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	ff 90       	pop	r15
    20ba:	ef 90       	pop	r14
    20bc:	df 90       	pop	r13
    20be:	bf 90       	pop	r11
    20c0:	af 90       	pop	r10
    20c2:	9f 90       	pop	r9
    20c4:	8f 90       	pop	r8
    20c6:	7f 90       	pop	r7
    20c8:	6f 90       	pop	r6
    20ca:	5f 90       	pop	r5
    20cc:	4f 90       	pop	r4
    20ce:	08 95       	ret

000020d0 <pf_open>:
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	ec 97       	sbiw	r28, 0x3c	; 60
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	00 91 f1 05 	lds	r16, 0x05F1	; 0x8005f1 <FatFs>
    20ec:	10 91 f2 05 	lds	r17, 0x05F2	; 0x8005f2 <FatFs+0x1>
    20f0:	01 15       	cp	r16, r1
    20f2:	11 05       	cpc	r17, r1
    20f4:	c9 f1       	breq	.+114    	; 0x2168 <pf_open+0x98>
    20f6:	bc 01       	movw	r22, r24
    20f8:	f8 01       	movw	r30, r16
    20fa:	12 82       	std	Z+2, r1	; 0x02
    20fc:	ce 01       	movw	r24, r28
    20fe:	4d 96       	adiw	r24, 0x1d	; 29
    2100:	97 83       	std	Z+7, r25	; 0x07
    2102:	86 83       	std	Z+6, r24	; 0x06
    2104:	0c 97       	sbiw	r24, 0x0c	; 12
    2106:	9c 83       	std	Y+4, r25	; 0x04
    2108:	8b 83       	std	Y+3, r24	; 0x03
    210a:	40 97       	sbiw	r24, 0x10	; 16
    210c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <follow_path>
    2110:	81 11       	cpse	r24, r1
    2112:	2f c0       	rjmp	.+94     	; 0x2172 <pf_open+0xa2>
    2114:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2116:	88 23       	and	r24, r24
    2118:	49 f1       	breq	.+82     	; 0x216c <pf_open+0x9c>
    211a:	88 a5       	ldd	r24, Y+40	; 0x28
    211c:	84 fd       	sbrc	r24, 4
    211e:	28 c0       	rjmp	.+80     	; 0x2170 <pf_open+0xa0>
    2120:	89 a9       	ldd	r24, Y+49	; 0x31
    2122:	9a a9       	ldd	r25, Y+50	; 0x32
    2124:	a0 e0       	ldi	r26, 0x00	; 0
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	bc 01       	movw	r22, r24
    212a:	55 27       	eor	r21, r21
    212c:	44 27       	eor	r20, r20
    212e:	8f a9       	ldd	r24, Y+55	; 0x37
    2130:	98 ad       	ldd	r25, Y+56	; 0x38
    2132:	a0 e0       	ldi	r26, 0x00	; 0
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	84 2b       	or	r24, r20
    2138:	95 2b       	or	r25, r21
    213a:	a6 2b       	or	r26, r22
    213c:	b7 2b       	or	r27, r23
    213e:	f8 01       	movw	r30, r16
    2140:	80 a3       	std	Z+32, r24	; 0x20
    2142:	91 a3       	std	Z+33, r25	; 0x21
    2144:	a2 a3       	std	Z+34, r26	; 0x22
    2146:	b3 a3       	std	Z+35, r27	; 0x23
    2148:	89 ad       	ldd	r24, Y+57	; 0x39
    214a:	9a ad       	ldd	r25, Y+58	; 0x3a
    214c:	ab ad       	ldd	r26, Y+59	; 0x3b
    214e:	bc ad       	ldd	r27, Y+60	; 0x3c
    2150:	84 8f       	std	Z+28, r24	; 0x1c
    2152:	95 8f       	std	Z+29, r25	; 0x1d
    2154:	a6 8f       	std	Z+30, r26	; 0x1e
    2156:	b7 8f       	std	Z+31, r27	; 0x1f
    2158:	10 8e       	std	Z+24, r1	; 0x18
    215a:	11 8e       	std	Z+25, r1	; 0x19
    215c:	12 8e       	std	Z+26, r1	; 0x1a
    215e:	13 8e       	std	Z+27, r1	; 0x1b
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	82 83       	std	Z+2, r24	; 0x02
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	05 c0       	rjmp	.+10     	; 0x2172 <pf_open+0xa2>
    2168:	86 e0       	ldi	r24, 0x06	; 6
    216a:	03 c0       	rjmp	.+6      	; 0x2172 <pf_open+0xa2>
    216c:	83 e0       	ldi	r24, 0x03	; 3
    216e:	01 c0       	rjmp	.+2      	; 0x2172 <pf_open+0xa2>
    2170:	83 e0       	ldi	r24, 0x03	; 3
    2172:	ec 96       	adiw	r28, 0x3c	; 60
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	0f 91       	pop	r16
    2186:	08 95       	ret

00002188 <pf_read>:
    2188:	2f 92       	push	r2
    218a:	3f 92       	push	r3
    218c:	4f 92       	push	r4
    218e:	5f 92       	push	r5
    2190:	6f 92       	push	r6
    2192:	7f 92       	push	r7
    2194:	8f 92       	push	r8
    2196:	9f 92       	push	r9
    2198:	af 92       	push	r10
    219a:	bf 92       	push	r11
    219c:	cf 92       	push	r12
    219e:	df 92       	push	r13
    21a0:	ef 92       	push	r14
    21a2:	ff 92       	push	r15
    21a4:	0f 93       	push	r16
    21a6:	1f 93       	push	r17
    21a8:	cf 93       	push	r28
    21aa:	df 93       	push	r29
    21ac:	3c 01       	movw	r6, r24
    21ae:	6b 01       	movw	r12, r22
    21b0:	4a 01       	movw	r8, r20
    21b2:	e0 90 f1 05 	lds	r14, 0x05F1	; 0x8005f1 <FatFs>
    21b6:	f0 90 f2 05 	lds	r15, 0x05F2	; 0x8005f2 <FatFs+0x1>
    21ba:	fa 01       	movw	r30, r20
    21bc:	11 82       	std	Z+1, r1	; 0x01
    21be:	10 82       	st	Z, r1
    21c0:	e1 14       	cp	r14, r1
    21c2:	f1 04       	cpc	r15, r1
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <pf_read+0x40>
    21c6:	bb c0       	rjmp	.+374    	; 0x233e <pf_read+0x1b6>
    21c8:	f7 01       	movw	r30, r14
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	80 ff       	sbrs	r24, 0
    21ce:	b9 c0       	rjmp	.+370    	; 0x2342 <pf_read+0x1ba>
    21d0:	84 8d       	ldd	r24, Z+28	; 0x1c
    21d2:	95 8d       	ldd	r25, Z+29	; 0x1d
    21d4:	a6 8d       	ldd	r26, Z+30	; 0x1e
    21d6:	b7 8d       	ldd	r27, Z+31	; 0x1f
    21d8:	40 8d       	ldd	r20, Z+24	; 0x18
    21da:	51 8d       	ldd	r21, Z+25	; 0x19
    21dc:	62 8d       	ldd	r22, Z+26	; 0x1a
    21de:	73 8d       	ldd	r23, Z+27	; 0x1b
    21e0:	84 1b       	sub	r24, r20
    21e2:	95 0b       	sbc	r25, r21
    21e4:	a6 0b       	sbc	r26, r22
    21e6:	b7 0b       	sbc	r27, r23
    21e8:	a6 01       	movw	r20, r12
    21ea:	60 e0       	ldi	r22, 0x00	; 0
    21ec:	70 e0       	ldi	r23, 0x00	; 0
    21ee:	84 17       	cp	r24, r20
    21f0:	95 07       	cpc	r25, r21
    21f2:	a6 07       	cpc	r26, r22
    21f4:	b7 07       	cpc	r27, r23
    21f6:	08 f4       	brcc	.+2      	; 0x21fa <pf_read+0x72>
    21f8:	6c 01       	movw	r12, r24
    21fa:	53 01       	movw	r10, r6
    21fc:	96 c0       	rjmp	.+300    	; 0x232a <pf_read+0x1a2>
    21fe:	f7 01       	movw	r30, r14
    2200:	20 8c       	ldd	r2, Z+24	; 0x18
    2202:	31 8c       	ldd	r3, Z+25	; 0x19
    2204:	42 8c       	ldd	r4, Z+26	; 0x1a
    2206:	53 8c       	ldd	r5, Z+27	; 0x1b
    2208:	d2 01       	movw	r26, r4
    220a:	c1 01       	movw	r24, r2
    220c:	91 70       	andi	r25, 0x01	; 1
    220e:	aa 27       	eor	r26, r26
    2210:	bb 27       	eor	r27, r27
    2212:	89 2b       	or	r24, r25
    2214:	8a 2b       	or	r24, r26
    2216:	8b 2b       	or	r24, r27
    2218:	09 f0       	breq	.+2      	; 0x221c <pf_read+0x94>
    221a:	4e c0       	rjmp	.+156    	; 0x22b8 <pf_read+0x130>
    221c:	21 81       	ldd	r18, Z+1	; 0x01
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	c2 01       	movw	r24, r4
    2226:	b1 01       	movw	r22, r2
    2228:	05 2e       	mov	r0, r21
    222a:	59 e0       	ldi	r21, 0x09	; 9
    222c:	96 95       	lsr	r25
    222e:	87 95       	ror	r24
    2230:	77 95       	ror	r23
    2232:	67 95       	ror	r22
    2234:	5a 95       	dec	r21
    2236:	d1 f7       	brne	.-12     	; 0x222c <pf_read+0xa4>
    2238:	50 2d       	mov	r21, r0
    223a:	0e 94 46 18 	call	0x308c	; 0x308c <__udivmodsi4>
    223e:	67 2b       	or	r22, r23
    2240:	68 2b       	or	r22, r24
    2242:	69 2b       	or	r22, r25
    2244:	e9 f4       	brne	.+58     	; 0x2280 <pf_read+0xf8>
    2246:	23 28       	or	r2, r3
    2248:	24 28       	or	r2, r4
    224a:	25 28       	or	r2, r5
    224c:	31 f4       	brne	.+12     	; 0x225a <pf_read+0xd2>
    224e:	f7 01       	movw	r30, r14
    2250:	60 a1       	ldd	r22, Z+32	; 0x20
    2252:	71 a1       	ldd	r23, Z+33	; 0x21
    2254:	82 a1       	ldd	r24, Z+34	; 0x22
    2256:	93 a1       	ldd	r25, Z+35	; 0x23
    2258:	07 c0       	rjmp	.+14     	; 0x2268 <pf_read+0xe0>
    225a:	f7 01       	movw	r30, r14
    225c:	64 a1       	ldd	r22, Z+36	; 0x24
    225e:	75 a1       	ldd	r23, Z+37	; 0x25
    2260:	86 a1       	ldd	r24, Z+38	; 0x26
    2262:	97 a1       	ldd	r25, Z+39	; 0x27
    2264:	0e 94 cc 0c 	call	0x1998	; 0x1998 <get_fat>
    2268:	62 30       	cpi	r22, 0x02	; 2
    226a:	71 05       	cpc	r23, r1
    226c:	81 05       	cpc	r24, r1
    226e:	91 05       	cpc	r25, r1
    2270:	08 f4       	brcc	.+2      	; 0x2274 <pf_read+0xec>
    2272:	61 c0       	rjmp	.+194    	; 0x2336 <pf_read+0x1ae>
    2274:	f7 01       	movw	r30, r14
    2276:	64 a3       	std	Z+36, r22	; 0x24
    2278:	75 a3       	std	Z+37, r23	; 0x25
    227a:	86 a3       	std	Z+38, r24	; 0x26
    227c:	97 a3       	std	Z+39, r25	; 0x27
    227e:	13 82       	std	Z+3, r1	; 0x03
    2280:	f7 01       	movw	r30, r14
    2282:	64 a1       	ldd	r22, Z+36	; 0x24
    2284:	75 a1       	ldd	r23, Z+37	; 0x25
    2286:	86 a1       	ldd	r24, Z+38	; 0x26
    2288:	97 a1       	ldd	r25, Z+39	; 0x27
    228a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <clust2sect>
    228e:	61 15       	cp	r22, r1
    2290:	71 05       	cpc	r23, r1
    2292:	81 05       	cpc	r24, r1
    2294:	91 05       	cpc	r25, r1
    2296:	09 f4       	brne	.+2      	; 0x229a <pf_read+0x112>
    2298:	4e c0       	rjmp	.+156    	; 0x2336 <pf_read+0x1ae>
    229a:	f7 01       	movw	r30, r14
    229c:	23 81       	ldd	r18, Z+3	; 0x03
    229e:	31 e0       	ldi	r19, 0x01	; 1
    22a0:	32 0f       	add	r19, r18
    22a2:	33 83       	std	Z+3, r19	; 0x03
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	82 0f       	add	r24, r18
    22aa:	91 1d       	adc	r25, r1
    22ac:	a1 1d       	adc	r26, r1
    22ae:	b1 1d       	adc	r27, r1
    22b0:	80 a7       	std	Z+40, r24	; 0x28
    22b2:	91 a7       	std	Z+41, r25	; 0x29
    22b4:	a2 a7       	std	Z+42, r26	; 0x2a
    22b6:	b3 a7       	std	Z+43, r27	; 0x2b
    22b8:	f7 01       	movw	r30, r14
    22ba:	80 8d       	ldd	r24, Z+24	; 0x18
    22bc:	91 8d       	ldd	r25, Z+25	; 0x19
    22be:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22c0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    22c2:	9c 01       	movw	r18, r24
    22c4:	31 70       	andi	r19, 0x01	; 1
    22c6:	c0 e0       	ldi	r28, 0x00	; 0
    22c8:	d2 e0       	ldi	r29, 0x02	; 2
    22ca:	c2 1b       	sub	r28, r18
    22cc:	d3 0b       	sbc	r29, r19
    22ce:	cc 16       	cp	r12, r28
    22d0:	dd 06       	cpc	r13, r29
    22d2:	08 f4       	brcc	.+2      	; 0x22d6 <pf_read+0x14e>
    22d4:	e6 01       	movw	r28, r12
    22d6:	f7 01       	movw	r30, r14
    22d8:	40 a5       	ldd	r20, Z+40	; 0x28
    22da:	51 a5       	ldd	r21, Z+41	; 0x29
    22dc:	62 a5       	ldd	r22, Z+42	; 0x2a
    22de:	73 a5       	ldd	r23, Z+43	; 0x2b
    22e0:	61 14       	cp	r6, r1
    22e2:	71 04       	cpc	r7, r1
    22e4:	19 f4       	brne	.+6      	; 0x22ec <pf_read+0x164>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <pf_read+0x168>
    22ec:	8a 2d       	mov	r24, r10
    22ee:	9b 2d       	mov	r25, r11
    22f0:	8e 01       	movw	r16, r28
    22f2:	0e 94 1c 07 	call	0xe38	; 0xe38 <disk_readp>
    22f6:	81 11       	cpse	r24, r1
    22f8:	1e c0       	rjmp	.+60     	; 0x2336 <pf_read+0x1ae>
    22fa:	f7 01       	movw	r30, r14
    22fc:	80 8d       	ldd	r24, Z+24	; 0x18
    22fe:	91 8d       	ldd	r25, Z+25	; 0x19
    2300:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2302:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2304:	8c 0f       	add	r24, r28
    2306:	9d 1f       	adc	r25, r29
    2308:	a1 1d       	adc	r26, r1
    230a:	b1 1d       	adc	r27, r1
    230c:	80 8f       	std	Z+24, r24	; 0x18
    230e:	91 8f       	std	Z+25, r25	; 0x19
    2310:	a2 8f       	std	Z+26, r26	; 0x1a
    2312:	b3 8f       	std	Z+27, r27	; 0x1b
    2314:	ac 0e       	add	r10, r28
    2316:	bd 1e       	adc	r11, r29
    2318:	cc 1a       	sub	r12, r28
    231a:	dd 0a       	sbc	r13, r29
    231c:	f4 01       	movw	r30, r8
    231e:	80 81       	ld	r24, Z
    2320:	91 81       	ldd	r25, Z+1	; 0x01
    2322:	c8 0f       	add	r28, r24
    2324:	d9 1f       	adc	r29, r25
    2326:	d1 83       	std	Z+1, r29	; 0x01
    2328:	c0 83       	st	Z, r28
    232a:	c1 14       	cp	r12, r1
    232c:	d1 04       	cpc	r13, r1
    232e:	09 f0       	breq	.+2      	; 0x2332 <pf_read+0x1aa>
    2330:	66 cf       	rjmp	.-308    	; 0x21fe <pf_read+0x76>
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	07 c0       	rjmp	.+14     	; 0x2344 <pf_read+0x1bc>
    2336:	f7 01       	movw	r30, r14
    2338:	12 82       	std	Z+2, r1	; 0x02
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	03 c0       	rjmp	.+6      	; 0x2344 <pf_read+0x1bc>
    233e:	86 e0       	ldi	r24, 0x06	; 6
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <pf_read+0x1bc>
    2342:	85 e0       	ldi	r24, 0x05	; 5
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
    234c:	ff 90       	pop	r15
    234e:	ef 90       	pop	r14
    2350:	df 90       	pop	r13
    2352:	cf 90       	pop	r12
    2354:	bf 90       	pop	r11
    2356:	af 90       	pop	r10
    2358:	9f 90       	pop	r9
    235a:	8f 90       	pop	r8
    235c:	7f 90       	pop	r7
    235e:	6f 90       	pop	r6
    2360:	5f 90       	pop	r5
    2362:	4f 90       	pop	r4
    2364:	3f 90       	pop	r3
    2366:	2f 90       	pop	r2
    2368:	08 95       	ret

0000236a <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
    236a:	4f 92       	push	r4
    236c:	5f 92       	push	r5
    236e:	6f 92       	push	r6
    2370:	7f 92       	push	r7
    2372:	8f 92       	push	r8
    2374:	9f 92       	push	r9
    2376:	af 92       	push	r10
    2378:	bf 92       	push	r11
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	00 d0       	rcall	.+0      	; 0x2388 <pf_lseek+0x1e>
    2388:	00 d0       	rcall	.+0      	; 0x238a <pf_lseek+0x20>
    238a:	00 d0       	rcall	.+0      	; 0x238c <pf_lseek+0x22>
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    2390:	20 91 f1 05 	lds	r18, 0x05F1	; 0x8005f1 <FatFs>
    2394:	30 91 f2 05 	lds	r19, 0x05F2	; 0x8005f2 <FatFs+0x1>
    2398:	3e 83       	std	Y+6, r19	; 0x06
    239a:	2d 83       	std	Y+5, r18	; 0x05


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    239c:	21 15       	cp	r18, r1
    239e:	31 05       	cpc	r19, r1
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <pf_lseek+0x3a>
    23a2:	f4 c0       	rjmp	.+488    	; 0x258c <pf_lseek+0x222>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    23a4:	d9 01       	movw	r26, r18
    23a6:	12 96       	adiw	r26, 0x02	; 2
    23a8:	2c 91       	ld	r18, X
    23aa:	12 97       	sbiw	r26, 0x02	; 2
    23ac:	20 ff       	sbrs	r18, 0
    23ae:	f0 c0       	rjmp	.+480    	; 0x2590 <pf_lseek+0x226>
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
    23b0:	5c 96       	adiw	r26, 0x1c	; 28
    23b2:	cd 90       	ld	r12, X+
    23b4:	dd 90       	ld	r13, X+
    23b6:	ed 90       	ld	r14, X+
    23b8:	fc 90       	ld	r15, X
    23ba:	5f 97       	sbiw	r26, 0x1f	; 31
    23bc:	c6 16       	cp	r12, r22
    23be:	d7 06       	cpc	r13, r23
    23c0:	e8 06       	cpc	r14, r24
    23c2:	f9 06       	cpc	r15, r25
    23c4:	10 f0       	brcs	.+4      	; 0x23ca <pf_lseek+0x60>
    23c6:	6b 01       	movw	r12, r22
    23c8:	7c 01       	movw	r14, r24
	ifptr = fs->fptr;
    23ca:	ed 81       	ldd	r30, Y+5	; 0x05
    23cc:	fe 81       	ldd	r31, Y+6	; 0x06
    23ce:	40 8c       	ldd	r4, Z+24	; 0x18
    23d0:	51 8c       	ldd	r5, Z+25	; 0x19
    23d2:	62 8c       	ldd	r6, Z+26	; 0x1a
    23d4:	73 8c       	ldd	r7, Z+27	; 0x1b
	fs->fptr = 0;
    23d6:	10 8e       	std	Z+24, r1	; 0x18
    23d8:	11 8e       	std	Z+25, r1	; 0x19
    23da:	12 8e       	std	Z+26, r1	; 0x1a
    23dc:	13 8e       	std	Z+27, r1	; 0x1b
	if (ofs > 0) {
    23de:	c1 14       	cp	r12, r1
    23e0:	d1 04       	cpc	r13, r1
    23e2:	e1 04       	cpc	r14, r1
    23e4:	f1 04       	cpc	r15, r1
    23e6:	09 f4       	brne	.+2      	; 0x23ea <pf_lseek+0x80>
    23e8:	d5 c0       	rjmp	.+426    	; 0x2594 <pf_lseek+0x22a>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
    23ea:	81 80       	ldd	r8, Z+1	; 0x01
    23ec:	91 2c       	mov	r9, r1
    23ee:	a1 2c       	mov	r10, r1
    23f0:	b1 2c       	mov	r11, r1
    23f2:	07 2e       	mov	r0, r23
    23f4:	79 e0       	ldi	r23, 0x09	; 9
    23f6:	88 0c       	add	r8, r8
    23f8:	99 1c       	adc	r9, r9
    23fa:	aa 1c       	adc	r10, r10
    23fc:	bb 1c       	adc	r11, r11
    23fe:	7a 95       	dec	r23
    2400:	d1 f7       	brne	.-12     	; 0x23f6 <pf_lseek+0x8c>
    2402:	70 2d       	mov	r23, r0
		if (ifptr > 0 &&
    2404:	41 14       	cp	r4, r1
    2406:	51 04       	cpc	r5, r1
    2408:	61 04       	cpc	r6, r1
    240a:	71 04       	cpc	r7, r1
    240c:	09 f4       	brne	.+2      	; 0x2410 <pf_lseek+0xa6>
    240e:	40 c0       	rjmp	.+128    	; 0x2490 <pf_lseek+0x126>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2410:	c7 01       	movw	r24, r14
    2412:	b6 01       	movw	r22, r12
    2414:	61 50       	subi	r22, 0x01	; 1
    2416:	71 09       	sbc	r23, r1
    2418:	81 09       	sbc	r24, r1
    241a:	91 09       	sbc	r25, r1
    241c:	a5 01       	movw	r20, r10
    241e:	94 01       	movw	r18, r8
    2420:	0e 94 46 18 	call	0x308c	; 0x308c <__udivmodsi4>
    2424:	29 83       	std	Y+1, r18	; 0x01
    2426:	3a 83       	std	Y+2, r19	; 0x02
    2428:	4b 83       	std	Y+3, r20	; 0x03
    242a:	5c 83       	std	Y+4, r21	; 0x04
    242c:	b1 e0       	ldi	r27, 0x01	; 1
    242e:	4b 1a       	sub	r4, r27
    2430:	51 08       	sbc	r5, r1
    2432:	61 08       	sbc	r6, r1
    2434:	71 08       	sbc	r7, r1
    2436:	c3 01       	movw	r24, r6
    2438:	b2 01       	movw	r22, r4
    243a:	a5 01       	movw	r20, r10
    243c:	94 01       	movw	r18, r8
    243e:	0e 94 46 18 	call	0x308c	; 0x308c <__udivmodsi4>
	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
	fs->fptr = 0;
	if (ofs > 0) {
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
		if (ifptr > 0 &&
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	ab 81       	ldd	r26, Y+3	; 0x03
    2448:	bc 81       	ldd	r27, Y+4	; 0x04
    244a:	82 17       	cp	r24, r18
    244c:	93 07       	cpc	r25, r19
    244e:	a4 07       	cpc	r26, r20
    2450:	b5 07       	cpc	r27, r21
    2452:	f0 f0       	brcs	.+60     	; 0x2490 <pf_lseek+0x126>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2454:	88 27       	eor	r24, r24
    2456:	99 27       	eor	r25, r25
    2458:	dc 01       	movw	r26, r24
    245a:	88 19       	sub	r24, r8
    245c:	99 09       	sbc	r25, r9
    245e:	aa 09       	sbc	r26, r10
    2460:	bb 09       	sbc	r27, r11
    2462:	48 22       	and	r4, r24
    2464:	59 22       	and	r5, r25
    2466:	6a 22       	and	r6, r26
    2468:	7b 22       	and	r7, r27
    246a:	ad 81       	ldd	r26, Y+5	; 0x05
    246c:	be 81       	ldd	r27, Y+6	; 0x06
    246e:	58 96       	adiw	r26, 0x18	; 24
    2470:	4d 92       	st	X+, r4
    2472:	5d 92       	st	X+, r5
    2474:	6d 92       	st	X+, r6
    2476:	7c 92       	st	X, r7
    2478:	5b 97       	sbiw	r26, 0x1b	; 27
			ofs -= fs->fptr;
    247a:	c4 18       	sub	r12, r4
    247c:	d5 08       	sbc	r13, r5
    247e:	e6 08       	sbc	r14, r6
    2480:	f7 08       	sbc	r15, r7
			clst = fs->curr_clust;
    2482:	94 96       	adiw	r26, 0x24	; 36
    2484:	6d 91       	ld	r22, X+
    2486:	7d 91       	ld	r23, X+
    2488:	8d 91       	ld	r24, X+
    248a:	9c 91       	ld	r25, X
    248c:	97 97       	sbiw	r26, 0x27	; 39
    248e:	33 c0       	rjmp	.+102    	; 0x24f6 <pf_lseek+0x18c>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
    2490:	ed 81       	ldd	r30, Y+5	; 0x05
    2492:	fe 81       	ldd	r31, Y+6	; 0x06
    2494:	60 a1       	ldd	r22, Z+32	; 0x20
    2496:	71 a1       	ldd	r23, Z+33	; 0x21
    2498:	82 a1       	ldd	r24, Z+34	; 0x22
    249a:	93 a1       	ldd	r25, Z+35	; 0x23
			fs->curr_clust = clst;
    249c:	64 a3       	std	Z+36, r22	; 0x24
    249e:	75 a3       	std	Z+37, r23	; 0x25
    24a0:	86 a3       	std	Z+38, r24	; 0x26
    24a2:	97 a3       	std	Z+39, r25	; 0x27
    24a4:	28 c0       	rjmp	.+80     	; 0x24f6 <pf_lseek+0x18c>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
    24a6:	0e 94 cc 0c 	call	0x1998	; 0x1998 <get_fat>
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
    24aa:	62 30       	cpi	r22, 0x02	; 2
    24ac:	71 05       	cpc	r23, r1
    24ae:	81 05       	cpc	r24, r1
    24b0:	91 05       	cpc	r25, r1
    24b2:	08 f4       	brcc	.+2      	; 0x24b6 <pf_lseek+0x14c>
    24b4:	65 c0       	rjmp	.+202    	; 0x2580 <pf_lseek+0x216>
    24b6:	ed 81       	ldd	r30, Y+5	; 0x05
    24b8:	fe 81       	ldd	r31, Y+6	; 0x06
    24ba:	40 84       	ldd	r4, Z+8	; 0x08
    24bc:	51 84       	ldd	r5, Z+9	; 0x09
    24be:	62 84       	ldd	r6, Z+10	; 0x0a
    24c0:	73 84       	ldd	r7, Z+11	; 0x0b
    24c2:	64 15       	cp	r22, r4
    24c4:	75 05       	cpc	r23, r5
    24c6:	86 05       	cpc	r24, r6
    24c8:	97 05       	cpc	r25, r7
    24ca:	08 f0       	brcs	.+2      	; 0x24ce <pf_lseek+0x164>
    24cc:	59 c0       	rjmp	.+178    	; 0x2580 <pf_lseek+0x216>
			fs->curr_clust = clst;
    24ce:	64 a3       	std	Z+36, r22	; 0x24
    24d0:	75 a3       	std	Z+37, r23	; 0x25
    24d2:	86 a3       	std	Z+38, r24	; 0x26
    24d4:	97 a3       	std	Z+39, r25	; 0x27
			fs->fptr += bcs;
    24d6:	40 8c       	ldd	r4, Z+24	; 0x18
    24d8:	51 8c       	ldd	r5, Z+25	; 0x19
    24da:	62 8c       	ldd	r6, Z+26	; 0x1a
    24dc:	73 8c       	ldd	r7, Z+27	; 0x1b
    24de:	48 0c       	add	r4, r8
    24e0:	59 1c       	adc	r5, r9
    24e2:	6a 1c       	adc	r6, r10
    24e4:	7b 1c       	adc	r7, r11
    24e6:	40 8e       	std	Z+24, r4	; 0x18
    24e8:	51 8e       	std	Z+25, r5	; 0x19
    24ea:	62 8e       	std	Z+26, r6	; 0x1a
    24ec:	73 8e       	std	Z+27, r7	; 0x1b
			ofs -= bcs;
    24ee:	c8 18       	sub	r12, r8
    24f0:	d9 08       	sbc	r13, r9
    24f2:	ea 08       	sbc	r14, r10
    24f4:	fb 08       	sbc	r15, r11
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    24f6:	8c 14       	cp	r8, r12
    24f8:	9d 04       	cpc	r9, r13
    24fa:	ae 04       	cpc	r10, r14
    24fc:	bf 04       	cpc	r11, r15
    24fe:	98 f2       	brcs	.-90     	; 0x24a6 <pf_lseek+0x13c>
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    2500:	ad 81       	ldd	r26, Y+5	; 0x05
    2502:	be 81       	ldd	r27, Y+6	; 0x06
    2504:	58 96       	adiw	r26, 0x18	; 24
    2506:	8d 90       	ld	r8, X+
    2508:	9d 90       	ld	r9, X+
    250a:	ad 90       	ld	r10, X+
    250c:	bc 90       	ld	r11, X
    250e:	5b 97       	sbiw	r26, 0x1b	; 27
    2510:	8c 0c       	add	r8, r12
    2512:	9d 1c       	adc	r9, r13
    2514:	ae 1c       	adc	r10, r14
    2516:	bf 1c       	adc	r11, r15
    2518:	fd 01       	movw	r30, r26
    251a:	80 8e       	std	Z+24, r8	; 0x18
    251c:	91 8e       	std	Z+25, r9	; 0x19
    251e:	a2 8e       	std	Z+26, r10	; 0x1a
    2520:	b3 8e       	std	Z+27, r11	; 0x1b
		sect = clust2sect(clst);		/* Current sector */
    2522:	0e 94 c3 0b 	call	0x1786	; 0x1786 <clust2sect>
		if (!sect) goto fe_abort;
    2526:	61 15       	cp	r22, r1
    2528:	71 05       	cpc	r23, r1
    252a:	81 05       	cpc	r24, r1
    252c:	91 05       	cpc	r25, r1
    252e:	41 f1       	breq	.+80     	; 0x2580 <pf_lseek+0x216>
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
    2530:	46 01       	movw	r8, r12
    2532:	57 01       	movw	r10, r14
    2534:	07 2e       	mov	r0, r23
    2536:	79 e0       	ldi	r23, 0x09	; 9
    2538:	b6 94       	lsr	r11
    253a:	a7 94       	ror	r10
    253c:	97 94       	ror	r9
    253e:	87 94       	ror	r8
    2540:	7a 95       	dec	r23
    2542:	d1 f7       	brne	.-12     	; 0x2538 <pf_lseek+0x1ce>
    2544:	70 2d       	mov	r23, r0
    2546:	ad 81       	ldd	r26, Y+5	; 0x05
    2548:	be 81       	ldd	r27, Y+6	; 0x06
    254a:	13 96       	adiw	r26, 0x03	; 3
    254c:	8c 92       	st	X, r8
		if (ofs % 512)
    254e:	b1 e0       	ldi	r27, 0x01	; 1
    2550:	db 22       	and	r13, r27
    2552:	ee 24       	eor	r14, r14
    2554:	ff 24       	eor	r15, r15
    2556:	cd 28       	or	r12, r13
    2558:	ce 28       	or	r12, r14
    255a:	cf 28       	or	r12, r15
    255c:	e9 f0       	breq	.+58     	; 0x2598 <pf_lseek+0x22e>
			fs->dsect = sect + fs->csect++;
    255e:	21 e0       	ldi	r18, 0x01	; 1
    2560:	28 0d       	add	r18, r8
    2562:	ed 81       	ldd	r30, Y+5	; 0x05
    2564:	fe 81       	ldd	r31, Y+6	; 0x06
    2566:	23 83       	std	Z+3, r18	; 0x03
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	88 0d       	add	r24, r8
    256e:	91 1d       	adc	r25, r1
    2570:	a1 1d       	adc	r26, r1
    2572:	b1 1d       	adc	r27, r1
    2574:	80 a7       	std	Z+40, r24	; 0x28
    2576:	91 a7       	std	Z+41, r25	; 0x29
    2578:	a2 a7       	std	Z+42, r26	; 0x2a
    257a:	b3 a7       	std	Z+43, r27	; 0x2b
	}

	return FR_OK;
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	0d c0       	rjmp	.+26     	; 0x259a <pf_lseek+0x230>

fe_abort:
	fs->flag = 0;
    2580:	ad 81       	ldd	r26, Y+5	; 0x05
    2582:	be 81       	ldd	r27, Y+6	; 0x06
    2584:	12 96       	adiw	r26, 0x02	; 2
    2586:	1c 92       	st	X, r1
	return FR_DISK_ERR;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	07 c0       	rjmp	.+14     	; 0x259a <pf_lseek+0x230>
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    258c:	86 e0       	ldi	r24, 0x06	; 6
    258e:	05 c0       	rjmp	.+10     	; 0x259a <pf_lseek+0x230>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
			return FR_NOT_OPENED;
    2590:	85 e0       	ldi	r24, 0x05	; 5
    2592:	03 c0       	rjmp	.+6      	; 0x259a <pf_lseek+0x230>
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
		if (ofs % 512)
			fs->dsect = sect + fs->csect++;
	}

	return FR_OK;
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	01 c0       	rjmp	.+2      	; 0x259a <pf_lseek+0x230>
    2598:	80 e0       	ldi	r24, 0x00	; 0

fe_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
    259a:	26 96       	adiw	r28, 0x06	; 6
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	de bf       	out	0x3e, r29	; 62
    25a2:	0f be       	out	0x3f, r0	; 63
    25a4:	cd bf       	out	0x3d, r28	; 61
    25a6:	df 91       	pop	r29
    25a8:	cf 91       	pop	r28
    25aa:	ff 90       	pop	r15
    25ac:	ef 90       	pop	r14
    25ae:	df 90       	pop	r13
    25b0:	cf 90       	pop	r12
    25b2:	bf 90       	pop	r11
    25b4:	af 90       	pop	r10
    25b6:	9f 90       	pop	r9
    25b8:	8f 90       	pop	r8
    25ba:	7f 90       	pop	r7
    25bc:	6f 90       	pop	r6
    25be:	5f 90       	pop	r5
    25c0:	4f 90       	pop	r4
    25c2:	08 95       	ret

000025c4 <read_symbol_from_SD>:
}
//—————————————-
*/

uint8_t read_symbol_from_SD (uint16_t symbol)
{
    25c4:	0f 93       	push	r16
    25c6:	1f 93       	push	r17
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	2d 97       	sbiw	r28, 0x0d	; 13
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
	WORD s1;
	uint8_t result;
	char buffer[10] = {};
    25dc:	8e 01       	movw	r16, r28
    25de:	0c 5f       	subi	r16, 0xFC	; 252
    25e0:	1f 4f       	sbci	r17, 0xFF	; 255
    25e2:	2a e0       	ldi	r18, 0x0A	; 10
    25e4:	f8 01       	movw	r30, r16
    25e6:	11 92       	st	Z+, r1
    25e8:	2a 95       	dec	r18
    25ea:	e9 f7       	brne	.-6      	; 0x25e6 <read_symbol_from_SD+0x22>

	pf_lseek(6*symbol); //Установим курсор чтения на 0 в 123.txt
    25ec:	bc 01       	movw	r22, r24
    25ee:	66 0f       	add	r22, r22
    25f0:	77 1f       	adc	r23, r23
    25f2:	68 0f       	add	r22, r24
    25f4:	79 1f       	adc	r23, r25
    25f6:	66 0f       	add	r22, r22
    25f8:	77 1f       	adc	r23, r23
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 94 b5 11 	call	0x236a	; 0x236a <pf_lseek>
	pf_read(buffer,4,&s1);
    2602:	ae 01       	movw	r20, r28
    2604:	4f 5f       	subi	r20, 0xFF	; 255
    2606:	5f 4f       	sbci	r21, 0xFF	; 255
    2608:	64 e0       	ldi	r22, 0x04	; 4
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	c8 01       	movw	r24, r16
    260e:	0e 94 c4 10 	call	0x2188	; 0x2188 <pf_read>
	sscanf(buffer, "%x", &result);
    2612:	ce 01       	movw	r24, r28
    2614:	03 96       	adiw	r24, 0x03	; 3
    2616:	9f 93       	push	r25
    2618:	8f 93       	push	r24
    261a:	80 e5       	ldi	r24, 0x50	; 80
    261c:	91 e0       	ldi	r25, 0x01	; 1
    261e:	9f 93       	push	r25
    2620:	8f 93       	push	r24
    2622:	1f 93       	push	r17
    2624:	0f 93       	push	r16
    2626:	0e 94 17 1a 	call	0x342e	; 0x342e <sscanf>

	return result;
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	2d 96       	adiw	r28, 0x0d	; 13
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	08 95       	ret

0000264e <I2C_Init>:
 */ 
#include "TWI.h"

void I2C_Init(void)
{
	TWBR=0x48; //скорость передачи (при 8 мГц получается 100 кГц)
    264e:	88 e4       	ldi	r24, 0x48	; 72
    2650:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    2654:	08 95       	ret

00002656 <USART_Init>:
 */ 
#include "usart.h"

void USART_Init( unsigned int speed)//Инициализация модуля USART
{	
  UBRR0H = (unsigned char)(speed>>8);
    2656:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  UBRR0L = (unsigned char)speed;
    265a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  UCSR0B=(1<<RXEN0)|( 1<<TXEN0); //Включаем прием и передачу по USART
    265e:	e1 ec       	ldi	r30, 0xC1	; 193
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	88 e1       	ldi	r24, 0x18	; 24
    2664:	80 83       	st	Z, r24
  UCSR0B |= (1<<RXCIE0); //Разрешаем прерывание при приеме
    2666:	80 81       	ld	r24, Z
    2668:	80 68       	ori	r24, 0x80	; 128
    266a:	80 83       	st	Z, r24
  UCSR0A |= (1<<U2X0); // Для 8 мгц, удвоение скорости
    266c:	e0 ec       	ldi	r30, 0xC0	; 192
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	82 60       	ori	r24, 0x02	; 2
    2674:	80 83       	st	Z, r24
  UCSR0C |= (1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);// Обращаемся именно к регистру UCSRC (URSEL=1),
    2676:	e2 ec       	ldi	r30, 0xC2	; 194
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8e 60       	ori	r24, 0x0E	; 14
    267e:	80 83       	st	Z, r24
    2680:	08 95       	ret

00002682 <USART_Transmit>:
  //ассинхронный режим (UMSEL=0), без контроля четности (UPM1=0 и UPM0=0),
  //2 стоп-бит (USBS=1), 8-бит посылка (UCSZ1=1 и UCSZ0=1)
  //UCSRC |= (1<<UPM1);//четность
}
void USART_Transmit( char* data ) //Функция отправки данных
{
    2682:	dc 01       	movw	r26, r24
  uint8_t i;
  for (i = 0; i < strlen(data); i++)
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	0b c0       	rjmp	.+22     	; 0x269e <USART_Transmit+0x1c>
  {
	  while ( !(UCSR0A & (1<<UDRE0)) ); //Ожидание опустошения буфера приема
    2688:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    268c:	95 ff       	sbrs	r25, 5
    268e:	fc cf       	rjmp	.-8      	; 0x2688 <USART_Transmit+0x6>
	  UDR0 = data[i]; //Начало передачи данных
    2690:	fd 01       	movw	r30, r26
    2692:	e2 0f       	add	r30, r18
    2694:	f3 1f       	adc	r31, r19
    2696:	90 81       	ld	r25, Z
    2698:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  //UCSRC |= (1<<UPM1);//четность
}
void USART_Transmit( char* data ) //Функция отправки данных
{
  uint8_t i;
  for (i = 0; i < strlen(data); i++)
    269c:	8f 5f       	subi	r24, 0xFF	; 255
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	fd 01       	movw	r30, r26
    26a4:	01 90       	ld	r0, Z+
    26a6:	00 20       	and	r0, r0
    26a8:	e9 f7       	brne	.-6      	; 0x26a4 <USART_Transmit+0x22>
    26aa:	31 97       	sbiw	r30, 0x01	; 1
    26ac:	ea 1b       	sub	r30, r26
    26ae:	fb 0b       	sbc	r31, r27
    26b0:	2e 17       	cp	r18, r30
    26b2:	3f 07       	cpc	r19, r31
    26b4:	48 f3       	brcs	.-46     	; 0x2688 <USART_Transmit+0x6>
  {
	  while ( !(UCSR0A & (1<<UDRE0)) ); //Ожидание опустошения буфера приема
	  UDR0 = data[i]; //Начало передачи данных
  }

}
    26b6:	08 95       	ret

000026b8 <__divsf3>:
    26b8:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__divsf3x>
    26bc:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__fp_round>
    26c0:	0e 94 1b 14 	call	0x2836	; 0x2836 <__fp_pscB>
    26c4:	58 f0       	brcs	.+22     	; 0x26dc <__divsf3+0x24>
    26c6:	0e 94 14 14 	call	0x2828	; 0x2828 <__fp_pscA>
    26ca:	40 f0       	brcs	.+16     	; 0x26dc <__divsf3+0x24>
    26cc:	29 f4       	brne	.+10     	; 0x26d8 <__divsf3+0x20>
    26ce:	5f 3f       	cpi	r21, 0xFF	; 255
    26d0:	29 f0       	breq	.+10     	; 0x26dc <__divsf3+0x24>
    26d2:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__fp_inf>
    26d6:	51 11       	cpse	r21, r1
    26d8:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__fp_szero>
    26dc:	0c 94 11 14 	jmp	0x2822	; 0x2822 <__fp_nan>

000026e0 <__divsf3x>:
    26e0:	0e 94 33 14 	call	0x2866	; 0x2866 <__fp_split3>
    26e4:	68 f3       	brcs	.-38     	; 0x26c0 <__divsf3+0x8>

000026e6 <__divsf3_pse>:
    26e6:	99 23       	and	r25, r25
    26e8:	b1 f3       	breq	.-20     	; 0x26d6 <__divsf3+0x1e>
    26ea:	55 23       	and	r21, r21
    26ec:	91 f3       	breq	.-28     	; 0x26d2 <__divsf3+0x1a>
    26ee:	95 1b       	sub	r25, r21
    26f0:	55 0b       	sbc	r21, r21
    26f2:	bb 27       	eor	r27, r27
    26f4:	aa 27       	eor	r26, r26
    26f6:	62 17       	cp	r22, r18
    26f8:	73 07       	cpc	r23, r19
    26fa:	84 07       	cpc	r24, r20
    26fc:	38 f0       	brcs	.+14     	; 0x270c <__divsf3_pse+0x26>
    26fe:	9f 5f       	subi	r25, 0xFF	; 255
    2700:	5f 4f       	sbci	r21, 0xFF	; 255
    2702:	22 0f       	add	r18, r18
    2704:	33 1f       	adc	r19, r19
    2706:	44 1f       	adc	r20, r20
    2708:	aa 1f       	adc	r26, r26
    270a:	a9 f3       	breq	.-22     	; 0x26f6 <__divsf3_pse+0x10>
    270c:	35 d0       	rcall	.+106    	; 0x2778 <__divsf3_pse+0x92>
    270e:	0e 2e       	mov	r0, r30
    2710:	3a f0       	brmi	.+14     	; 0x2720 <__divsf3_pse+0x3a>
    2712:	e0 e8       	ldi	r30, 0x80	; 128
    2714:	32 d0       	rcall	.+100    	; 0x277a <__divsf3_pse+0x94>
    2716:	91 50       	subi	r25, 0x01	; 1
    2718:	50 40       	sbci	r21, 0x00	; 0
    271a:	e6 95       	lsr	r30
    271c:	00 1c       	adc	r0, r0
    271e:	ca f7       	brpl	.-14     	; 0x2712 <__divsf3_pse+0x2c>
    2720:	2b d0       	rcall	.+86     	; 0x2778 <__divsf3_pse+0x92>
    2722:	fe 2f       	mov	r31, r30
    2724:	29 d0       	rcall	.+82     	; 0x2778 <__divsf3_pse+0x92>
    2726:	66 0f       	add	r22, r22
    2728:	77 1f       	adc	r23, r23
    272a:	88 1f       	adc	r24, r24
    272c:	bb 1f       	adc	r27, r27
    272e:	26 17       	cp	r18, r22
    2730:	37 07       	cpc	r19, r23
    2732:	48 07       	cpc	r20, r24
    2734:	ab 07       	cpc	r26, r27
    2736:	b0 e8       	ldi	r27, 0x80	; 128
    2738:	09 f0       	breq	.+2      	; 0x273c <__divsf3_pse+0x56>
    273a:	bb 0b       	sbc	r27, r27
    273c:	80 2d       	mov	r24, r0
    273e:	bf 01       	movw	r22, r30
    2740:	ff 27       	eor	r31, r31
    2742:	93 58       	subi	r25, 0x83	; 131
    2744:	5f 4f       	sbci	r21, 0xFF	; 255
    2746:	3a f0       	brmi	.+14     	; 0x2756 <__divsf3_pse+0x70>
    2748:	9e 3f       	cpi	r25, 0xFE	; 254
    274a:	51 05       	cpc	r21, r1
    274c:	78 f0       	brcs	.+30     	; 0x276c <__divsf3_pse+0x86>
    274e:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__fp_inf>
    2752:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__fp_szero>
    2756:	5f 3f       	cpi	r21, 0xFF	; 255
    2758:	e4 f3       	brlt	.-8      	; 0x2752 <__divsf3_pse+0x6c>
    275a:	98 3e       	cpi	r25, 0xE8	; 232
    275c:	d4 f3       	brlt	.-12     	; 0x2752 <__divsf3_pse+0x6c>
    275e:	86 95       	lsr	r24
    2760:	77 95       	ror	r23
    2762:	67 95       	ror	r22
    2764:	b7 95       	ror	r27
    2766:	f7 95       	ror	r31
    2768:	9f 5f       	subi	r25, 0xFF	; 255
    276a:	c9 f7       	brne	.-14     	; 0x275e <__divsf3_pse+0x78>
    276c:	88 0f       	add	r24, r24
    276e:	91 1d       	adc	r25, r1
    2770:	96 95       	lsr	r25
    2772:	87 95       	ror	r24
    2774:	97 f9       	bld	r25, 7
    2776:	08 95       	ret
    2778:	e1 e0       	ldi	r30, 0x01	; 1
    277a:	66 0f       	add	r22, r22
    277c:	77 1f       	adc	r23, r23
    277e:	88 1f       	adc	r24, r24
    2780:	bb 1f       	adc	r27, r27
    2782:	62 17       	cp	r22, r18
    2784:	73 07       	cpc	r23, r19
    2786:	84 07       	cpc	r24, r20
    2788:	ba 07       	cpc	r27, r26
    278a:	20 f0       	brcs	.+8      	; 0x2794 <__divsf3_pse+0xae>
    278c:	62 1b       	sub	r22, r18
    278e:	73 0b       	sbc	r23, r19
    2790:	84 0b       	sbc	r24, r20
    2792:	ba 0b       	sbc	r27, r26
    2794:	ee 1f       	adc	r30, r30
    2796:	88 f7       	brcc	.-30     	; 0x277a <__divsf3_pse+0x94>
    2798:	e0 95       	com	r30
    279a:	08 95       	ret

0000279c <__floatunsisf>:
    279c:	e8 94       	clt
    279e:	09 c0       	rjmp	.+18     	; 0x27b2 <__floatsisf+0x12>

000027a0 <__floatsisf>:
    27a0:	97 fb       	bst	r25, 7
    27a2:	3e f4       	brtc	.+14     	; 0x27b2 <__floatsisf+0x12>
    27a4:	90 95       	com	r25
    27a6:	80 95       	com	r24
    27a8:	70 95       	com	r23
    27aa:	61 95       	neg	r22
    27ac:	7f 4f       	sbci	r23, 0xFF	; 255
    27ae:	8f 4f       	sbci	r24, 0xFF	; 255
    27b0:	9f 4f       	sbci	r25, 0xFF	; 255
    27b2:	99 23       	and	r25, r25
    27b4:	a9 f0       	breq	.+42     	; 0x27e0 <__floatsisf+0x40>
    27b6:	f9 2f       	mov	r31, r25
    27b8:	96 e9       	ldi	r25, 0x96	; 150
    27ba:	bb 27       	eor	r27, r27
    27bc:	93 95       	inc	r25
    27be:	f6 95       	lsr	r31
    27c0:	87 95       	ror	r24
    27c2:	77 95       	ror	r23
    27c4:	67 95       	ror	r22
    27c6:	b7 95       	ror	r27
    27c8:	f1 11       	cpse	r31, r1
    27ca:	f8 cf       	rjmp	.-16     	; 0x27bc <__floatsisf+0x1c>
    27cc:	fa f4       	brpl	.+62     	; 0x280c <__floatsisf+0x6c>
    27ce:	bb 0f       	add	r27, r27
    27d0:	11 f4       	brne	.+4      	; 0x27d6 <__floatsisf+0x36>
    27d2:	60 ff       	sbrs	r22, 0
    27d4:	1b c0       	rjmp	.+54     	; 0x280c <__floatsisf+0x6c>
    27d6:	6f 5f       	subi	r22, 0xFF	; 255
    27d8:	7f 4f       	sbci	r23, 0xFF	; 255
    27da:	8f 4f       	sbci	r24, 0xFF	; 255
    27dc:	9f 4f       	sbci	r25, 0xFF	; 255
    27de:	16 c0       	rjmp	.+44     	; 0x280c <__floatsisf+0x6c>
    27e0:	88 23       	and	r24, r24
    27e2:	11 f0       	breq	.+4      	; 0x27e8 <__floatsisf+0x48>
    27e4:	96 e9       	ldi	r25, 0x96	; 150
    27e6:	11 c0       	rjmp	.+34     	; 0x280a <__floatsisf+0x6a>
    27e8:	77 23       	and	r23, r23
    27ea:	21 f0       	breq	.+8      	; 0x27f4 <__floatsisf+0x54>
    27ec:	9e e8       	ldi	r25, 0x8E	; 142
    27ee:	87 2f       	mov	r24, r23
    27f0:	76 2f       	mov	r23, r22
    27f2:	05 c0       	rjmp	.+10     	; 0x27fe <__floatsisf+0x5e>
    27f4:	66 23       	and	r22, r22
    27f6:	71 f0       	breq	.+28     	; 0x2814 <__floatsisf+0x74>
    27f8:	96 e8       	ldi	r25, 0x86	; 134
    27fa:	86 2f       	mov	r24, r22
    27fc:	70 e0       	ldi	r23, 0x00	; 0
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	2a f0       	brmi	.+10     	; 0x280c <__floatsisf+0x6c>
    2802:	9a 95       	dec	r25
    2804:	66 0f       	add	r22, r22
    2806:	77 1f       	adc	r23, r23
    2808:	88 1f       	adc	r24, r24
    280a:	da f7       	brpl	.-10     	; 0x2802 <__floatsisf+0x62>
    280c:	88 0f       	add	r24, r24
    280e:	96 95       	lsr	r25
    2810:	87 95       	ror	r24
    2812:	97 f9       	bld	r25, 7
    2814:	08 95       	ret

00002816 <__fp_inf>:
    2816:	97 f9       	bld	r25, 7
    2818:	9f 67       	ori	r25, 0x7F	; 127
    281a:	80 e8       	ldi	r24, 0x80	; 128
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	08 95       	ret

00002822 <__fp_nan>:
    2822:	9f ef       	ldi	r25, 0xFF	; 255
    2824:	80 ec       	ldi	r24, 0xC0	; 192
    2826:	08 95       	ret

00002828 <__fp_pscA>:
    2828:	00 24       	eor	r0, r0
    282a:	0a 94       	dec	r0
    282c:	16 16       	cp	r1, r22
    282e:	17 06       	cpc	r1, r23
    2830:	18 06       	cpc	r1, r24
    2832:	09 06       	cpc	r0, r25
    2834:	08 95       	ret

00002836 <__fp_pscB>:
    2836:	00 24       	eor	r0, r0
    2838:	0a 94       	dec	r0
    283a:	12 16       	cp	r1, r18
    283c:	13 06       	cpc	r1, r19
    283e:	14 06       	cpc	r1, r20
    2840:	05 06       	cpc	r0, r21
    2842:	08 95       	ret

00002844 <__fp_round>:
    2844:	09 2e       	mov	r0, r25
    2846:	03 94       	inc	r0
    2848:	00 0c       	add	r0, r0
    284a:	11 f4       	brne	.+4      	; 0x2850 <__fp_round+0xc>
    284c:	88 23       	and	r24, r24
    284e:	52 f0       	brmi	.+20     	; 0x2864 <__fp_round+0x20>
    2850:	bb 0f       	add	r27, r27
    2852:	40 f4       	brcc	.+16     	; 0x2864 <__fp_round+0x20>
    2854:	bf 2b       	or	r27, r31
    2856:	11 f4       	brne	.+4      	; 0x285c <__fp_round+0x18>
    2858:	60 ff       	sbrs	r22, 0
    285a:	04 c0       	rjmp	.+8      	; 0x2864 <__fp_round+0x20>
    285c:	6f 5f       	subi	r22, 0xFF	; 255
    285e:	7f 4f       	sbci	r23, 0xFF	; 255
    2860:	8f 4f       	sbci	r24, 0xFF	; 255
    2862:	9f 4f       	sbci	r25, 0xFF	; 255
    2864:	08 95       	ret

00002866 <__fp_split3>:
    2866:	57 fd       	sbrc	r21, 7
    2868:	90 58       	subi	r25, 0x80	; 128
    286a:	44 0f       	add	r20, r20
    286c:	55 1f       	adc	r21, r21
    286e:	59 f0       	breq	.+22     	; 0x2886 <__fp_splitA+0x10>
    2870:	5f 3f       	cpi	r21, 0xFF	; 255
    2872:	71 f0       	breq	.+28     	; 0x2890 <__fp_splitA+0x1a>
    2874:	47 95       	ror	r20

00002876 <__fp_splitA>:
    2876:	88 0f       	add	r24, r24
    2878:	97 fb       	bst	r25, 7
    287a:	99 1f       	adc	r25, r25
    287c:	61 f0       	breq	.+24     	; 0x2896 <__fp_splitA+0x20>
    287e:	9f 3f       	cpi	r25, 0xFF	; 255
    2880:	79 f0       	breq	.+30     	; 0x28a0 <__fp_splitA+0x2a>
    2882:	87 95       	ror	r24
    2884:	08 95       	ret
    2886:	12 16       	cp	r1, r18
    2888:	13 06       	cpc	r1, r19
    288a:	14 06       	cpc	r1, r20
    288c:	55 1f       	adc	r21, r21
    288e:	f2 cf       	rjmp	.-28     	; 0x2874 <__fp_split3+0xe>
    2890:	46 95       	lsr	r20
    2892:	f1 df       	rcall	.-30     	; 0x2876 <__fp_splitA>
    2894:	08 c0       	rjmp	.+16     	; 0x28a6 <__fp_splitA+0x30>
    2896:	16 16       	cp	r1, r22
    2898:	17 06       	cpc	r1, r23
    289a:	18 06       	cpc	r1, r24
    289c:	99 1f       	adc	r25, r25
    289e:	f1 cf       	rjmp	.-30     	; 0x2882 <__fp_splitA+0xc>
    28a0:	86 95       	lsr	r24
    28a2:	71 05       	cpc	r23, r1
    28a4:	61 05       	cpc	r22, r1
    28a6:	08 94       	sec
    28a8:	08 95       	ret

000028aa <__fp_zero>:
    28aa:	e8 94       	clt

000028ac <__fp_szero>:
    28ac:	bb 27       	eor	r27, r27
    28ae:	66 27       	eor	r22, r22
    28b0:	77 27       	eor	r23, r23
    28b2:	cb 01       	movw	r24, r22
    28b4:	97 f9       	bld	r25, 7
    28b6:	08 95       	ret

000028b8 <__mulsf3>:
    28b8:	0e 94 6f 14 	call	0x28de	; 0x28de <__mulsf3x>
    28bc:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__fp_round>
    28c0:	0e 94 14 14 	call	0x2828	; 0x2828 <__fp_pscA>
    28c4:	38 f0       	brcs	.+14     	; 0x28d4 <__mulsf3+0x1c>
    28c6:	0e 94 1b 14 	call	0x2836	; 0x2836 <__fp_pscB>
    28ca:	20 f0       	brcs	.+8      	; 0x28d4 <__mulsf3+0x1c>
    28cc:	95 23       	and	r25, r21
    28ce:	11 f0       	breq	.+4      	; 0x28d4 <__mulsf3+0x1c>
    28d0:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__fp_inf>
    28d4:	0c 94 11 14 	jmp	0x2822	; 0x2822 <__fp_nan>
    28d8:	11 24       	eor	r1, r1
    28da:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__fp_szero>

000028de <__mulsf3x>:
    28de:	0e 94 33 14 	call	0x2866	; 0x2866 <__fp_split3>
    28e2:	70 f3       	brcs	.-36     	; 0x28c0 <__mulsf3+0x8>

000028e4 <__mulsf3_pse>:
    28e4:	95 9f       	mul	r25, r21
    28e6:	c1 f3       	breq	.-16     	; 0x28d8 <__mulsf3+0x20>
    28e8:	95 0f       	add	r25, r21
    28ea:	50 e0       	ldi	r21, 0x00	; 0
    28ec:	55 1f       	adc	r21, r21
    28ee:	62 9f       	mul	r22, r18
    28f0:	f0 01       	movw	r30, r0
    28f2:	72 9f       	mul	r23, r18
    28f4:	bb 27       	eor	r27, r27
    28f6:	f0 0d       	add	r31, r0
    28f8:	b1 1d       	adc	r27, r1
    28fa:	63 9f       	mul	r22, r19
    28fc:	aa 27       	eor	r26, r26
    28fe:	f0 0d       	add	r31, r0
    2900:	b1 1d       	adc	r27, r1
    2902:	aa 1f       	adc	r26, r26
    2904:	64 9f       	mul	r22, r20
    2906:	66 27       	eor	r22, r22
    2908:	b0 0d       	add	r27, r0
    290a:	a1 1d       	adc	r26, r1
    290c:	66 1f       	adc	r22, r22
    290e:	82 9f       	mul	r24, r18
    2910:	22 27       	eor	r18, r18
    2912:	b0 0d       	add	r27, r0
    2914:	a1 1d       	adc	r26, r1
    2916:	62 1f       	adc	r22, r18
    2918:	73 9f       	mul	r23, r19
    291a:	b0 0d       	add	r27, r0
    291c:	a1 1d       	adc	r26, r1
    291e:	62 1f       	adc	r22, r18
    2920:	83 9f       	mul	r24, r19
    2922:	a0 0d       	add	r26, r0
    2924:	61 1d       	adc	r22, r1
    2926:	22 1f       	adc	r18, r18
    2928:	74 9f       	mul	r23, r20
    292a:	33 27       	eor	r19, r19
    292c:	a0 0d       	add	r26, r0
    292e:	61 1d       	adc	r22, r1
    2930:	23 1f       	adc	r18, r19
    2932:	84 9f       	mul	r24, r20
    2934:	60 0d       	add	r22, r0
    2936:	21 1d       	adc	r18, r1
    2938:	82 2f       	mov	r24, r18
    293a:	76 2f       	mov	r23, r22
    293c:	6a 2f       	mov	r22, r26
    293e:	11 24       	eor	r1, r1
    2940:	9f 57       	subi	r25, 0x7F	; 127
    2942:	50 40       	sbci	r21, 0x00	; 0
    2944:	9a f0       	brmi	.+38     	; 0x296c <__mulsf3_pse+0x88>
    2946:	f1 f0       	breq	.+60     	; 0x2984 <__mulsf3_pse+0xa0>
    2948:	88 23       	and	r24, r24
    294a:	4a f0       	brmi	.+18     	; 0x295e <__mulsf3_pse+0x7a>
    294c:	ee 0f       	add	r30, r30
    294e:	ff 1f       	adc	r31, r31
    2950:	bb 1f       	adc	r27, r27
    2952:	66 1f       	adc	r22, r22
    2954:	77 1f       	adc	r23, r23
    2956:	88 1f       	adc	r24, r24
    2958:	91 50       	subi	r25, 0x01	; 1
    295a:	50 40       	sbci	r21, 0x00	; 0
    295c:	a9 f7       	brne	.-22     	; 0x2948 <__mulsf3_pse+0x64>
    295e:	9e 3f       	cpi	r25, 0xFE	; 254
    2960:	51 05       	cpc	r21, r1
    2962:	80 f0       	brcs	.+32     	; 0x2984 <__mulsf3_pse+0xa0>
    2964:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__fp_inf>
    2968:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__fp_szero>
    296c:	5f 3f       	cpi	r21, 0xFF	; 255
    296e:	e4 f3       	brlt	.-8      	; 0x2968 <__mulsf3_pse+0x84>
    2970:	98 3e       	cpi	r25, 0xE8	; 232
    2972:	d4 f3       	brlt	.-12     	; 0x2968 <__mulsf3_pse+0x84>
    2974:	86 95       	lsr	r24
    2976:	77 95       	ror	r23
    2978:	67 95       	ror	r22
    297a:	b7 95       	ror	r27
    297c:	f7 95       	ror	r31
    297e:	e7 95       	ror	r30
    2980:	9f 5f       	subi	r25, 0xFF	; 255
    2982:	c1 f7       	brne	.-16     	; 0x2974 <__mulsf3_pse+0x90>
    2984:	fe 2b       	or	r31, r30
    2986:	88 0f       	add	r24, r24
    2988:	91 1d       	adc	r25, r1
    298a:	96 95       	lsr	r25
    298c:	87 95       	ror	r24
    298e:	97 f9       	bld	r25, 7
    2990:	08 95       	ret

00002992 <vfprintf>:
    2992:	a0 e1       	ldi	r26, 0x10	; 16
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	ef ec       	ldi	r30, 0xCF	; 207
    2998:	f4 e1       	ldi	r31, 0x14	; 20
    299a:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__>
    299e:	7c 01       	movw	r14, r24
    29a0:	1b 01       	movw	r2, r22
    29a2:	6a 01       	movw	r12, r20
    29a4:	fc 01       	movw	r30, r24
    29a6:	17 82       	std	Z+7, r1	; 0x07
    29a8:	16 82       	std	Z+6, r1	; 0x06
    29aa:	83 81       	ldd	r24, Z+3	; 0x03
    29ac:	81 ff       	sbrs	r24, 1
    29ae:	44 c3       	rjmp	.+1672   	; 0x3038 <vfprintf+0x6a6>
    29b0:	9e 01       	movw	r18, r28
    29b2:	2f 5f       	subi	r18, 0xFF	; 255
    29b4:	3f 4f       	sbci	r19, 0xFF	; 255
    29b6:	39 01       	movw	r6, r18
    29b8:	f7 01       	movw	r30, r14
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	f1 01       	movw	r30, r2
    29be:	93 fd       	sbrc	r25, 3
    29c0:	85 91       	lpm	r24, Z+
    29c2:	93 ff       	sbrs	r25, 3
    29c4:	81 91       	ld	r24, Z+
    29c6:	1f 01       	movw	r2, r30
    29c8:	88 23       	and	r24, r24
    29ca:	09 f4       	brne	.+2      	; 0x29ce <vfprintf+0x3c>
    29cc:	31 c3       	rjmp	.+1634   	; 0x3030 <vfprintf+0x69e>
    29ce:	85 32       	cpi	r24, 0x25	; 37
    29d0:	39 f4       	brne	.+14     	; 0x29e0 <vfprintf+0x4e>
    29d2:	93 fd       	sbrc	r25, 3
    29d4:	85 91       	lpm	r24, Z+
    29d6:	93 ff       	sbrs	r25, 3
    29d8:	81 91       	ld	r24, Z+
    29da:	1f 01       	movw	r2, r30
    29dc:	85 32       	cpi	r24, 0x25	; 37
    29de:	39 f4       	brne	.+14     	; 0x29ee <vfprintf+0x5c>
    29e0:	b7 01       	movw	r22, r14
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    29e8:	56 01       	movw	r10, r12
    29ea:	65 01       	movw	r12, r10
    29ec:	e5 cf       	rjmp	.-54     	; 0x29b8 <vfprintf+0x26>
    29ee:	10 e0       	ldi	r17, 0x00	; 0
    29f0:	51 2c       	mov	r5, r1
    29f2:	91 2c       	mov	r9, r1
    29f4:	ff e1       	ldi	r31, 0x1F	; 31
    29f6:	f9 15       	cp	r31, r9
    29f8:	d8 f0       	brcs	.+54     	; 0x2a30 <vfprintf+0x9e>
    29fa:	8b 32       	cpi	r24, 0x2B	; 43
    29fc:	79 f0       	breq	.+30     	; 0x2a1c <vfprintf+0x8a>
    29fe:	38 f4       	brcc	.+14     	; 0x2a0e <vfprintf+0x7c>
    2a00:	80 32       	cpi	r24, 0x20	; 32
    2a02:	79 f0       	breq	.+30     	; 0x2a22 <vfprintf+0x90>
    2a04:	83 32       	cpi	r24, 0x23	; 35
    2a06:	a1 f4       	brne	.+40     	; 0x2a30 <vfprintf+0x9e>
    2a08:	f9 2d       	mov	r31, r9
    2a0a:	f0 61       	ori	r31, 0x10	; 16
    2a0c:	2e c0       	rjmp	.+92     	; 0x2a6a <vfprintf+0xd8>
    2a0e:	8d 32       	cpi	r24, 0x2D	; 45
    2a10:	61 f0       	breq	.+24     	; 0x2a2a <vfprintf+0x98>
    2a12:	80 33       	cpi	r24, 0x30	; 48
    2a14:	69 f4       	brne	.+26     	; 0x2a30 <vfprintf+0x9e>
    2a16:	29 2d       	mov	r18, r9
    2a18:	21 60       	ori	r18, 0x01	; 1
    2a1a:	2d c0       	rjmp	.+90     	; 0x2a76 <vfprintf+0xe4>
    2a1c:	39 2d       	mov	r19, r9
    2a1e:	32 60       	ori	r19, 0x02	; 2
    2a20:	93 2e       	mov	r9, r19
    2a22:	89 2d       	mov	r24, r9
    2a24:	84 60       	ori	r24, 0x04	; 4
    2a26:	98 2e       	mov	r9, r24
    2a28:	2a c0       	rjmp	.+84     	; 0x2a7e <vfprintf+0xec>
    2a2a:	e9 2d       	mov	r30, r9
    2a2c:	e8 60       	ori	r30, 0x08	; 8
    2a2e:	15 c0       	rjmp	.+42     	; 0x2a5a <vfprintf+0xc8>
    2a30:	97 fc       	sbrc	r9, 7
    2a32:	2d c0       	rjmp	.+90     	; 0x2a8e <vfprintf+0xfc>
    2a34:	20 ed       	ldi	r18, 0xD0	; 208
    2a36:	28 0f       	add	r18, r24
    2a38:	2a 30       	cpi	r18, 0x0A	; 10
    2a3a:	88 f4       	brcc	.+34     	; 0x2a5e <vfprintf+0xcc>
    2a3c:	96 fe       	sbrs	r9, 6
    2a3e:	06 c0       	rjmp	.+12     	; 0x2a4c <vfprintf+0xba>
    2a40:	3a e0       	ldi	r19, 0x0A	; 10
    2a42:	13 9f       	mul	r17, r19
    2a44:	20 0d       	add	r18, r0
    2a46:	11 24       	eor	r1, r1
    2a48:	12 2f       	mov	r17, r18
    2a4a:	19 c0       	rjmp	.+50     	; 0x2a7e <vfprintf+0xec>
    2a4c:	8a e0       	ldi	r24, 0x0A	; 10
    2a4e:	58 9e       	mul	r5, r24
    2a50:	20 0d       	add	r18, r0
    2a52:	11 24       	eor	r1, r1
    2a54:	52 2e       	mov	r5, r18
    2a56:	e9 2d       	mov	r30, r9
    2a58:	e0 62       	ori	r30, 0x20	; 32
    2a5a:	9e 2e       	mov	r9, r30
    2a5c:	10 c0       	rjmp	.+32     	; 0x2a7e <vfprintf+0xec>
    2a5e:	8e 32       	cpi	r24, 0x2E	; 46
    2a60:	31 f4       	brne	.+12     	; 0x2a6e <vfprintf+0xdc>
    2a62:	96 fc       	sbrc	r9, 6
    2a64:	e5 c2       	rjmp	.+1482   	; 0x3030 <vfprintf+0x69e>
    2a66:	f9 2d       	mov	r31, r9
    2a68:	f0 64       	ori	r31, 0x40	; 64
    2a6a:	9f 2e       	mov	r9, r31
    2a6c:	08 c0       	rjmp	.+16     	; 0x2a7e <vfprintf+0xec>
    2a6e:	8c 36       	cpi	r24, 0x6C	; 108
    2a70:	21 f4       	brne	.+8      	; 0x2a7a <vfprintf+0xe8>
    2a72:	29 2d       	mov	r18, r9
    2a74:	20 68       	ori	r18, 0x80	; 128
    2a76:	92 2e       	mov	r9, r18
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <vfprintf+0xec>
    2a7a:	88 36       	cpi	r24, 0x68	; 104
    2a7c:	41 f4       	brne	.+16     	; 0x2a8e <vfprintf+0xfc>
    2a7e:	f1 01       	movw	r30, r2
    2a80:	93 fd       	sbrc	r25, 3
    2a82:	85 91       	lpm	r24, Z+
    2a84:	93 ff       	sbrs	r25, 3
    2a86:	81 91       	ld	r24, Z+
    2a88:	1f 01       	movw	r2, r30
    2a8a:	81 11       	cpse	r24, r1
    2a8c:	b3 cf       	rjmp	.-154    	; 0x29f4 <vfprintf+0x62>
    2a8e:	9b eb       	ldi	r25, 0xBB	; 187
    2a90:	98 0f       	add	r25, r24
    2a92:	93 30       	cpi	r25, 0x03	; 3
    2a94:	20 f4       	brcc	.+8      	; 0x2a9e <vfprintf+0x10c>
    2a96:	99 2d       	mov	r25, r9
    2a98:	90 61       	ori	r25, 0x10	; 16
    2a9a:	80 5e       	subi	r24, 0xE0	; 224
    2a9c:	07 c0       	rjmp	.+14     	; 0x2aac <vfprintf+0x11a>
    2a9e:	9b e9       	ldi	r25, 0x9B	; 155
    2aa0:	98 0f       	add	r25, r24
    2aa2:	93 30       	cpi	r25, 0x03	; 3
    2aa4:	08 f0       	brcs	.+2      	; 0x2aa8 <vfprintf+0x116>
    2aa6:	66 c1       	rjmp	.+716    	; 0x2d74 <vfprintf+0x3e2>
    2aa8:	99 2d       	mov	r25, r9
    2aaa:	9f 7e       	andi	r25, 0xEF	; 239
    2aac:	96 ff       	sbrs	r25, 6
    2aae:	16 e0       	ldi	r17, 0x06	; 6
    2ab0:	9f 73       	andi	r25, 0x3F	; 63
    2ab2:	99 2e       	mov	r9, r25
    2ab4:	85 36       	cpi	r24, 0x65	; 101
    2ab6:	19 f4       	brne	.+6      	; 0x2abe <vfprintf+0x12c>
    2ab8:	90 64       	ori	r25, 0x40	; 64
    2aba:	99 2e       	mov	r9, r25
    2abc:	08 c0       	rjmp	.+16     	; 0x2ace <vfprintf+0x13c>
    2abe:	86 36       	cpi	r24, 0x66	; 102
    2ac0:	21 f4       	brne	.+8      	; 0x2aca <vfprintf+0x138>
    2ac2:	39 2f       	mov	r19, r25
    2ac4:	30 68       	ori	r19, 0x80	; 128
    2ac6:	93 2e       	mov	r9, r19
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <vfprintf+0x13c>
    2aca:	11 11       	cpse	r17, r1
    2acc:	11 50       	subi	r17, 0x01	; 1
    2ace:	97 fe       	sbrs	r9, 7
    2ad0:	07 c0       	rjmp	.+14     	; 0x2ae0 <vfprintf+0x14e>
    2ad2:	1c 33       	cpi	r17, 0x3C	; 60
    2ad4:	50 f4       	brcc	.+20     	; 0x2aea <vfprintf+0x158>
    2ad6:	44 24       	eor	r4, r4
    2ad8:	43 94       	inc	r4
    2ada:	41 0e       	add	r4, r17
    2adc:	27 e0       	ldi	r18, 0x07	; 7
    2ade:	0b c0       	rjmp	.+22     	; 0x2af6 <vfprintf+0x164>
    2ae0:	18 30       	cpi	r17, 0x08	; 8
    2ae2:	38 f0       	brcs	.+14     	; 0x2af2 <vfprintf+0x160>
    2ae4:	27 e0       	ldi	r18, 0x07	; 7
    2ae6:	17 e0       	ldi	r17, 0x07	; 7
    2ae8:	05 c0       	rjmp	.+10     	; 0x2af4 <vfprintf+0x162>
    2aea:	27 e0       	ldi	r18, 0x07	; 7
    2aec:	9c e3       	ldi	r25, 0x3C	; 60
    2aee:	49 2e       	mov	r4, r25
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <vfprintf+0x164>
    2af2:	21 2f       	mov	r18, r17
    2af4:	41 2c       	mov	r4, r1
    2af6:	56 01       	movw	r10, r12
    2af8:	84 e0       	ldi	r24, 0x04	; 4
    2afa:	a8 0e       	add	r10, r24
    2afc:	b1 1c       	adc	r11, r1
    2afe:	f6 01       	movw	r30, r12
    2b00:	60 81       	ld	r22, Z
    2b02:	71 81       	ldd	r23, Z+1	; 0x01
    2b04:	82 81       	ldd	r24, Z+2	; 0x02
    2b06:	93 81       	ldd	r25, Z+3	; 0x03
    2b08:	04 2d       	mov	r16, r4
    2b0a:	a3 01       	movw	r20, r6
    2b0c:	0e 94 b9 18 	call	0x3172	; 0x3172 <__ftoa_engine>
    2b10:	6c 01       	movw	r12, r24
    2b12:	f9 81       	ldd	r31, Y+1	; 0x01
    2b14:	fc 87       	std	Y+12, r31	; 0x0c
    2b16:	f0 ff       	sbrs	r31, 0
    2b18:	02 c0       	rjmp	.+4      	; 0x2b1e <vfprintf+0x18c>
    2b1a:	f3 ff       	sbrs	r31, 3
    2b1c:	06 c0       	rjmp	.+12     	; 0x2b2a <vfprintf+0x198>
    2b1e:	91 fc       	sbrc	r9, 1
    2b20:	06 c0       	rjmp	.+12     	; 0x2b2e <vfprintf+0x19c>
    2b22:	92 fe       	sbrs	r9, 2
    2b24:	06 c0       	rjmp	.+12     	; 0x2b32 <vfprintf+0x1a0>
    2b26:	00 e2       	ldi	r16, 0x20	; 32
    2b28:	05 c0       	rjmp	.+10     	; 0x2b34 <vfprintf+0x1a2>
    2b2a:	0d e2       	ldi	r16, 0x2D	; 45
    2b2c:	03 c0       	rjmp	.+6      	; 0x2b34 <vfprintf+0x1a2>
    2b2e:	0b e2       	ldi	r16, 0x2B	; 43
    2b30:	01 c0       	rjmp	.+2      	; 0x2b34 <vfprintf+0x1a2>
    2b32:	00 e0       	ldi	r16, 0x00	; 0
    2b34:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b36:	8c 70       	andi	r24, 0x0C	; 12
    2b38:	19 f0       	breq	.+6      	; 0x2b40 <vfprintf+0x1ae>
    2b3a:	01 11       	cpse	r16, r1
    2b3c:	5a c2       	rjmp	.+1204   	; 0x2ff2 <vfprintf+0x660>
    2b3e:	9b c2       	rjmp	.+1334   	; 0x3076 <vfprintf+0x6e4>
    2b40:	97 fe       	sbrs	r9, 7
    2b42:	10 c0       	rjmp	.+32     	; 0x2b64 <vfprintf+0x1d2>
    2b44:	4c 0c       	add	r4, r12
    2b46:	fc 85       	ldd	r31, Y+12	; 0x0c
    2b48:	f4 ff       	sbrs	r31, 4
    2b4a:	04 c0       	rjmp	.+8      	; 0x2b54 <vfprintf+0x1c2>
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	81 33       	cpi	r24, 0x31	; 49
    2b50:	09 f4       	brne	.+2      	; 0x2b54 <vfprintf+0x1c2>
    2b52:	4a 94       	dec	r4
    2b54:	14 14       	cp	r1, r4
    2b56:	74 f5       	brge	.+92     	; 0x2bb4 <vfprintf+0x222>
    2b58:	28 e0       	ldi	r18, 0x08	; 8
    2b5a:	24 15       	cp	r18, r4
    2b5c:	78 f5       	brcc	.+94     	; 0x2bbc <vfprintf+0x22a>
    2b5e:	88 e0       	ldi	r24, 0x08	; 8
    2b60:	48 2e       	mov	r4, r24
    2b62:	2c c0       	rjmp	.+88     	; 0x2bbc <vfprintf+0x22a>
    2b64:	96 fc       	sbrc	r9, 6
    2b66:	2a c0       	rjmp	.+84     	; 0x2bbc <vfprintf+0x22a>
    2b68:	81 2f       	mov	r24, r17
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	8c 15       	cp	r24, r12
    2b6e:	9d 05       	cpc	r25, r13
    2b70:	9c f0       	brlt	.+38     	; 0x2b98 <vfprintf+0x206>
    2b72:	3c ef       	ldi	r19, 0xFC	; 252
    2b74:	c3 16       	cp	r12, r19
    2b76:	3f ef       	ldi	r19, 0xFF	; 255
    2b78:	d3 06       	cpc	r13, r19
    2b7a:	74 f0       	brlt	.+28     	; 0x2b98 <vfprintf+0x206>
    2b7c:	89 2d       	mov	r24, r9
    2b7e:	80 68       	ori	r24, 0x80	; 128
    2b80:	98 2e       	mov	r9, r24
    2b82:	0a c0       	rjmp	.+20     	; 0x2b98 <vfprintf+0x206>
    2b84:	e2 e0       	ldi	r30, 0x02	; 2
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	ec 0f       	add	r30, r28
    2b8a:	fd 1f       	adc	r31, r29
    2b8c:	e1 0f       	add	r30, r17
    2b8e:	f1 1d       	adc	r31, r1
    2b90:	80 81       	ld	r24, Z
    2b92:	80 33       	cpi	r24, 0x30	; 48
    2b94:	19 f4       	brne	.+6      	; 0x2b9c <vfprintf+0x20a>
    2b96:	11 50       	subi	r17, 0x01	; 1
    2b98:	11 11       	cpse	r17, r1
    2b9a:	f4 cf       	rjmp	.-24     	; 0x2b84 <vfprintf+0x1f2>
    2b9c:	97 fe       	sbrs	r9, 7
    2b9e:	0e c0       	rjmp	.+28     	; 0x2bbc <vfprintf+0x22a>
    2ba0:	44 24       	eor	r4, r4
    2ba2:	43 94       	inc	r4
    2ba4:	41 0e       	add	r4, r17
    2ba6:	81 2f       	mov	r24, r17
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	c8 16       	cp	r12, r24
    2bac:	d9 06       	cpc	r13, r25
    2bae:	2c f4       	brge	.+10     	; 0x2bba <vfprintf+0x228>
    2bb0:	1c 19       	sub	r17, r12
    2bb2:	04 c0       	rjmp	.+8      	; 0x2bbc <vfprintf+0x22a>
    2bb4:	44 24       	eor	r4, r4
    2bb6:	43 94       	inc	r4
    2bb8:	01 c0       	rjmp	.+2      	; 0x2bbc <vfprintf+0x22a>
    2bba:	10 e0       	ldi	r17, 0x00	; 0
    2bbc:	97 fe       	sbrs	r9, 7
    2bbe:	06 c0       	rjmp	.+12     	; 0x2bcc <vfprintf+0x23a>
    2bc0:	1c 14       	cp	r1, r12
    2bc2:	1d 04       	cpc	r1, r13
    2bc4:	34 f4       	brge	.+12     	; 0x2bd2 <vfprintf+0x240>
    2bc6:	c6 01       	movw	r24, r12
    2bc8:	01 96       	adiw	r24, 0x01	; 1
    2bca:	05 c0       	rjmp	.+10     	; 0x2bd6 <vfprintf+0x244>
    2bcc:	85 e0       	ldi	r24, 0x05	; 5
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	02 c0       	rjmp	.+4      	; 0x2bd6 <vfprintf+0x244>
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	01 11       	cpse	r16, r1
    2bd8:	01 96       	adiw	r24, 0x01	; 1
    2bda:	11 23       	and	r17, r17
    2bdc:	31 f0       	breq	.+12     	; 0x2bea <vfprintf+0x258>
    2bde:	21 2f       	mov	r18, r17
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	2f 5f       	subi	r18, 0xFF	; 255
    2be4:	3f 4f       	sbci	r19, 0xFF	; 255
    2be6:	82 0f       	add	r24, r18
    2be8:	93 1f       	adc	r25, r19
    2bea:	25 2d       	mov	r18, r5
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	82 17       	cp	r24, r18
    2bf0:	93 07       	cpc	r25, r19
    2bf2:	14 f4       	brge	.+4      	; 0x2bf8 <vfprintf+0x266>
    2bf4:	58 1a       	sub	r5, r24
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <vfprintf+0x268>
    2bf8:	51 2c       	mov	r5, r1
    2bfa:	89 2d       	mov	r24, r9
    2bfc:	89 70       	andi	r24, 0x09	; 9
    2bfe:	49 f4       	brne	.+18     	; 0x2c12 <vfprintf+0x280>
    2c00:	55 20       	and	r5, r5
    2c02:	39 f0       	breq	.+14     	; 0x2c12 <vfprintf+0x280>
    2c04:	b7 01       	movw	r22, r14
    2c06:	80 e2       	ldi	r24, 0x20	; 32
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2c0e:	5a 94       	dec	r5
    2c10:	f7 cf       	rjmp	.-18     	; 0x2c00 <vfprintf+0x26e>
    2c12:	00 23       	and	r16, r16
    2c14:	29 f0       	breq	.+10     	; 0x2c20 <vfprintf+0x28e>
    2c16:	b7 01       	movw	r22, r14
    2c18:	80 2f       	mov	r24, r16
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2c20:	93 fc       	sbrc	r9, 3
    2c22:	09 c0       	rjmp	.+18     	; 0x2c36 <vfprintf+0x2a4>
    2c24:	55 20       	and	r5, r5
    2c26:	39 f0       	breq	.+14     	; 0x2c36 <vfprintf+0x2a4>
    2c28:	b7 01       	movw	r22, r14
    2c2a:	80 e3       	ldi	r24, 0x30	; 48
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2c32:	5a 94       	dec	r5
    2c34:	f7 cf       	rjmp	.-18     	; 0x2c24 <vfprintf+0x292>
    2c36:	97 fe       	sbrs	r9, 7
    2c38:	4c c0       	rjmp	.+152    	; 0x2cd2 <vfprintf+0x340>
    2c3a:	46 01       	movw	r8, r12
    2c3c:	d7 fe       	sbrs	r13, 7
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <vfprintf+0x2b2>
    2c40:	81 2c       	mov	r8, r1
    2c42:	91 2c       	mov	r9, r1
    2c44:	c6 01       	movw	r24, r12
    2c46:	88 19       	sub	r24, r8
    2c48:	99 09       	sbc	r25, r9
    2c4a:	f3 01       	movw	r30, r6
    2c4c:	e8 0f       	add	r30, r24
    2c4e:	f9 1f       	adc	r31, r25
    2c50:	fe 87       	std	Y+14, r31	; 0x0e
    2c52:	ed 87       	std	Y+13, r30	; 0x0d
    2c54:	96 01       	movw	r18, r12
    2c56:	24 19       	sub	r18, r4
    2c58:	31 09       	sbc	r19, r1
    2c5a:	38 8b       	std	Y+16, r19	; 0x10
    2c5c:	2f 87       	std	Y+15, r18	; 0x0f
    2c5e:	01 2f       	mov	r16, r17
    2c60:	10 e0       	ldi	r17, 0x00	; 0
    2c62:	11 95       	neg	r17
    2c64:	01 95       	neg	r16
    2c66:	11 09       	sbc	r17, r1
    2c68:	3f ef       	ldi	r19, 0xFF	; 255
    2c6a:	83 16       	cp	r8, r19
    2c6c:	93 06       	cpc	r9, r19
    2c6e:	29 f4       	brne	.+10     	; 0x2c7a <vfprintf+0x2e8>
    2c70:	b7 01       	movw	r22, r14
    2c72:	8e e2       	ldi	r24, 0x2E	; 46
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2c7a:	c8 14       	cp	r12, r8
    2c7c:	d9 04       	cpc	r13, r9
    2c7e:	4c f0       	brlt	.+18     	; 0x2c92 <vfprintf+0x300>
    2c80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c82:	98 89       	ldd	r25, Y+16	; 0x10
    2c84:	88 15       	cp	r24, r8
    2c86:	99 05       	cpc	r25, r9
    2c88:	24 f4       	brge	.+8      	; 0x2c92 <vfprintf+0x300>
    2c8a:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c8c:	fe 85       	ldd	r31, Y+14	; 0x0e
    2c8e:	81 81       	ldd	r24, Z+1	; 0x01
    2c90:	01 c0       	rjmp	.+2      	; 0x2c94 <vfprintf+0x302>
    2c92:	80 e3       	ldi	r24, 0x30	; 48
    2c94:	f1 e0       	ldi	r31, 0x01	; 1
    2c96:	8f 1a       	sub	r8, r31
    2c98:	91 08       	sbc	r9, r1
    2c9a:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c9c:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c9e:	2f 5f       	subi	r18, 0xFF	; 255
    2ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca2:	3e 87       	std	Y+14, r19	; 0x0e
    2ca4:	2d 87       	std	Y+13, r18	; 0x0d
    2ca6:	80 16       	cp	r8, r16
    2ca8:	91 06       	cpc	r9, r17
    2caa:	2c f0       	brlt	.+10     	; 0x2cb6 <vfprintf+0x324>
    2cac:	b7 01       	movw	r22, r14
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2cb4:	d9 cf       	rjmp	.-78     	; 0x2c68 <vfprintf+0x2d6>
    2cb6:	c8 14       	cp	r12, r8
    2cb8:	d9 04       	cpc	r13, r9
    2cba:	41 f4       	brne	.+16     	; 0x2ccc <vfprintf+0x33a>
    2cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbe:	96 33       	cpi	r25, 0x36	; 54
    2cc0:	20 f4       	brcc	.+8      	; 0x2cca <vfprintf+0x338>
    2cc2:	95 33       	cpi	r25, 0x35	; 53
    2cc4:	19 f4       	brne	.+6      	; 0x2ccc <vfprintf+0x33a>
    2cc6:	3c 85       	ldd	r19, Y+12	; 0x0c
    2cc8:	34 ff       	sbrs	r19, 4
    2cca:	81 e3       	ldi	r24, 0x31	; 49
    2ccc:	b7 01       	movw	r22, r14
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	4e c0       	rjmp	.+156    	; 0x2d6e <vfprintf+0x3dc>
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd4:	81 33       	cpi	r24, 0x31	; 49
    2cd6:	19 f0       	breq	.+6      	; 0x2cde <vfprintf+0x34c>
    2cd8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cda:	9f 7e       	andi	r25, 0xEF	; 239
    2cdc:	9c 87       	std	Y+12, r25	; 0x0c
    2cde:	b7 01       	movw	r22, r14
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2ce6:	11 11       	cpse	r17, r1
    2ce8:	05 c0       	rjmp	.+10     	; 0x2cf4 <vfprintf+0x362>
    2cea:	94 fc       	sbrc	r9, 4
    2cec:	18 c0       	rjmp	.+48     	; 0x2d1e <vfprintf+0x38c>
    2cee:	85 e6       	ldi	r24, 0x65	; 101
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	17 c0       	rjmp	.+46     	; 0x2d22 <vfprintf+0x390>
    2cf4:	b7 01       	movw	r22, r14
    2cf6:	8e e2       	ldi	r24, 0x2E	; 46
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2cfe:	1e 5f       	subi	r17, 0xFE	; 254
    2d00:	82 e0       	ldi	r24, 0x02	; 2
    2d02:	01 e0       	ldi	r16, 0x01	; 1
    2d04:	08 0f       	add	r16, r24
    2d06:	f3 01       	movw	r30, r6
    2d08:	e8 0f       	add	r30, r24
    2d0a:	f1 1d       	adc	r31, r1
    2d0c:	80 81       	ld	r24, Z
    2d0e:	b7 01       	movw	r22, r14
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2d16:	80 2f       	mov	r24, r16
    2d18:	01 13       	cpse	r16, r17
    2d1a:	f3 cf       	rjmp	.-26     	; 0x2d02 <vfprintf+0x370>
    2d1c:	e6 cf       	rjmp	.-52     	; 0x2cea <vfprintf+0x358>
    2d1e:	85 e4       	ldi	r24, 0x45	; 69
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	b7 01       	movw	r22, r14
    2d24:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2d28:	d7 fc       	sbrc	r13, 7
    2d2a:	06 c0       	rjmp	.+12     	; 0x2d38 <vfprintf+0x3a6>
    2d2c:	c1 14       	cp	r12, r1
    2d2e:	d1 04       	cpc	r13, r1
    2d30:	41 f4       	brne	.+16     	; 0x2d42 <vfprintf+0x3b0>
    2d32:	ec 85       	ldd	r30, Y+12	; 0x0c
    2d34:	e4 ff       	sbrs	r30, 4
    2d36:	05 c0       	rjmp	.+10     	; 0x2d42 <vfprintf+0x3b0>
    2d38:	d1 94       	neg	r13
    2d3a:	c1 94       	neg	r12
    2d3c:	d1 08       	sbc	r13, r1
    2d3e:	8d e2       	ldi	r24, 0x2D	; 45
    2d40:	01 c0       	rjmp	.+2      	; 0x2d44 <vfprintf+0x3b2>
    2d42:	8b e2       	ldi	r24, 0x2B	; 43
    2d44:	b7 01       	movw	r22, r14
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2d4c:	80 e3       	ldi	r24, 0x30	; 48
    2d4e:	2a e0       	ldi	r18, 0x0A	; 10
    2d50:	c2 16       	cp	r12, r18
    2d52:	d1 04       	cpc	r13, r1
    2d54:	2c f0       	brlt	.+10     	; 0x2d60 <vfprintf+0x3ce>
    2d56:	8f 5f       	subi	r24, 0xFF	; 255
    2d58:	fa e0       	ldi	r31, 0x0A	; 10
    2d5a:	cf 1a       	sub	r12, r31
    2d5c:	d1 08       	sbc	r13, r1
    2d5e:	f7 cf       	rjmp	.-18     	; 0x2d4e <vfprintf+0x3bc>
    2d60:	b7 01       	movw	r22, r14
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2d68:	b7 01       	movw	r22, r14
    2d6a:	c6 01       	movw	r24, r12
    2d6c:	c0 96       	adiw	r24, 0x30	; 48
    2d6e:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2d72:	54 c1       	rjmp	.+680    	; 0x301c <vfprintf+0x68a>
    2d74:	83 36       	cpi	r24, 0x63	; 99
    2d76:	31 f0       	breq	.+12     	; 0x2d84 <vfprintf+0x3f2>
    2d78:	83 37       	cpi	r24, 0x73	; 115
    2d7a:	79 f0       	breq	.+30     	; 0x2d9a <vfprintf+0x408>
    2d7c:	83 35       	cpi	r24, 0x53	; 83
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <vfprintf+0x3f0>
    2d80:	56 c0       	rjmp	.+172    	; 0x2e2e <vfprintf+0x49c>
    2d82:	20 c0       	rjmp	.+64     	; 0x2dc4 <vfprintf+0x432>
    2d84:	56 01       	movw	r10, r12
    2d86:	32 e0       	ldi	r19, 0x02	; 2
    2d88:	a3 0e       	add	r10, r19
    2d8a:	b1 1c       	adc	r11, r1
    2d8c:	f6 01       	movw	r30, r12
    2d8e:	80 81       	ld	r24, Z
    2d90:	89 83       	std	Y+1, r24	; 0x01
    2d92:	01 e0       	ldi	r16, 0x01	; 1
    2d94:	10 e0       	ldi	r17, 0x00	; 0
    2d96:	63 01       	movw	r12, r6
    2d98:	12 c0       	rjmp	.+36     	; 0x2dbe <vfprintf+0x42c>
    2d9a:	56 01       	movw	r10, r12
    2d9c:	f2 e0       	ldi	r31, 0x02	; 2
    2d9e:	af 0e       	add	r10, r31
    2da0:	b1 1c       	adc	r11, r1
    2da2:	f6 01       	movw	r30, r12
    2da4:	c0 80       	ld	r12, Z
    2da6:	d1 80       	ldd	r13, Z+1	; 0x01
    2da8:	96 fe       	sbrs	r9, 6
    2daa:	03 c0       	rjmp	.+6      	; 0x2db2 <vfprintf+0x420>
    2dac:	61 2f       	mov	r22, r17
    2dae:	70 e0       	ldi	r23, 0x00	; 0
    2db0:	02 c0       	rjmp	.+4      	; 0x2db6 <vfprintf+0x424>
    2db2:	6f ef       	ldi	r22, 0xFF	; 255
    2db4:	7f ef       	ldi	r23, 0xFF	; 255
    2db6:	c6 01       	movw	r24, r12
    2db8:	0e 94 ae 19 	call	0x335c	; 0x335c <strnlen>
    2dbc:	8c 01       	movw	r16, r24
    2dbe:	f9 2d       	mov	r31, r9
    2dc0:	ff 77       	andi	r31, 0x7F	; 127
    2dc2:	14 c0       	rjmp	.+40     	; 0x2dec <vfprintf+0x45a>
    2dc4:	56 01       	movw	r10, r12
    2dc6:	22 e0       	ldi	r18, 0x02	; 2
    2dc8:	a2 0e       	add	r10, r18
    2dca:	b1 1c       	adc	r11, r1
    2dcc:	f6 01       	movw	r30, r12
    2dce:	c0 80       	ld	r12, Z
    2dd0:	d1 80       	ldd	r13, Z+1	; 0x01
    2dd2:	96 fe       	sbrs	r9, 6
    2dd4:	03 c0       	rjmp	.+6      	; 0x2ddc <vfprintf+0x44a>
    2dd6:	61 2f       	mov	r22, r17
    2dd8:	70 e0       	ldi	r23, 0x00	; 0
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <vfprintf+0x44e>
    2ddc:	6f ef       	ldi	r22, 0xFF	; 255
    2dde:	7f ef       	ldi	r23, 0xFF	; 255
    2de0:	c6 01       	movw	r24, r12
    2de2:	0e 94 91 19 	call	0x3322	; 0x3322 <strnlen_P>
    2de6:	8c 01       	movw	r16, r24
    2de8:	f9 2d       	mov	r31, r9
    2dea:	f0 68       	ori	r31, 0x80	; 128
    2dec:	9f 2e       	mov	r9, r31
    2dee:	f3 fd       	sbrc	r31, 3
    2df0:	1a c0       	rjmp	.+52     	; 0x2e26 <vfprintf+0x494>
    2df2:	85 2d       	mov	r24, r5
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	08 17       	cp	r16, r24
    2df8:	19 07       	cpc	r17, r25
    2dfa:	a8 f4       	brcc	.+42     	; 0x2e26 <vfprintf+0x494>
    2dfc:	b7 01       	movw	r22, r14
    2dfe:	80 e2       	ldi	r24, 0x20	; 32
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2e06:	5a 94       	dec	r5
    2e08:	f4 cf       	rjmp	.-24     	; 0x2df2 <vfprintf+0x460>
    2e0a:	f6 01       	movw	r30, r12
    2e0c:	97 fc       	sbrc	r9, 7
    2e0e:	85 91       	lpm	r24, Z+
    2e10:	97 fe       	sbrs	r9, 7
    2e12:	81 91       	ld	r24, Z+
    2e14:	6f 01       	movw	r12, r30
    2e16:	b7 01       	movw	r22, r14
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2e1e:	51 10       	cpse	r5, r1
    2e20:	5a 94       	dec	r5
    2e22:	01 50       	subi	r16, 0x01	; 1
    2e24:	11 09       	sbc	r17, r1
    2e26:	01 15       	cp	r16, r1
    2e28:	11 05       	cpc	r17, r1
    2e2a:	79 f7       	brne	.-34     	; 0x2e0a <vfprintf+0x478>
    2e2c:	f7 c0       	rjmp	.+494    	; 0x301c <vfprintf+0x68a>
    2e2e:	84 36       	cpi	r24, 0x64	; 100
    2e30:	11 f0       	breq	.+4      	; 0x2e36 <vfprintf+0x4a4>
    2e32:	89 36       	cpi	r24, 0x69	; 105
    2e34:	61 f5       	brne	.+88     	; 0x2e8e <vfprintf+0x4fc>
    2e36:	56 01       	movw	r10, r12
    2e38:	97 fe       	sbrs	r9, 7
    2e3a:	09 c0       	rjmp	.+18     	; 0x2e4e <vfprintf+0x4bc>
    2e3c:	24 e0       	ldi	r18, 0x04	; 4
    2e3e:	a2 0e       	add	r10, r18
    2e40:	b1 1c       	adc	r11, r1
    2e42:	f6 01       	movw	r30, r12
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	0a c0       	rjmp	.+20     	; 0x2e62 <vfprintf+0x4d0>
    2e4e:	f2 e0       	ldi	r31, 0x02	; 2
    2e50:	af 0e       	add	r10, r31
    2e52:	b1 1c       	adc	r11, r1
    2e54:	f6 01       	movw	r30, r12
    2e56:	60 81       	ld	r22, Z
    2e58:	71 81       	ldd	r23, Z+1	; 0x01
    2e5a:	07 2e       	mov	r0, r23
    2e5c:	00 0c       	add	r0, r0
    2e5e:	88 0b       	sbc	r24, r24
    2e60:	99 0b       	sbc	r25, r25
    2e62:	f9 2d       	mov	r31, r9
    2e64:	ff 76       	andi	r31, 0x6F	; 111
    2e66:	9f 2e       	mov	r9, r31
    2e68:	97 ff       	sbrs	r25, 7
    2e6a:	09 c0       	rjmp	.+18     	; 0x2e7e <vfprintf+0x4ec>
    2e6c:	90 95       	com	r25
    2e6e:	80 95       	com	r24
    2e70:	70 95       	com	r23
    2e72:	61 95       	neg	r22
    2e74:	7f 4f       	sbci	r23, 0xFF	; 255
    2e76:	8f 4f       	sbci	r24, 0xFF	; 255
    2e78:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7a:	f0 68       	ori	r31, 0x80	; 128
    2e7c:	9f 2e       	mov	r9, r31
    2e7e:	2a e0       	ldi	r18, 0x0A	; 10
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	a3 01       	movw	r20, r6
    2e84:	0e 94 30 1a 	call	0x3460	; 0x3460 <__ultoa_invert>
    2e88:	c8 2e       	mov	r12, r24
    2e8a:	c6 18       	sub	r12, r6
    2e8c:	3f c0       	rjmp	.+126    	; 0x2f0c <vfprintf+0x57a>
    2e8e:	09 2d       	mov	r16, r9
    2e90:	85 37       	cpi	r24, 0x75	; 117
    2e92:	21 f4       	brne	.+8      	; 0x2e9c <vfprintf+0x50a>
    2e94:	0f 7e       	andi	r16, 0xEF	; 239
    2e96:	2a e0       	ldi	r18, 0x0A	; 10
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	1d c0       	rjmp	.+58     	; 0x2ed6 <vfprintf+0x544>
    2e9c:	09 7f       	andi	r16, 0xF9	; 249
    2e9e:	8f 36       	cpi	r24, 0x6F	; 111
    2ea0:	91 f0       	breq	.+36     	; 0x2ec6 <vfprintf+0x534>
    2ea2:	18 f4       	brcc	.+6      	; 0x2eaa <vfprintf+0x518>
    2ea4:	88 35       	cpi	r24, 0x58	; 88
    2ea6:	59 f0       	breq	.+22     	; 0x2ebe <vfprintf+0x52c>
    2ea8:	c3 c0       	rjmp	.+390    	; 0x3030 <vfprintf+0x69e>
    2eaa:	80 37       	cpi	r24, 0x70	; 112
    2eac:	19 f0       	breq	.+6      	; 0x2eb4 <vfprintf+0x522>
    2eae:	88 37       	cpi	r24, 0x78	; 120
    2eb0:	11 f0       	breq	.+4      	; 0x2eb6 <vfprintf+0x524>
    2eb2:	be c0       	rjmp	.+380    	; 0x3030 <vfprintf+0x69e>
    2eb4:	00 61       	ori	r16, 0x10	; 16
    2eb6:	04 ff       	sbrs	r16, 4
    2eb8:	09 c0       	rjmp	.+18     	; 0x2ecc <vfprintf+0x53a>
    2eba:	04 60       	ori	r16, 0x04	; 4
    2ebc:	07 c0       	rjmp	.+14     	; 0x2ecc <vfprintf+0x53a>
    2ebe:	94 fe       	sbrs	r9, 4
    2ec0:	08 c0       	rjmp	.+16     	; 0x2ed2 <vfprintf+0x540>
    2ec2:	06 60       	ori	r16, 0x06	; 6
    2ec4:	06 c0       	rjmp	.+12     	; 0x2ed2 <vfprintf+0x540>
    2ec6:	28 e0       	ldi	r18, 0x08	; 8
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	05 c0       	rjmp	.+10     	; 0x2ed6 <vfprintf+0x544>
    2ecc:	20 e1       	ldi	r18, 0x10	; 16
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	02 c0       	rjmp	.+4      	; 0x2ed6 <vfprintf+0x544>
    2ed2:	20 e1       	ldi	r18, 0x10	; 16
    2ed4:	32 e0       	ldi	r19, 0x02	; 2
    2ed6:	56 01       	movw	r10, r12
    2ed8:	07 ff       	sbrs	r16, 7
    2eda:	09 c0       	rjmp	.+18     	; 0x2eee <vfprintf+0x55c>
    2edc:	84 e0       	ldi	r24, 0x04	; 4
    2ede:	a8 0e       	add	r10, r24
    2ee0:	b1 1c       	adc	r11, r1
    2ee2:	f6 01       	movw	r30, r12
    2ee4:	60 81       	ld	r22, Z
    2ee6:	71 81       	ldd	r23, Z+1	; 0x01
    2ee8:	82 81       	ldd	r24, Z+2	; 0x02
    2eea:	93 81       	ldd	r25, Z+3	; 0x03
    2eec:	08 c0       	rjmp	.+16     	; 0x2efe <vfprintf+0x56c>
    2eee:	f2 e0       	ldi	r31, 0x02	; 2
    2ef0:	af 0e       	add	r10, r31
    2ef2:	b1 1c       	adc	r11, r1
    2ef4:	f6 01       	movw	r30, r12
    2ef6:	60 81       	ld	r22, Z
    2ef8:	71 81       	ldd	r23, Z+1	; 0x01
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	a3 01       	movw	r20, r6
    2f00:	0e 94 30 1a 	call	0x3460	; 0x3460 <__ultoa_invert>
    2f04:	c8 2e       	mov	r12, r24
    2f06:	c6 18       	sub	r12, r6
    2f08:	0f 77       	andi	r16, 0x7F	; 127
    2f0a:	90 2e       	mov	r9, r16
    2f0c:	96 fe       	sbrs	r9, 6
    2f0e:	0b c0       	rjmp	.+22     	; 0x2f26 <vfprintf+0x594>
    2f10:	09 2d       	mov	r16, r9
    2f12:	0e 7f       	andi	r16, 0xFE	; 254
    2f14:	c1 16       	cp	r12, r17
    2f16:	50 f4       	brcc	.+20     	; 0x2f2c <vfprintf+0x59a>
    2f18:	94 fe       	sbrs	r9, 4
    2f1a:	0a c0       	rjmp	.+20     	; 0x2f30 <vfprintf+0x59e>
    2f1c:	92 fc       	sbrc	r9, 2
    2f1e:	08 c0       	rjmp	.+16     	; 0x2f30 <vfprintf+0x59e>
    2f20:	09 2d       	mov	r16, r9
    2f22:	0e 7e       	andi	r16, 0xEE	; 238
    2f24:	05 c0       	rjmp	.+10     	; 0x2f30 <vfprintf+0x59e>
    2f26:	dc 2c       	mov	r13, r12
    2f28:	09 2d       	mov	r16, r9
    2f2a:	03 c0       	rjmp	.+6      	; 0x2f32 <vfprintf+0x5a0>
    2f2c:	dc 2c       	mov	r13, r12
    2f2e:	01 c0       	rjmp	.+2      	; 0x2f32 <vfprintf+0x5a0>
    2f30:	d1 2e       	mov	r13, r17
    2f32:	04 ff       	sbrs	r16, 4
    2f34:	0d c0       	rjmp	.+26     	; 0x2f50 <vfprintf+0x5be>
    2f36:	fe 01       	movw	r30, r28
    2f38:	ec 0d       	add	r30, r12
    2f3a:	f1 1d       	adc	r31, r1
    2f3c:	80 81       	ld	r24, Z
    2f3e:	80 33       	cpi	r24, 0x30	; 48
    2f40:	11 f4       	brne	.+4      	; 0x2f46 <vfprintf+0x5b4>
    2f42:	09 7e       	andi	r16, 0xE9	; 233
    2f44:	09 c0       	rjmp	.+18     	; 0x2f58 <vfprintf+0x5c6>
    2f46:	02 ff       	sbrs	r16, 2
    2f48:	06 c0       	rjmp	.+12     	; 0x2f56 <vfprintf+0x5c4>
    2f4a:	d3 94       	inc	r13
    2f4c:	d3 94       	inc	r13
    2f4e:	04 c0       	rjmp	.+8      	; 0x2f58 <vfprintf+0x5c6>
    2f50:	80 2f       	mov	r24, r16
    2f52:	86 78       	andi	r24, 0x86	; 134
    2f54:	09 f0       	breq	.+2      	; 0x2f58 <vfprintf+0x5c6>
    2f56:	d3 94       	inc	r13
    2f58:	03 fd       	sbrc	r16, 3
    2f5a:	11 c0       	rjmp	.+34     	; 0x2f7e <vfprintf+0x5ec>
    2f5c:	00 ff       	sbrs	r16, 0
    2f5e:	06 c0       	rjmp	.+12     	; 0x2f6c <vfprintf+0x5da>
    2f60:	1c 2d       	mov	r17, r12
    2f62:	d5 14       	cp	r13, r5
    2f64:	80 f4       	brcc	.+32     	; 0x2f86 <vfprintf+0x5f4>
    2f66:	15 0d       	add	r17, r5
    2f68:	1d 19       	sub	r17, r13
    2f6a:	0d c0       	rjmp	.+26     	; 0x2f86 <vfprintf+0x5f4>
    2f6c:	d5 14       	cp	r13, r5
    2f6e:	58 f4       	brcc	.+22     	; 0x2f86 <vfprintf+0x5f4>
    2f70:	b7 01       	movw	r22, r14
    2f72:	80 e2       	ldi	r24, 0x20	; 32
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2f7a:	d3 94       	inc	r13
    2f7c:	f7 cf       	rjmp	.-18     	; 0x2f6c <vfprintf+0x5da>
    2f7e:	d5 14       	cp	r13, r5
    2f80:	10 f4       	brcc	.+4      	; 0x2f86 <vfprintf+0x5f4>
    2f82:	5d 18       	sub	r5, r13
    2f84:	01 c0       	rjmp	.+2      	; 0x2f88 <vfprintf+0x5f6>
    2f86:	51 2c       	mov	r5, r1
    2f88:	04 ff       	sbrs	r16, 4
    2f8a:	10 c0       	rjmp	.+32     	; 0x2fac <vfprintf+0x61a>
    2f8c:	b7 01       	movw	r22, r14
    2f8e:	80 e3       	ldi	r24, 0x30	; 48
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2f96:	02 ff       	sbrs	r16, 2
    2f98:	17 c0       	rjmp	.+46     	; 0x2fc8 <vfprintf+0x636>
    2f9a:	01 fd       	sbrc	r16, 1
    2f9c:	03 c0       	rjmp	.+6      	; 0x2fa4 <vfprintf+0x612>
    2f9e:	88 e7       	ldi	r24, 0x78	; 120
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <vfprintf+0x616>
    2fa4:	88 e5       	ldi	r24, 0x58	; 88
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	b7 01       	movw	r22, r14
    2faa:	0c c0       	rjmp	.+24     	; 0x2fc4 <vfprintf+0x632>
    2fac:	80 2f       	mov	r24, r16
    2fae:	86 78       	andi	r24, 0x86	; 134
    2fb0:	59 f0       	breq	.+22     	; 0x2fc8 <vfprintf+0x636>
    2fb2:	01 ff       	sbrs	r16, 1
    2fb4:	02 c0       	rjmp	.+4      	; 0x2fba <vfprintf+0x628>
    2fb6:	8b e2       	ldi	r24, 0x2B	; 43
    2fb8:	01 c0       	rjmp	.+2      	; 0x2fbc <vfprintf+0x62a>
    2fba:	80 e2       	ldi	r24, 0x20	; 32
    2fbc:	07 fd       	sbrc	r16, 7
    2fbe:	8d e2       	ldi	r24, 0x2D	; 45
    2fc0:	b7 01       	movw	r22, r14
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2fc8:	c1 16       	cp	r12, r17
    2fca:	38 f4       	brcc	.+14     	; 0x2fda <vfprintf+0x648>
    2fcc:	b7 01       	movw	r22, r14
    2fce:	80 e3       	ldi	r24, 0x30	; 48
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2fd6:	11 50       	subi	r17, 0x01	; 1
    2fd8:	f7 cf       	rjmp	.-18     	; 0x2fc8 <vfprintf+0x636>
    2fda:	ca 94       	dec	r12
    2fdc:	f3 01       	movw	r30, r6
    2fde:	ec 0d       	add	r30, r12
    2fe0:	f1 1d       	adc	r31, r1
    2fe2:	80 81       	ld	r24, Z
    2fe4:	b7 01       	movw	r22, r14
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    2fec:	c1 10       	cpse	r12, r1
    2fee:	f5 cf       	rjmp	.-22     	; 0x2fda <vfprintf+0x648>
    2ff0:	15 c0       	rjmp	.+42     	; 0x301c <vfprintf+0x68a>
    2ff2:	f4 e0       	ldi	r31, 0x04	; 4
    2ff4:	f5 15       	cp	r31, r5
    2ff6:	60 f5       	brcc	.+88     	; 0x3050 <vfprintf+0x6be>
    2ff8:	84 e0       	ldi	r24, 0x04	; 4
    2ffa:	58 1a       	sub	r5, r24
    2ffc:	93 fe       	sbrs	r9, 3
    2ffe:	1f c0       	rjmp	.+62     	; 0x303e <vfprintf+0x6ac>
    3000:	01 11       	cpse	r16, r1
    3002:	27 c0       	rjmp	.+78     	; 0x3052 <vfprintf+0x6c0>
    3004:	2c 85       	ldd	r18, Y+12	; 0x0c
    3006:	23 ff       	sbrs	r18, 3
    3008:	2a c0       	rjmp	.+84     	; 0x305e <vfprintf+0x6cc>
    300a:	08 e6       	ldi	r16, 0x68	; 104
    300c:	10 e0       	ldi	r17, 0x00	; 0
    300e:	39 2d       	mov	r19, r9
    3010:	30 71       	andi	r19, 0x10	; 16
    3012:	93 2e       	mov	r9, r19
    3014:	f8 01       	movw	r30, r16
    3016:	84 91       	lpm	r24, Z
    3018:	81 11       	cpse	r24, r1
    301a:	24 c0       	rjmp	.+72     	; 0x3064 <vfprintf+0x6d2>
    301c:	55 20       	and	r5, r5
    301e:	09 f4       	brne	.+2      	; 0x3022 <vfprintf+0x690>
    3020:	e4 cc       	rjmp	.-1592   	; 0x29ea <vfprintf+0x58>
    3022:	b7 01       	movw	r22, r14
    3024:	80 e2       	ldi	r24, 0x20	; 32
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    302c:	5a 94       	dec	r5
    302e:	f6 cf       	rjmp	.-20     	; 0x301c <vfprintf+0x68a>
    3030:	f7 01       	movw	r30, r14
    3032:	86 81       	ldd	r24, Z+6	; 0x06
    3034:	97 81       	ldd	r25, Z+7	; 0x07
    3036:	26 c0       	rjmp	.+76     	; 0x3084 <vfprintf+0x6f2>
    3038:	8f ef       	ldi	r24, 0xFF	; 255
    303a:	9f ef       	ldi	r25, 0xFF	; 255
    303c:	23 c0       	rjmp	.+70     	; 0x3084 <vfprintf+0x6f2>
    303e:	b7 01       	movw	r22, r14
    3040:	80 e2       	ldi	r24, 0x20	; 32
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    3048:	5a 94       	dec	r5
    304a:	51 10       	cpse	r5, r1
    304c:	f8 cf       	rjmp	.-16     	; 0x303e <vfprintf+0x6ac>
    304e:	d8 cf       	rjmp	.-80     	; 0x3000 <vfprintf+0x66e>
    3050:	51 2c       	mov	r5, r1
    3052:	b7 01       	movw	r22, r14
    3054:	80 2f       	mov	r24, r16
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    305c:	d3 cf       	rjmp	.-90     	; 0x3004 <vfprintf+0x672>
    305e:	0c e6       	ldi	r16, 0x6C	; 108
    3060:	10 e0       	ldi	r17, 0x00	; 0
    3062:	d5 cf       	rjmp	.-86     	; 0x300e <vfprintf+0x67c>
    3064:	91 10       	cpse	r9, r1
    3066:	80 52       	subi	r24, 0x20	; 32
    3068:	b7 01       	movw	r22, r14
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	0e 94 b9 19 	call	0x3372	; 0x3372 <fputc>
    3070:	0f 5f       	subi	r16, 0xFF	; 255
    3072:	1f 4f       	sbci	r17, 0xFF	; 255
    3074:	cf cf       	rjmp	.-98     	; 0x3014 <vfprintf+0x682>
    3076:	23 e0       	ldi	r18, 0x03	; 3
    3078:	25 15       	cp	r18, r5
    307a:	10 f4       	brcc	.+4      	; 0x3080 <vfprintf+0x6ee>
    307c:	83 e0       	ldi	r24, 0x03	; 3
    307e:	bd cf       	rjmp	.-134    	; 0x2ffa <vfprintf+0x668>
    3080:	51 2c       	mov	r5, r1
    3082:	c0 cf       	rjmp	.-128    	; 0x3004 <vfprintf+0x672>
    3084:	60 96       	adiw	r28, 0x10	; 16
    3086:	e2 e1       	ldi	r30, 0x12	; 18
    3088:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__>

0000308c <__udivmodsi4>:
    308c:	a1 e2       	ldi	r26, 0x21	; 33
    308e:	1a 2e       	mov	r1, r26
    3090:	aa 1b       	sub	r26, r26
    3092:	bb 1b       	sub	r27, r27
    3094:	fd 01       	movw	r30, r26
    3096:	0d c0       	rjmp	.+26     	; 0x30b2 <__udivmodsi4_ep>

00003098 <__udivmodsi4_loop>:
    3098:	aa 1f       	adc	r26, r26
    309a:	bb 1f       	adc	r27, r27
    309c:	ee 1f       	adc	r30, r30
    309e:	ff 1f       	adc	r31, r31
    30a0:	a2 17       	cp	r26, r18
    30a2:	b3 07       	cpc	r27, r19
    30a4:	e4 07       	cpc	r30, r20
    30a6:	f5 07       	cpc	r31, r21
    30a8:	20 f0       	brcs	.+8      	; 0x30b2 <__udivmodsi4_ep>
    30aa:	a2 1b       	sub	r26, r18
    30ac:	b3 0b       	sbc	r27, r19
    30ae:	e4 0b       	sbc	r30, r20
    30b0:	f5 0b       	sbc	r31, r21

000030b2 <__udivmodsi4_ep>:
    30b2:	66 1f       	adc	r22, r22
    30b4:	77 1f       	adc	r23, r23
    30b6:	88 1f       	adc	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	1a 94       	dec	r1
    30bc:	69 f7       	brne	.-38     	; 0x3098 <__udivmodsi4_loop>
    30be:	60 95       	com	r22
    30c0:	70 95       	com	r23
    30c2:	80 95       	com	r24
    30c4:	90 95       	com	r25
    30c6:	9b 01       	movw	r18, r22
    30c8:	ac 01       	movw	r20, r24
    30ca:	bd 01       	movw	r22, r26
    30cc:	cf 01       	movw	r24, r30
    30ce:	08 95       	ret

000030d0 <__muluhisi3>:
    30d0:	0e 94 aa 18 	call	0x3154	; 0x3154 <__umulhisi3>
    30d4:	a5 9f       	mul	r26, r21
    30d6:	90 0d       	add	r25, r0
    30d8:	b4 9f       	mul	r27, r20
    30da:	90 0d       	add	r25, r0
    30dc:	a4 9f       	mul	r26, r20
    30de:	80 0d       	add	r24, r0
    30e0:	91 1d       	adc	r25, r1
    30e2:	11 24       	eor	r1, r1
    30e4:	08 95       	ret

000030e6 <__prologue_saves__>:
    30e6:	2f 92       	push	r2
    30e8:	3f 92       	push	r3
    30ea:	4f 92       	push	r4
    30ec:	5f 92       	push	r5
    30ee:	6f 92       	push	r6
    30f0:	7f 92       	push	r7
    30f2:	8f 92       	push	r8
    30f4:	9f 92       	push	r9
    30f6:	af 92       	push	r10
    30f8:	bf 92       	push	r11
    30fa:	cf 92       	push	r12
    30fc:	df 92       	push	r13
    30fe:	ef 92       	push	r14
    3100:	ff 92       	push	r15
    3102:	0f 93       	push	r16
    3104:	1f 93       	push	r17
    3106:	cf 93       	push	r28
    3108:	df 93       	push	r29
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    310e:	ca 1b       	sub	r28, r26
    3110:	db 0b       	sbc	r29, r27
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	09 94       	ijmp

0000311e <__epilogue_restores__>:
    311e:	2a 88       	ldd	r2, Y+18	; 0x12
    3120:	39 88       	ldd	r3, Y+17	; 0x11
    3122:	48 88       	ldd	r4, Y+16	; 0x10
    3124:	5f 84       	ldd	r5, Y+15	; 0x0f
    3126:	6e 84       	ldd	r6, Y+14	; 0x0e
    3128:	7d 84       	ldd	r7, Y+13	; 0x0d
    312a:	8c 84       	ldd	r8, Y+12	; 0x0c
    312c:	9b 84       	ldd	r9, Y+11	; 0x0b
    312e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3130:	b9 84       	ldd	r11, Y+9	; 0x09
    3132:	c8 84       	ldd	r12, Y+8	; 0x08
    3134:	df 80       	ldd	r13, Y+7	; 0x07
    3136:	ee 80       	ldd	r14, Y+6	; 0x06
    3138:	fd 80       	ldd	r15, Y+5	; 0x05
    313a:	0c 81       	ldd	r16, Y+4	; 0x04
    313c:	1b 81       	ldd	r17, Y+3	; 0x03
    313e:	aa 81       	ldd	r26, Y+2	; 0x02
    3140:	b9 81       	ldd	r27, Y+1	; 0x01
    3142:	ce 0f       	add	r28, r30
    3144:	d1 1d       	adc	r29, r1
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	f8 94       	cli
    314a:	de bf       	out	0x3e, r29	; 62
    314c:	0f be       	out	0x3f, r0	; 63
    314e:	cd bf       	out	0x3d, r28	; 61
    3150:	ed 01       	movw	r28, r26
    3152:	08 95       	ret

00003154 <__umulhisi3>:
    3154:	a2 9f       	mul	r26, r18
    3156:	b0 01       	movw	r22, r0
    3158:	b3 9f       	mul	r27, r19
    315a:	c0 01       	movw	r24, r0
    315c:	a3 9f       	mul	r26, r19
    315e:	70 0d       	add	r23, r0
    3160:	81 1d       	adc	r24, r1
    3162:	11 24       	eor	r1, r1
    3164:	91 1d       	adc	r25, r1
    3166:	b2 9f       	mul	r27, r18
    3168:	70 0d       	add	r23, r0
    316a:	81 1d       	adc	r24, r1
    316c:	11 24       	eor	r1, r1
    316e:	91 1d       	adc	r25, r1
    3170:	08 95       	ret

00003172 <__ftoa_engine>:
    3172:	28 30       	cpi	r18, 0x08	; 8
    3174:	08 f0       	brcs	.+2      	; 0x3178 <__ftoa_engine+0x6>
    3176:	27 e0       	ldi	r18, 0x07	; 7
    3178:	33 27       	eor	r19, r19
    317a:	da 01       	movw	r26, r20
    317c:	99 0f       	add	r25, r25
    317e:	31 1d       	adc	r19, r1
    3180:	87 fd       	sbrc	r24, 7
    3182:	91 60       	ori	r25, 0x01	; 1
    3184:	00 96       	adiw	r24, 0x00	; 0
    3186:	61 05       	cpc	r22, r1
    3188:	71 05       	cpc	r23, r1
    318a:	39 f4       	brne	.+14     	; 0x319a <__ftoa_engine+0x28>
    318c:	32 60       	ori	r19, 0x02	; 2
    318e:	2e 5f       	subi	r18, 0xFE	; 254
    3190:	3d 93       	st	X+, r19
    3192:	30 e3       	ldi	r19, 0x30	; 48
    3194:	2a 95       	dec	r18
    3196:	e1 f7       	brne	.-8      	; 0x3190 <__ftoa_engine+0x1e>
    3198:	08 95       	ret
    319a:	9f 3f       	cpi	r25, 0xFF	; 255
    319c:	30 f0       	brcs	.+12     	; 0x31aa <__ftoa_engine+0x38>
    319e:	80 38       	cpi	r24, 0x80	; 128
    31a0:	71 05       	cpc	r23, r1
    31a2:	61 05       	cpc	r22, r1
    31a4:	09 f0       	breq	.+2      	; 0x31a8 <__ftoa_engine+0x36>
    31a6:	3c 5f       	subi	r19, 0xFC	; 252
    31a8:	3c 5f       	subi	r19, 0xFC	; 252
    31aa:	3d 93       	st	X+, r19
    31ac:	91 30       	cpi	r25, 0x01	; 1
    31ae:	08 f0       	brcs	.+2      	; 0x31b2 <__ftoa_engine+0x40>
    31b0:	80 68       	ori	r24, 0x80	; 128
    31b2:	91 1d       	adc	r25, r1
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	1f 93       	push	r17
    31ba:	0f 93       	push	r16
    31bc:	ff 92       	push	r15
    31be:	ef 92       	push	r14
    31c0:	19 2f       	mov	r17, r25
    31c2:	98 7f       	andi	r25, 0xF8	; 248
    31c4:	96 95       	lsr	r25
    31c6:	e9 2f       	mov	r30, r25
    31c8:	96 95       	lsr	r25
    31ca:	96 95       	lsr	r25
    31cc:	e9 0f       	add	r30, r25
    31ce:	ff 27       	eor	r31, r31
    31d0:	e6 53       	subi	r30, 0x36	; 54
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	99 27       	eor	r25, r25
    31d6:	33 27       	eor	r19, r19
    31d8:	ee 24       	eor	r14, r14
    31da:	ff 24       	eor	r15, r15
    31dc:	a7 01       	movw	r20, r14
    31de:	e7 01       	movw	r28, r14
    31e0:	05 90       	lpm	r0, Z+
    31e2:	08 94       	sec
    31e4:	07 94       	ror	r0
    31e6:	28 f4       	brcc	.+10     	; 0x31f2 <__ftoa_engine+0x80>
    31e8:	36 0f       	add	r19, r22
    31ea:	e7 1e       	adc	r14, r23
    31ec:	f8 1e       	adc	r15, r24
    31ee:	49 1f       	adc	r20, r25
    31f0:	51 1d       	adc	r21, r1
    31f2:	66 0f       	add	r22, r22
    31f4:	77 1f       	adc	r23, r23
    31f6:	88 1f       	adc	r24, r24
    31f8:	99 1f       	adc	r25, r25
    31fa:	06 94       	lsr	r0
    31fc:	a1 f7       	brne	.-24     	; 0x31e6 <__ftoa_engine+0x74>
    31fe:	05 90       	lpm	r0, Z+
    3200:	07 94       	ror	r0
    3202:	28 f4       	brcc	.+10     	; 0x320e <__ftoa_engine+0x9c>
    3204:	e7 0e       	add	r14, r23
    3206:	f8 1e       	adc	r15, r24
    3208:	49 1f       	adc	r20, r25
    320a:	56 1f       	adc	r21, r22
    320c:	c1 1d       	adc	r28, r1
    320e:	77 0f       	add	r23, r23
    3210:	88 1f       	adc	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	66 1f       	adc	r22, r22
    3216:	06 94       	lsr	r0
    3218:	a1 f7       	brne	.-24     	; 0x3202 <__ftoa_engine+0x90>
    321a:	05 90       	lpm	r0, Z+
    321c:	07 94       	ror	r0
    321e:	28 f4       	brcc	.+10     	; 0x322a <__ftoa_engine+0xb8>
    3220:	f8 0e       	add	r15, r24
    3222:	49 1f       	adc	r20, r25
    3224:	56 1f       	adc	r21, r22
    3226:	c7 1f       	adc	r28, r23
    3228:	d1 1d       	adc	r29, r1
    322a:	88 0f       	add	r24, r24
    322c:	99 1f       	adc	r25, r25
    322e:	66 1f       	adc	r22, r22
    3230:	77 1f       	adc	r23, r23
    3232:	06 94       	lsr	r0
    3234:	a1 f7       	brne	.-24     	; 0x321e <__ftoa_engine+0xac>
    3236:	05 90       	lpm	r0, Z+
    3238:	07 94       	ror	r0
    323a:	20 f4       	brcc	.+8      	; 0x3244 <__ftoa_engine+0xd2>
    323c:	49 0f       	add	r20, r25
    323e:	56 1f       	adc	r21, r22
    3240:	c7 1f       	adc	r28, r23
    3242:	d8 1f       	adc	r29, r24
    3244:	99 0f       	add	r25, r25
    3246:	66 1f       	adc	r22, r22
    3248:	77 1f       	adc	r23, r23
    324a:	88 1f       	adc	r24, r24
    324c:	06 94       	lsr	r0
    324e:	a9 f7       	brne	.-22     	; 0x323a <__ftoa_engine+0xc8>
    3250:	84 91       	lpm	r24, Z
    3252:	10 95       	com	r17
    3254:	17 70       	andi	r17, 0x07	; 7
    3256:	41 f0       	breq	.+16     	; 0x3268 <__ftoa_engine+0xf6>
    3258:	d6 95       	lsr	r29
    325a:	c7 95       	ror	r28
    325c:	57 95       	ror	r21
    325e:	47 95       	ror	r20
    3260:	f7 94       	ror	r15
    3262:	e7 94       	ror	r14
    3264:	1a 95       	dec	r17
    3266:	c1 f7       	brne	.-16     	; 0x3258 <__ftoa_engine+0xe6>
    3268:	e0 e7       	ldi	r30, 0x70	; 112
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	68 94       	set
    326e:	15 90       	lpm	r1, Z+
    3270:	15 91       	lpm	r17, Z+
    3272:	35 91       	lpm	r19, Z+
    3274:	65 91       	lpm	r22, Z+
    3276:	95 91       	lpm	r25, Z+
    3278:	05 90       	lpm	r0, Z+
    327a:	7f e2       	ldi	r23, 0x2F	; 47
    327c:	73 95       	inc	r23
    327e:	e1 18       	sub	r14, r1
    3280:	f1 0a       	sbc	r15, r17
    3282:	43 0b       	sbc	r20, r19
    3284:	56 0b       	sbc	r21, r22
    3286:	c9 0b       	sbc	r28, r25
    3288:	d0 09       	sbc	r29, r0
    328a:	c0 f7       	brcc	.-16     	; 0x327c <__ftoa_engine+0x10a>
    328c:	e1 0c       	add	r14, r1
    328e:	f1 1e       	adc	r15, r17
    3290:	43 1f       	adc	r20, r19
    3292:	56 1f       	adc	r21, r22
    3294:	c9 1f       	adc	r28, r25
    3296:	d0 1d       	adc	r29, r0
    3298:	7e f4       	brtc	.+30     	; 0x32b8 <__ftoa_engine+0x146>
    329a:	70 33       	cpi	r23, 0x30	; 48
    329c:	11 f4       	brne	.+4      	; 0x32a2 <__ftoa_engine+0x130>
    329e:	8a 95       	dec	r24
    32a0:	e6 cf       	rjmp	.-52     	; 0x326e <__ftoa_engine+0xfc>
    32a2:	e8 94       	clt
    32a4:	01 50       	subi	r16, 0x01	; 1
    32a6:	30 f0       	brcs	.+12     	; 0x32b4 <__ftoa_engine+0x142>
    32a8:	08 0f       	add	r16, r24
    32aa:	0a f4       	brpl	.+2      	; 0x32ae <__ftoa_engine+0x13c>
    32ac:	00 27       	eor	r16, r16
    32ae:	02 17       	cp	r16, r18
    32b0:	08 f4       	brcc	.+2      	; 0x32b4 <__ftoa_engine+0x142>
    32b2:	20 2f       	mov	r18, r16
    32b4:	23 95       	inc	r18
    32b6:	02 2f       	mov	r16, r18
    32b8:	7a 33       	cpi	r23, 0x3A	; 58
    32ba:	28 f0       	brcs	.+10     	; 0x32c6 <__ftoa_engine+0x154>
    32bc:	79 e3       	ldi	r23, 0x39	; 57
    32be:	7d 93       	st	X+, r23
    32c0:	2a 95       	dec	r18
    32c2:	e9 f7       	brne	.-6      	; 0x32be <__ftoa_engine+0x14c>
    32c4:	10 c0       	rjmp	.+32     	; 0x32e6 <__ftoa_engine+0x174>
    32c6:	7d 93       	st	X+, r23
    32c8:	2a 95       	dec	r18
    32ca:	89 f6       	brne	.-94     	; 0x326e <__ftoa_engine+0xfc>
    32cc:	06 94       	lsr	r0
    32ce:	97 95       	ror	r25
    32d0:	67 95       	ror	r22
    32d2:	37 95       	ror	r19
    32d4:	17 95       	ror	r17
    32d6:	17 94       	ror	r1
    32d8:	e1 18       	sub	r14, r1
    32da:	f1 0a       	sbc	r15, r17
    32dc:	43 0b       	sbc	r20, r19
    32de:	56 0b       	sbc	r21, r22
    32e0:	c9 0b       	sbc	r28, r25
    32e2:	d0 09       	sbc	r29, r0
    32e4:	98 f0       	brcs	.+38     	; 0x330c <__ftoa_engine+0x19a>
    32e6:	23 95       	inc	r18
    32e8:	7e 91       	ld	r23, -X
    32ea:	73 95       	inc	r23
    32ec:	7a 33       	cpi	r23, 0x3A	; 58
    32ee:	08 f0       	brcs	.+2      	; 0x32f2 <__ftoa_engine+0x180>
    32f0:	70 e3       	ldi	r23, 0x30	; 48
    32f2:	7c 93       	st	X, r23
    32f4:	20 13       	cpse	r18, r16
    32f6:	b8 f7       	brcc	.-18     	; 0x32e6 <__ftoa_engine+0x174>
    32f8:	7e 91       	ld	r23, -X
    32fa:	70 61       	ori	r23, 0x10	; 16
    32fc:	7d 93       	st	X+, r23
    32fe:	30 f0       	brcs	.+12     	; 0x330c <__ftoa_engine+0x19a>
    3300:	83 95       	inc	r24
    3302:	71 e3       	ldi	r23, 0x31	; 49
    3304:	7d 93       	st	X+, r23
    3306:	70 e3       	ldi	r23, 0x30	; 48
    3308:	2a 95       	dec	r18
    330a:	e1 f7       	brne	.-8      	; 0x3304 <__ftoa_engine+0x192>
    330c:	11 24       	eor	r1, r1
    330e:	ef 90       	pop	r14
    3310:	ff 90       	pop	r15
    3312:	0f 91       	pop	r16
    3314:	1f 91       	pop	r17
    3316:	cf 91       	pop	r28
    3318:	df 91       	pop	r29
    331a:	99 27       	eor	r25, r25
    331c:	87 fd       	sbrc	r24, 7
    331e:	90 95       	com	r25
    3320:	08 95       	ret

00003322 <strnlen_P>:
    3322:	fc 01       	movw	r30, r24
    3324:	05 90       	lpm	r0, Z+
    3326:	61 50       	subi	r22, 0x01	; 1
    3328:	70 40       	sbci	r23, 0x00	; 0
    332a:	01 10       	cpse	r0, r1
    332c:	d8 f7       	brcc	.-10     	; 0x3324 <strnlen_P+0x2>
    332e:	80 95       	com	r24
    3330:	90 95       	com	r25
    3332:	8e 0f       	add	r24, r30
    3334:	9f 1f       	adc	r25, r31
    3336:	08 95       	ret

00003338 <memset>:
    3338:	dc 01       	movw	r26, r24
    333a:	01 c0       	rjmp	.+2      	; 0x333e <memset+0x6>
    333c:	6d 93       	st	X+, r22
    333e:	41 50       	subi	r20, 0x01	; 1
    3340:	50 40       	sbci	r21, 0x00	; 0
    3342:	e0 f7       	brcc	.-8      	; 0x333c <memset+0x4>
    3344:	08 95       	ret

00003346 <strcat>:
    3346:	fb 01       	movw	r30, r22
    3348:	dc 01       	movw	r26, r24
    334a:	0d 90       	ld	r0, X+
    334c:	00 20       	and	r0, r0
    334e:	e9 f7       	brne	.-6      	; 0x334a <strcat+0x4>
    3350:	11 97       	sbiw	r26, 0x01	; 1
    3352:	01 90       	ld	r0, Z+
    3354:	0d 92       	st	X+, r0
    3356:	00 20       	and	r0, r0
    3358:	e1 f7       	brne	.-8      	; 0x3352 <strcat+0xc>
    335a:	08 95       	ret

0000335c <strnlen>:
    335c:	fc 01       	movw	r30, r24
    335e:	61 50       	subi	r22, 0x01	; 1
    3360:	70 40       	sbci	r23, 0x00	; 0
    3362:	01 90       	ld	r0, Z+
    3364:	01 10       	cpse	r0, r1
    3366:	d8 f7       	brcc	.-10     	; 0x335e <strnlen+0x2>
    3368:	80 95       	com	r24
    336a:	90 95       	com	r25
    336c:	8e 0f       	add	r24, r30
    336e:	9f 1f       	adc	r25, r31
    3370:	08 95       	ret

00003372 <fputc>:
    3372:	0f 93       	push	r16
    3374:	1f 93       	push	r17
    3376:	cf 93       	push	r28
    3378:	df 93       	push	r29
    337a:	fb 01       	movw	r30, r22
    337c:	23 81       	ldd	r18, Z+3	; 0x03
    337e:	21 fd       	sbrc	r18, 1
    3380:	03 c0       	rjmp	.+6      	; 0x3388 <fputc+0x16>
    3382:	8f ef       	ldi	r24, 0xFF	; 255
    3384:	9f ef       	ldi	r25, 0xFF	; 255
    3386:	2c c0       	rjmp	.+88     	; 0x33e0 <fputc+0x6e>
    3388:	22 ff       	sbrs	r18, 2
    338a:	16 c0       	rjmp	.+44     	; 0x33b8 <fputc+0x46>
    338c:	46 81       	ldd	r20, Z+6	; 0x06
    338e:	57 81       	ldd	r21, Z+7	; 0x07
    3390:	24 81       	ldd	r18, Z+4	; 0x04
    3392:	35 81       	ldd	r19, Z+5	; 0x05
    3394:	42 17       	cp	r20, r18
    3396:	53 07       	cpc	r21, r19
    3398:	44 f4       	brge	.+16     	; 0x33aa <fputc+0x38>
    339a:	a0 81       	ld	r26, Z
    339c:	b1 81       	ldd	r27, Z+1	; 0x01
    339e:	9d 01       	movw	r18, r26
    33a0:	2f 5f       	subi	r18, 0xFF	; 255
    33a2:	3f 4f       	sbci	r19, 0xFF	; 255
    33a4:	31 83       	std	Z+1, r19	; 0x01
    33a6:	20 83       	st	Z, r18
    33a8:	8c 93       	st	X, r24
    33aa:	26 81       	ldd	r18, Z+6	; 0x06
    33ac:	37 81       	ldd	r19, Z+7	; 0x07
    33ae:	2f 5f       	subi	r18, 0xFF	; 255
    33b0:	3f 4f       	sbci	r19, 0xFF	; 255
    33b2:	37 83       	std	Z+7, r19	; 0x07
    33b4:	26 83       	std	Z+6, r18	; 0x06
    33b6:	14 c0       	rjmp	.+40     	; 0x33e0 <fputc+0x6e>
    33b8:	8b 01       	movw	r16, r22
    33ba:	ec 01       	movw	r28, r24
    33bc:	fb 01       	movw	r30, r22
    33be:	00 84       	ldd	r0, Z+8	; 0x08
    33c0:	f1 85       	ldd	r31, Z+9	; 0x09
    33c2:	e0 2d       	mov	r30, r0
    33c4:	09 95       	icall
    33c6:	89 2b       	or	r24, r25
    33c8:	e1 f6       	brne	.-72     	; 0x3382 <fputc+0x10>
    33ca:	d8 01       	movw	r26, r16
    33cc:	16 96       	adiw	r26, 0x06	; 6
    33ce:	8d 91       	ld	r24, X+
    33d0:	9c 91       	ld	r25, X
    33d2:	17 97       	sbiw	r26, 0x07	; 7
    33d4:	01 96       	adiw	r24, 0x01	; 1
    33d6:	17 96       	adiw	r26, 0x07	; 7
    33d8:	9c 93       	st	X, r25
    33da:	8e 93       	st	-X, r24
    33dc:	16 97       	sbiw	r26, 0x06	; 6
    33de:	ce 01       	movw	r24, r28
    33e0:	df 91       	pop	r29
    33e2:	cf 91       	pop	r28
    33e4:	1f 91       	pop	r17
    33e6:	0f 91       	pop	r16
    33e8:	08 95       	ret

000033ea <sprintf>:
    33ea:	ae e0       	ldi	r26, 0x0E	; 14
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	eb ef       	ldi	r30, 0xFB	; 251
    33f0:	f9 e1       	ldi	r31, 0x19	; 25
    33f2:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__prologue_saves__+0x1c>
    33f6:	0d 89       	ldd	r16, Y+21	; 0x15
    33f8:	1e 89       	ldd	r17, Y+22	; 0x16
    33fa:	86 e0       	ldi	r24, 0x06	; 6
    33fc:	8c 83       	std	Y+4, r24	; 0x04
    33fe:	1a 83       	std	Y+2, r17	; 0x02
    3400:	09 83       	std	Y+1, r16	; 0x01
    3402:	8f ef       	ldi	r24, 0xFF	; 255
    3404:	9f e7       	ldi	r25, 0x7F	; 127
    3406:	9e 83       	std	Y+6, r25	; 0x06
    3408:	8d 83       	std	Y+5, r24	; 0x05
    340a:	ae 01       	movw	r20, r28
    340c:	47 5e       	subi	r20, 0xE7	; 231
    340e:	5f 4f       	sbci	r21, 0xFF	; 255
    3410:	6f 89       	ldd	r22, Y+23	; 0x17
    3412:	78 8d       	ldd	r23, Y+24	; 0x18
    3414:	ce 01       	movw	r24, r28
    3416:	01 96       	adiw	r24, 0x01	; 1
    3418:	0e 94 c9 14 	call	0x2992	; 0x2992 <vfprintf>
    341c:	ef 81       	ldd	r30, Y+7	; 0x07
    341e:	f8 85       	ldd	r31, Y+8	; 0x08
    3420:	e0 0f       	add	r30, r16
    3422:	f1 1f       	adc	r31, r17
    3424:	10 82       	st	Z, r1
    3426:	2e 96       	adiw	r28, 0x0e	; 14
    3428:	e4 e0       	ldi	r30, 0x04	; 4
    342a:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__epilogue_restores__+0x1c>

0000342e <sscanf>:
    342e:	ae e0       	ldi	r26, 0x0E	; 14
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	ed e1       	ldi	r30, 0x1D	; 29
    3434:	fa e1       	ldi	r31, 0x1A	; 26
    3436:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__prologue_saves__+0x20>
    343a:	85 e0       	ldi	r24, 0x05	; 5
    343c:	8c 83       	std	Y+4, r24	; 0x04
    343e:	8b 89       	ldd	r24, Y+19	; 0x13
    3440:	9c 89       	ldd	r25, Y+20	; 0x14
    3442:	9a 83       	std	Y+2, r25	; 0x02
    3444:	89 83       	std	Y+1, r24	; 0x01
    3446:	ae 01       	movw	r20, r28
    3448:	49 5e       	subi	r20, 0xE9	; 233
    344a:	5f 4f       	sbci	r21, 0xFF	; 255
    344c:	6d 89       	ldd	r22, Y+21	; 0x15
    344e:	7e 89       	ldd	r23, Y+22	; 0x16
    3450:	ce 01       	movw	r24, r28
    3452:	01 96       	adiw	r24, 0x01	; 1
    3454:	0e 94 2a 1c 	call	0x3854	; 0x3854 <vfscanf>
    3458:	2e 96       	adiw	r28, 0x0e	; 14
    345a:	e2 e0       	ldi	r30, 0x02	; 2
    345c:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__epilogue_restores__+0x20>

00003460 <__ultoa_invert>:
    3460:	fa 01       	movw	r30, r20
    3462:	aa 27       	eor	r26, r26
    3464:	28 30       	cpi	r18, 0x08	; 8
    3466:	51 f1       	breq	.+84     	; 0x34bc <__ultoa_invert+0x5c>
    3468:	20 31       	cpi	r18, 0x10	; 16
    346a:	81 f1       	breq	.+96     	; 0x34cc <__ultoa_invert+0x6c>
    346c:	e8 94       	clt
    346e:	6f 93       	push	r22
    3470:	6e 7f       	andi	r22, 0xFE	; 254
    3472:	6e 5f       	subi	r22, 0xFE	; 254
    3474:	7f 4f       	sbci	r23, 0xFF	; 255
    3476:	8f 4f       	sbci	r24, 0xFF	; 255
    3478:	9f 4f       	sbci	r25, 0xFF	; 255
    347a:	af 4f       	sbci	r26, 0xFF	; 255
    347c:	b1 e0       	ldi	r27, 0x01	; 1
    347e:	3e d0       	rcall	.+124    	; 0x34fc <__ultoa_invert+0x9c>
    3480:	b4 e0       	ldi	r27, 0x04	; 4
    3482:	3c d0       	rcall	.+120    	; 0x34fc <__ultoa_invert+0x9c>
    3484:	67 0f       	add	r22, r23
    3486:	78 1f       	adc	r23, r24
    3488:	89 1f       	adc	r24, r25
    348a:	9a 1f       	adc	r25, r26
    348c:	a1 1d       	adc	r26, r1
    348e:	68 0f       	add	r22, r24
    3490:	79 1f       	adc	r23, r25
    3492:	8a 1f       	adc	r24, r26
    3494:	91 1d       	adc	r25, r1
    3496:	a1 1d       	adc	r26, r1
    3498:	6a 0f       	add	r22, r26
    349a:	71 1d       	adc	r23, r1
    349c:	81 1d       	adc	r24, r1
    349e:	91 1d       	adc	r25, r1
    34a0:	a1 1d       	adc	r26, r1
    34a2:	20 d0       	rcall	.+64     	; 0x34e4 <__ultoa_invert+0x84>
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <__ultoa_invert+0x48>
    34a6:	68 94       	set
    34a8:	3f 91       	pop	r19
    34aa:	2a e0       	ldi	r18, 0x0A	; 10
    34ac:	26 9f       	mul	r18, r22
    34ae:	11 24       	eor	r1, r1
    34b0:	30 19       	sub	r19, r0
    34b2:	30 5d       	subi	r19, 0xD0	; 208
    34b4:	31 93       	st	Z+, r19
    34b6:	de f6       	brtc	.-74     	; 0x346e <__ultoa_invert+0xe>
    34b8:	cf 01       	movw	r24, r30
    34ba:	08 95       	ret
    34bc:	46 2f       	mov	r20, r22
    34be:	47 70       	andi	r20, 0x07	; 7
    34c0:	40 5d       	subi	r20, 0xD0	; 208
    34c2:	41 93       	st	Z+, r20
    34c4:	b3 e0       	ldi	r27, 0x03	; 3
    34c6:	0f d0       	rcall	.+30     	; 0x34e6 <__ultoa_invert+0x86>
    34c8:	c9 f7       	brne	.-14     	; 0x34bc <__ultoa_invert+0x5c>
    34ca:	f6 cf       	rjmp	.-20     	; 0x34b8 <__ultoa_invert+0x58>
    34cc:	46 2f       	mov	r20, r22
    34ce:	4f 70       	andi	r20, 0x0F	; 15
    34d0:	40 5d       	subi	r20, 0xD0	; 208
    34d2:	4a 33       	cpi	r20, 0x3A	; 58
    34d4:	18 f0       	brcs	.+6      	; 0x34dc <__ultoa_invert+0x7c>
    34d6:	49 5d       	subi	r20, 0xD9	; 217
    34d8:	31 fd       	sbrc	r19, 1
    34da:	40 52       	subi	r20, 0x20	; 32
    34dc:	41 93       	st	Z+, r20
    34de:	02 d0       	rcall	.+4      	; 0x34e4 <__ultoa_invert+0x84>
    34e0:	a9 f7       	brne	.-22     	; 0x34cc <__ultoa_invert+0x6c>
    34e2:	ea cf       	rjmp	.-44     	; 0x34b8 <__ultoa_invert+0x58>
    34e4:	b4 e0       	ldi	r27, 0x04	; 4
    34e6:	a6 95       	lsr	r26
    34e8:	97 95       	ror	r25
    34ea:	87 95       	ror	r24
    34ec:	77 95       	ror	r23
    34ee:	67 95       	ror	r22
    34f0:	ba 95       	dec	r27
    34f2:	c9 f7       	brne	.-14     	; 0x34e6 <__ultoa_invert+0x86>
    34f4:	00 97       	sbiw	r24, 0x00	; 0
    34f6:	61 05       	cpc	r22, r1
    34f8:	71 05       	cpc	r23, r1
    34fa:	08 95       	ret
    34fc:	9b 01       	movw	r18, r22
    34fe:	ac 01       	movw	r20, r24
    3500:	0a 2e       	mov	r0, r26
    3502:	06 94       	lsr	r0
    3504:	57 95       	ror	r21
    3506:	47 95       	ror	r20
    3508:	37 95       	ror	r19
    350a:	27 95       	ror	r18
    350c:	ba 95       	dec	r27
    350e:	c9 f7       	brne	.-14     	; 0x3502 <__ultoa_invert+0xa2>
    3510:	62 0f       	add	r22, r18
    3512:	73 1f       	adc	r23, r19
    3514:	84 1f       	adc	r24, r20
    3516:	95 1f       	adc	r25, r21
    3518:	a0 1d       	adc	r26, r0
    351a:	08 95       	ret

0000351c <putval>:
    351c:	20 fd       	sbrc	r18, 0
    351e:	09 c0       	rjmp	.+18     	; 0x3532 <putval+0x16>
    3520:	fc 01       	movw	r30, r24
    3522:	23 fd       	sbrc	r18, 3
    3524:	05 c0       	rjmp	.+10     	; 0x3530 <putval+0x14>
    3526:	22 ff       	sbrs	r18, 2
    3528:	02 c0       	rjmp	.+4      	; 0x352e <putval+0x12>
    352a:	73 83       	std	Z+3, r23	; 0x03
    352c:	62 83       	std	Z+2, r22	; 0x02
    352e:	51 83       	std	Z+1, r21	; 0x01
    3530:	40 83       	st	Z, r20
    3532:	08 95       	ret

00003534 <mulacc>:
    3534:	44 fd       	sbrc	r20, 4
    3536:	17 c0       	rjmp	.+46     	; 0x3566 <mulacc+0x32>
    3538:	46 fd       	sbrc	r20, 6
    353a:	17 c0       	rjmp	.+46     	; 0x356a <mulacc+0x36>
    353c:	ab 01       	movw	r20, r22
    353e:	bc 01       	movw	r22, r24
    3540:	da 01       	movw	r26, r20
    3542:	fb 01       	movw	r30, r22
    3544:	aa 0f       	add	r26, r26
    3546:	bb 1f       	adc	r27, r27
    3548:	ee 1f       	adc	r30, r30
    354a:	ff 1f       	adc	r31, r31
    354c:	10 94       	com	r1
    354e:	d1 f7       	brne	.-12     	; 0x3544 <mulacc+0x10>
    3550:	4a 0f       	add	r20, r26
    3552:	5b 1f       	adc	r21, r27
    3554:	6e 1f       	adc	r22, r30
    3556:	7f 1f       	adc	r23, r31
    3558:	cb 01       	movw	r24, r22
    355a:	ba 01       	movw	r22, r20
    355c:	66 0f       	add	r22, r22
    355e:	77 1f       	adc	r23, r23
    3560:	88 1f       	adc	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	09 c0       	rjmp	.+18     	; 0x3578 <mulacc+0x44>
    3566:	33 e0       	ldi	r19, 0x03	; 3
    3568:	01 c0       	rjmp	.+2      	; 0x356c <mulacc+0x38>
    356a:	34 e0       	ldi	r19, 0x04	; 4
    356c:	66 0f       	add	r22, r22
    356e:	77 1f       	adc	r23, r23
    3570:	88 1f       	adc	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	31 50       	subi	r19, 0x01	; 1
    3576:	d1 f7       	brne	.-12     	; 0x356c <mulacc+0x38>
    3578:	62 0f       	add	r22, r18
    357a:	71 1d       	adc	r23, r1
    357c:	81 1d       	adc	r24, r1
    357e:	91 1d       	adc	r25, r1
    3580:	08 95       	ret

00003582 <skip_spaces>:
    3582:	0f 93       	push	r16
    3584:	1f 93       	push	r17
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	8c 01       	movw	r16, r24
    358c:	c8 01       	movw	r24, r16
    358e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    3592:	ec 01       	movw	r28, r24
    3594:	97 fd       	sbrc	r25, 7
    3596:	08 c0       	rjmp	.+16     	; 0x35a8 <skip_spaces+0x26>
    3598:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <isspace>
    359c:	89 2b       	or	r24, r25
    359e:	b1 f7       	brne	.-20     	; 0x358c <skip_spaces+0xa>
    35a0:	b8 01       	movw	r22, r16
    35a2:	ce 01       	movw	r24, r28
    35a4:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <ungetc>
    35a8:	ce 01       	movw	r24, r28
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	1f 91       	pop	r17
    35b0:	0f 91       	pop	r16
    35b2:	08 95       	ret

000035b4 <conv_int>:
    35b4:	8f 92       	push	r8
    35b6:	9f 92       	push	r9
    35b8:	af 92       	push	r10
    35ba:	bf 92       	push	r11
    35bc:	ef 92       	push	r14
    35be:	ff 92       	push	r15
    35c0:	0f 93       	push	r16
    35c2:	1f 93       	push	r17
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29
    35c8:	8c 01       	movw	r16, r24
    35ca:	d6 2f       	mov	r29, r22
    35cc:	7a 01       	movw	r14, r20
    35ce:	b2 2e       	mov	r11, r18
    35d0:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    35d4:	9c 01       	movw	r18, r24
    35d6:	33 27       	eor	r19, r19
    35d8:	2b 32       	cpi	r18, 0x2B	; 43
    35da:	31 05       	cpc	r19, r1
    35dc:	31 f0       	breq	.+12     	; 0x35ea <conv_int+0x36>
    35de:	2d 32       	cpi	r18, 0x2D	; 45
    35e0:	31 05       	cpc	r19, r1
    35e2:	61 f4       	brne	.+24     	; 0x35fc <conv_int+0x48>
    35e4:	8b 2d       	mov	r24, r11
    35e6:	80 68       	ori	r24, 0x80	; 128
    35e8:	b8 2e       	mov	r11, r24
    35ea:	d1 50       	subi	r29, 0x01	; 1
    35ec:	11 f4       	brne	.+4      	; 0x35f2 <conv_int+0x3e>
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	68 c0       	rjmp	.+208    	; 0x36c2 <conv_int+0x10e>
    35f2:	c8 01       	movw	r24, r16
    35f4:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    35f8:	97 fd       	sbrc	r25, 7
    35fa:	f9 cf       	rjmp	.-14     	; 0x35ee <conv_int+0x3a>
    35fc:	cb 2d       	mov	r28, r11
    35fe:	cd 7f       	andi	r28, 0xFD	; 253
    3600:	2b 2d       	mov	r18, r11
    3602:	20 73       	andi	r18, 0x30	; 48
    3604:	09 f5       	brne	.+66     	; 0x3648 <conv_int+0x94>
    3606:	80 33       	cpi	r24, 0x30	; 48
    3608:	f9 f4       	brne	.+62     	; 0x3648 <conv_int+0x94>
    360a:	aa 24       	eor	r10, r10
    360c:	aa 94       	dec	r10
    360e:	ad 0e       	add	r10, r29
    3610:	09 f4       	brne	.+2      	; 0x3614 <conv_int+0x60>
    3612:	43 c0       	rjmp	.+134    	; 0x369a <conv_int+0xe6>
    3614:	c8 01       	movw	r24, r16
    3616:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    361a:	97 fd       	sbrc	r25, 7
    361c:	3e c0       	rjmp	.+124    	; 0x369a <conv_int+0xe6>
    361e:	9c 01       	movw	r18, r24
    3620:	2f 7d       	andi	r18, 0xDF	; 223
    3622:	33 27       	eor	r19, r19
    3624:	28 35       	cpi	r18, 0x58	; 88
    3626:	31 05       	cpc	r19, r1
    3628:	49 f4       	brne	.+18     	; 0x363c <conv_int+0x88>
    362a:	c2 64       	ori	r28, 0x42	; 66
    362c:	d2 50       	subi	r29, 0x02	; 2
    362e:	a9 f1       	breq	.+106    	; 0x369a <conv_int+0xe6>
    3630:	c8 01       	movw	r24, r16
    3632:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    3636:	97 ff       	sbrs	r25, 7
    3638:	07 c0       	rjmp	.+14     	; 0x3648 <conv_int+0x94>
    363a:	2f c0       	rjmp	.+94     	; 0x369a <conv_int+0xe6>
    363c:	b6 fe       	sbrs	r11, 6
    363e:	02 c0       	rjmp	.+4      	; 0x3644 <conv_int+0x90>
    3640:	c2 60       	ori	r28, 0x02	; 2
    3642:	01 c0       	rjmp	.+2      	; 0x3646 <conv_int+0x92>
    3644:	c2 61       	ori	r28, 0x12	; 18
    3646:	da 2d       	mov	r29, r10
    3648:	81 2c       	mov	r8, r1
    364a:	91 2c       	mov	r9, r1
    364c:	54 01       	movw	r10, r8
    364e:	20 ed       	ldi	r18, 0xD0	; 208
    3650:	28 0f       	add	r18, r24
    3652:	28 30       	cpi	r18, 0x08	; 8
    3654:	80 f0       	brcs	.+32     	; 0x3676 <conv_int+0xc2>
    3656:	c4 ff       	sbrs	r28, 4
    3658:	04 c0       	rjmp	.+8      	; 0x3662 <conv_int+0xae>
    365a:	b8 01       	movw	r22, r16
    365c:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <ungetc>
    3660:	19 c0       	rjmp	.+50     	; 0x3694 <conv_int+0xe0>
    3662:	2a 30       	cpi	r18, 0x0A	; 10
    3664:	40 f0       	brcs	.+16     	; 0x3676 <conv_int+0xc2>
    3666:	c6 ff       	sbrs	r28, 6
    3668:	f8 cf       	rjmp	.-16     	; 0x365a <conv_int+0xa6>
    366a:	2f 7d       	andi	r18, 0xDF	; 223
    366c:	3f ee       	ldi	r19, 0xEF	; 239
    366e:	32 0f       	add	r19, r18
    3670:	36 30       	cpi	r19, 0x06	; 6
    3672:	98 f7       	brcc	.-26     	; 0x365a <conv_int+0xa6>
    3674:	27 50       	subi	r18, 0x07	; 7
    3676:	4c 2f       	mov	r20, r28
    3678:	c5 01       	movw	r24, r10
    367a:	b4 01       	movw	r22, r8
    367c:	0e 94 9a 1a 	call	0x3534	; 0x3534 <mulacc>
    3680:	4b 01       	movw	r8, r22
    3682:	5c 01       	movw	r10, r24
    3684:	c2 60       	ori	r28, 0x02	; 2
    3686:	d1 50       	subi	r29, 0x01	; 1
    3688:	59 f0       	breq	.+22     	; 0x36a0 <conv_int+0xec>
    368a:	c8 01       	movw	r24, r16
    368c:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    3690:	97 ff       	sbrs	r25, 7
    3692:	dd cf       	rjmp	.-70     	; 0x364e <conv_int+0x9a>
    3694:	c1 fd       	sbrc	r28, 1
    3696:	04 c0       	rjmp	.+8      	; 0x36a0 <conv_int+0xec>
    3698:	aa cf       	rjmp	.-172    	; 0x35ee <conv_int+0x3a>
    369a:	81 2c       	mov	r8, r1
    369c:	91 2c       	mov	r9, r1
    369e:	54 01       	movw	r10, r8
    36a0:	c7 ff       	sbrs	r28, 7
    36a2:	08 c0       	rjmp	.+16     	; 0x36b4 <conv_int+0x100>
    36a4:	b0 94       	com	r11
    36a6:	a0 94       	com	r10
    36a8:	90 94       	com	r9
    36aa:	80 94       	com	r8
    36ac:	81 1c       	adc	r8, r1
    36ae:	91 1c       	adc	r9, r1
    36b0:	a1 1c       	adc	r10, r1
    36b2:	b1 1c       	adc	r11, r1
    36b4:	2c 2f       	mov	r18, r28
    36b6:	b5 01       	movw	r22, r10
    36b8:	a4 01       	movw	r20, r8
    36ba:	c7 01       	movw	r24, r14
    36bc:	0e 94 8e 1a 	call	0x351c	; 0x351c <putval>
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	df 91       	pop	r29
    36c4:	cf 91       	pop	r28
    36c6:	1f 91       	pop	r17
    36c8:	0f 91       	pop	r16
    36ca:	ff 90       	pop	r15
    36cc:	ef 90       	pop	r14
    36ce:	bf 90       	pop	r11
    36d0:	af 90       	pop	r10
    36d2:	9f 90       	pop	r9
    36d4:	8f 90       	pop	r8
    36d6:	08 95       	ret

000036d8 <conv_brk>:
    36d8:	a0 e2       	ldi	r26, 0x20	; 32
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	e2 e7       	ldi	r30, 0x72	; 114
    36de:	fb e1       	ldi	r31, 0x1B	; 27
    36e0:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__prologue_saves__+0x6>
    36e4:	5c 01       	movw	r10, r24
    36e6:	96 2e       	mov	r9, r22
    36e8:	7a 01       	movw	r14, r20
    36ea:	f9 01       	movw	r30, r18
    36ec:	8e 01       	movw	r16, r28
    36ee:	0f 5f       	subi	r16, 0xFF	; 255
    36f0:	1f 4f       	sbci	r17, 0xFF	; 255
    36f2:	68 01       	movw	r12, r16
    36f4:	80 e2       	ldi	r24, 0x20	; 32
    36f6:	d8 01       	movw	r26, r16
    36f8:	1d 92       	st	X+, r1
    36fa:	8a 95       	dec	r24
    36fc:	e9 f7       	brne	.-6      	; 0x36f8 <conv_brk+0x20>
    36fe:	d5 01       	movw	r26, r10
    3700:	13 96       	adiw	r26, 0x03	; 3
    3702:	8c 90       	ld	r8, X
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	61 2c       	mov	r6, r1
    370a:	71 2c       	mov	r7, r1
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	61 e0       	ldi	r22, 0x01	; 1
    3710:	70 e0       	ldi	r23, 0x00	; 0
    3712:	83 fc       	sbrc	r8, 3
    3714:	25 91       	lpm	r18, Z+
    3716:	83 fe       	sbrs	r8, 3
    3718:	21 91       	ld	r18, Z+
    371a:	8f 01       	movw	r16, r30
    371c:	52 2e       	mov	r5, r18
    371e:	21 11       	cpse	r18, r1
    3720:	03 c0       	rjmp	.+6      	; 0x3728 <conv_brk+0x50>
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	92 c0       	rjmp	.+292    	; 0x384c <conv_brk+0x174>
    3728:	2e 35       	cpi	r18, 0x5E	; 94
    372a:	11 f4       	brne	.+4      	; 0x3730 <conv_brk+0x58>
    372c:	00 97       	sbiw	r24, 0x00	; 0
    372e:	51 f1       	breq	.+84     	; 0x3784 <conv_brk+0xac>
    3730:	43 2f       	mov	r20, r19
    3732:	50 e0       	ldi	r21, 0x00	; 0
    3734:	48 17       	cp	r20, r24
    3736:	59 07       	cpc	r21, r25
    3738:	3c f4       	brge	.+14     	; 0x3748 <conv_brk+0x70>
    373a:	2d 35       	cpi	r18, 0x5D	; 93
    373c:	59 f1       	breq	.+86     	; 0x3794 <conv_brk+0xbc>
    373e:	2d 32       	cpi	r18, 0x2D	; 45
    3740:	19 f4       	brne	.+6      	; 0x3748 <conv_brk+0x70>
    3742:	77 20       	and	r7, r7
    3744:	09 f1       	breq	.+66     	; 0x3788 <conv_brk+0xb0>
    3746:	03 c0       	rjmp	.+6      	; 0x374e <conv_brk+0x76>
    3748:	77 20       	and	r7, r7
    374a:	09 f4       	brne	.+2      	; 0x374e <conv_brk+0x76>
    374c:	6a c0       	rjmp	.+212    	; 0x3822 <conv_brk+0x14a>
    374e:	45 2d       	mov	r20, r5
    3750:	46 95       	lsr	r20
    3752:	46 95       	lsr	r20
    3754:	46 95       	lsr	r20
    3756:	d6 01       	movw	r26, r12
    3758:	a4 0f       	add	r26, r20
    375a:	b1 1d       	adc	r27, r1
    375c:	45 2d       	mov	r20, r5
    375e:	47 70       	andi	r20, 0x07	; 7
    3760:	8b 01       	movw	r16, r22
    3762:	02 c0       	rjmp	.+4      	; 0x3768 <conv_brk+0x90>
    3764:	00 0f       	add	r16, r16
    3766:	11 1f       	adc	r17, r17
    3768:	4a 95       	dec	r20
    376a:	e2 f7       	brpl	.-8      	; 0x3764 <conv_brk+0x8c>
    376c:	a8 01       	movw	r20, r16
    376e:	5c 91       	ld	r21, X
    3770:	45 2b       	or	r20, r21
    3772:	4c 93       	st	X, r20
    3774:	65 14       	cp	r6, r5
    3776:	59 f0       	breq	.+22     	; 0x378e <conv_brk+0xb6>
    3778:	56 14       	cp	r5, r6
    377a:	10 f4       	brcc	.+4      	; 0x3780 <conv_brk+0xa8>
    377c:	53 94       	inc	r5
    377e:	e7 cf       	rjmp	.-50     	; 0x374e <conv_brk+0x76>
    3780:	5a 94       	dec	r5
    3782:	e5 cf       	rjmp	.-54     	; 0x374e <conv_brk+0x76>
    3784:	31 e0       	ldi	r19, 0x01	; 1
    3786:	04 c0       	rjmp	.+8      	; 0x3790 <conv_brk+0xb8>
    3788:	77 24       	eor	r7, r7
    378a:	73 94       	inc	r7
    378c:	01 c0       	rjmp	.+2      	; 0x3790 <conv_brk+0xb8>
    378e:	71 2c       	mov	r7, r1
    3790:	01 96       	adiw	r24, 0x01	; 1
    3792:	bf cf       	rjmp	.-130    	; 0x3712 <conv_brk+0x3a>
    3794:	77 20       	and	r7, r7
    3796:	19 f0       	breq	.+6      	; 0x379e <conv_brk+0xc6>
    3798:	8e 81       	ldd	r24, Y+6	; 0x06
    379a:	80 62       	ori	r24, 0x20	; 32
    379c:	8e 83       	std	Y+6, r24	; 0x06
    379e:	31 11       	cpse	r19, r1
    37a0:	03 c0       	rjmp	.+6      	; 0x37a8 <conv_brk+0xd0>
    37a2:	88 24       	eor	r8, r8
    37a4:	83 94       	inc	r8
    37a6:	17 c0       	rjmp	.+46     	; 0x37d6 <conv_brk+0xfe>
    37a8:	f6 01       	movw	r30, r12
    37aa:	9e 01       	movw	r18, r28
    37ac:	2f 5d       	subi	r18, 0xDF	; 223
    37ae:	3f 4f       	sbci	r19, 0xFF	; 255
    37b0:	80 81       	ld	r24, Z
    37b2:	80 95       	com	r24
    37b4:	81 93       	st	Z+, r24
    37b6:	2e 17       	cp	r18, r30
    37b8:	3f 07       	cpc	r19, r31
    37ba:	d1 f7       	brne	.-12     	; 0x37b0 <conv_brk+0xd8>
    37bc:	f2 cf       	rjmp	.-28     	; 0x37a2 <conv_brk+0xca>
    37be:	e1 14       	cp	r14, r1
    37c0:	f1 04       	cpc	r15, r1
    37c2:	29 f0       	breq	.+10     	; 0x37ce <conv_brk+0xf6>
    37c4:	d7 01       	movw	r26, r14
    37c6:	8c 93       	st	X, r24
    37c8:	f7 01       	movw	r30, r14
    37ca:	31 96       	adiw	r30, 0x01	; 1
    37cc:	7f 01       	movw	r14, r30
    37ce:	9a 94       	dec	r9
    37d0:	81 2c       	mov	r8, r1
    37d2:	99 20       	and	r9, r9
    37d4:	f9 f0       	breq	.+62     	; 0x3814 <conv_brk+0x13c>
    37d6:	c5 01       	movw	r24, r10
    37d8:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    37dc:	97 fd       	sbrc	r25, 7
    37de:	18 c0       	rjmp	.+48     	; 0x3810 <conv_brk+0x138>
    37e0:	fc 01       	movw	r30, r24
    37e2:	ff 27       	eor	r31, r31
    37e4:	23 e0       	ldi	r18, 0x03	; 3
    37e6:	f5 95       	asr	r31
    37e8:	e7 95       	ror	r30
    37ea:	2a 95       	dec	r18
    37ec:	e1 f7       	brne	.-8      	; 0x37e6 <conv_brk+0x10e>
    37ee:	ec 0d       	add	r30, r12
    37f0:	fd 1d       	adc	r31, r13
    37f2:	20 81       	ld	r18, Z
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	ac 01       	movw	r20, r24
    37f8:	47 70       	andi	r20, 0x07	; 7
    37fa:	55 27       	eor	r21, r21
    37fc:	02 c0       	rjmp	.+4      	; 0x3802 <conv_brk+0x12a>
    37fe:	35 95       	asr	r19
    3800:	27 95       	ror	r18
    3802:	4a 95       	dec	r20
    3804:	e2 f7       	brpl	.-8      	; 0x37fe <conv_brk+0x126>
    3806:	20 fd       	sbrc	r18, 0
    3808:	da cf       	rjmp	.-76     	; 0x37be <conv_brk+0xe6>
    380a:	b5 01       	movw	r22, r10
    380c:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <ungetc>
    3810:	81 10       	cpse	r8, r1
    3812:	87 cf       	rjmp	.-242    	; 0x3722 <conv_brk+0x4a>
    3814:	e1 14       	cp	r14, r1
    3816:	f1 04       	cpc	r15, r1
    3818:	11 f0       	breq	.+4      	; 0x381e <conv_brk+0x146>
    381a:	d7 01       	movw	r26, r14
    381c:	1c 92       	st	X, r1
    381e:	c8 01       	movw	r24, r16
    3820:	15 c0       	rjmp	.+42     	; 0x384c <conv_brk+0x174>
    3822:	42 2f       	mov	r20, r18
    3824:	46 95       	lsr	r20
    3826:	46 95       	lsr	r20
    3828:	46 95       	lsr	r20
    382a:	d6 01       	movw	r26, r12
    382c:	a4 0f       	add	r26, r20
    382e:	b1 1d       	adc	r27, r1
    3830:	42 2f       	mov	r20, r18
    3832:	47 70       	andi	r20, 0x07	; 7
    3834:	8b 01       	movw	r16, r22
    3836:	02 c0       	rjmp	.+4      	; 0x383c <conv_brk+0x164>
    3838:	00 0f       	add	r16, r16
    383a:	11 1f       	adc	r17, r17
    383c:	4a 95       	dec	r20
    383e:	e2 f7       	brpl	.-8      	; 0x3838 <conv_brk+0x160>
    3840:	a8 01       	movw	r20, r16
    3842:	5c 91       	ld	r21, X
    3844:	45 2b       	or	r20, r21
    3846:	4c 93       	st	X, r20
    3848:	62 2e       	mov	r6, r18
    384a:	a2 cf       	rjmp	.-188    	; 0x3790 <conv_brk+0xb8>
    384c:	a0 96       	adiw	r28, 0x20	; 32
    384e:	ef e0       	ldi	r30, 0x0F	; 15
    3850:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__epilogue_restores__+0x6>

00003854 <vfscanf>:
    3854:	a0 e0       	ldi	r26, 0x00	; 0
    3856:	b0 e0       	ldi	r27, 0x00	; 0
    3858:	e0 e3       	ldi	r30, 0x30	; 48
    385a:	fc e1       	ldi	r31, 0x1C	; 28
    385c:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__prologue_saves__+0x6>
    3860:	6c 01       	movw	r12, r24
    3862:	eb 01       	movw	r28, r22
    3864:	5a 01       	movw	r10, r20
    3866:	fc 01       	movw	r30, r24
    3868:	17 82       	std	Z+7, r1	; 0x07
    386a:	16 82       	std	Z+6, r1	; 0x06
    386c:	51 2c       	mov	r5, r1
    386e:	f6 01       	movw	r30, r12
    3870:	e3 80       	ldd	r14, Z+3	; 0x03
    3872:	fe 01       	movw	r30, r28
    3874:	e3 fc       	sbrc	r14, 3
    3876:	85 91       	lpm	r24, Z+
    3878:	e3 fe       	sbrs	r14, 3
    387a:	81 91       	ld	r24, Z+
    387c:	18 2f       	mov	r17, r24
    387e:	ef 01       	movw	r28, r30
    3880:	88 23       	and	r24, r24
    3882:	09 f4       	brne	.+2      	; 0x3886 <vfscanf+0x32>
    3884:	ee c0       	rjmp	.+476    	; 0x3a62 <vfscanf+0x20e>
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <isspace>
    388c:	89 2b       	or	r24, r25
    388e:	21 f0       	breq	.+8      	; 0x3898 <vfscanf+0x44>
    3890:	c6 01       	movw	r24, r12
    3892:	0e 94 c1 1a 	call	0x3582	; 0x3582 <skip_spaces>
    3896:	eb cf       	rjmp	.-42     	; 0x386e <vfscanf+0x1a>
    3898:	15 32       	cpi	r17, 0x25	; 37
    389a:	41 f4       	brne	.+16     	; 0x38ac <vfscanf+0x58>
    389c:	fe 01       	movw	r30, r28
    389e:	e3 fc       	sbrc	r14, 3
    38a0:	15 91       	lpm	r17, Z+
    38a2:	e3 fe       	sbrs	r14, 3
    38a4:	11 91       	ld	r17, Z+
    38a6:	ef 01       	movw	r28, r30
    38a8:	15 32       	cpi	r17, 0x25	; 37
    38aa:	81 f4       	brne	.+32     	; 0x38cc <vfscanf+0x78>
    38ac:	c6 01       	movw	r24, r12
    38ae:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    38b2:	97 fd       	sbrc	r25, 7
    38b4:	d4 c0       	rjmp	.+424    	; 0x3a5e <vfscanf+0x20a>
    38b6:	41 2f       	mov	r20, r17
    38b8:	50 e0       	ldi	r21, 0x00	; 0
    38ba:	9c 01       	movw	r18, r24
    38bc:	33 27       	eor	r19, r19
    38be:	24 17       	cp	r18, r20
    38c0:	35 07       	cpc	r19, r21
    38c2:	a9 f2       	breq	.-86     	; 0x386e <vfscanf+0x1a>
    38c4:	b6 01       	movw	r22, r12
    38c6:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <ungetc>
    38ca:	cb c0       	rjmp	.+406    	; 0x3a62 <vfscanf+0x20e>
    38cc:	1a 32       	cpi	r17, 0x2A	; 42
    38ce:	39 f4       	brne	.+14     	; 0x38de <vfscanf+0x8a>
    38d0:	e3 fc       	sbrc	r14, 3
    38d2:	15 91       	lpm	r17, Z+
    38d4:	e3 fe       	sbrs	r14, 3
    38d6:	11 91       	ld	r17, Z+
    38d8:	ef 01       	movw	r28, r30
    38da:	01 e0       	ldi	r16, 0x01	; 1
    38dc:	01 c0       	rjmp	.+2      	; 0x38e0 <vfscanf+0x8c>
    38de:	00 e0       	ldi	r16, 0x00	; 0
    38e0:	f1 2c       	mov	r15, r1
    38e2:	20 ed       	ldi	r18, 0xD0	; 208
    38e4:	21 0f       	add	r18, r17
    38e6:	2a 30       	cpi	r18, 0x0A	; 10
    38e8:	80 f4       	brcc	.+32     	; 0x390a <vfscanf+0xb6>
    38ea:	02 60       	ori	r16, 0x02	; 2
    38ec:	6f 2d       	mov	r22, r15
    38ee:	70 e0       	ldi	r23, 0x00	; 0
    38f0:	80 e0       	ldi	r24, 0x00	; 0
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	40 e2       	ldi	r20, 0x20	; 32
    38f6:	0e 94 9a 1a 	call	0x3534	; 0x3534 <mulacc>
    38fa:	f6 2e       	mov	r15, r22
    38fc:	fe 01       	movw	r30, r28
    38fe:	e3 fc       	sbrc	r14, 3
    3900:	15 91       	lpm	r17, Z+
    3902:	e3 fe       	sbrs	r14, 3
    3904:	11 91       	ld	r17, Z+
    3906:	ef 01       	movw	r28, r30
    3908:	ec cf       	rjmp	.-40     	; 0x38e2 <vfscanf+0x8e>
    390a:	01 ff       	sbrs	r16, 1
    390c:	03 c0       	rjmp	.+6      	; 0x3914 <vfscanf+0xc0>
    390e:	f1 10       	cpse	r15, r1
    3910:	03 c0       	rjmp	.+6      	; 0x3918 <vfscanf+0xc4>
    3912:	a7 c0       	rjmp	.+334    	; 0x3a62 <vfscanf+0x20e>
    3914:	ff 24       	eor	r15, r15
    3916:	fa 94       	dec	r15
    3918:	18 36       	cpi	r17, 0x68	; 104
    391a:	19 f0       	breq	.+6      	; 0x3922 <vfscanf+0xce>
    391c:	1c 36       	cpi	r17, 0x6C	; 108
    391e:	51 f0       	breq	.+20     	; 0x3934 <vfscanf+0xe0>
    3920:	10 c0       	rjmp	.+32     	; 0x3942 <vfscanf+0xee>
    3922:	fe 01       	movw	r30, r28
    3924:	e3 fc       	sbrc	r14, 3
    3926:	15 91       	lpm	r17, Z+
    3928:	e3 fe       	sbrs	r14, 3
    392a:	11 91       	ld	r17, Z+
    392c:	ef 01       	movw	r28, r30
    392e:	18 36       	cpi	r17, 0x68	; 104
    3930:	41 f4       	brne	.+16     	; 0x3942 <vfscanf+0xee>
    3932:	08 60       	ori	r16, 0x08	; 8
    3934:	04 60       	ori	r16, 0x04	; 4
    3936:	fe 01       	movw	r30, r28
    3938:	e3 fc       	sbrc	r14, 3
    393a:	15 91       	lpm	r17, Z+
    393c:	e3 fe       	sbrs	r14, 3
    393e:	11 91       	ld	r17, Z+
    3940:	ef 01       	movw	r28, r30
    3942:	11 23       	and	r17, r17
    3944:	09 f4       	brne	.+2      	; 0x3948 <vfscanf+0xf4>
    3946:	8d c0       	rjmp	.+282    	; 0x3a62 <vfscanf+0x20e>
    3948:	61 2f       	mov	r22, r17
    394a:	70 e0       	ldi	r23, 0x00	; 0
    394c:	8a e6       	ldi	r24, 0x6A	; 106
    394e:	91 e0       	ldi	r25, 0x01	; 1
    3950:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <strchr_P>
    3954:	89 2b       	or	r24, r25
    3956:	09 f4       	brne	.+2      	; 0x395a <vfscanf+0x106>
    3958:	84 c0       	rjmp	.+264    	; 0x3a62 <vfscanf+0x20e>
    395a:	00 fd       	sbrc	r16, 0
    395c:	07 c0       	rjmp	.+14     	; 0x396c <vfscanf+0x118>
    395e:	f5 01       	movw	r30, r10
    3960:	80 80       	ld	r8, Z
    3962:	91 80       	ldd	r9, Z+1	; 0x01
    3964:	c5 01       	movw	r24, r10
    3966:	02 96       	adiw	r24, 0x02	; 2
    3968:	5c 01       	movw	r10, r24
    396a:	02 c0       	rjmp	.+4      	; 0x3970 <vfscanf+0x11c>
    396c:	81 2c       	mov	r8, r1
    396e:	91 2c       	mov	r9, r1
    3970:	1e 36       	cpi	r17, 0x6E	; 110
    3972:	51 f4       	brne	.+20     	; 0x3988 <vfscanf+0x134>
    3974:	f6 01       	movw	r30, r12
    3976:	46 81       	ldd	r20, Z+6	; 0x06
    3978:	57 81       	ldd	r21, Z+7	; 0x07
    397a:	60 e0       	ldi	r22, 0x00	; 0
    397c:	70 e0       	ldi	r23, 0x00	; 0
    397e:	20 2f       	mov	r18, r16
    3980:	c4 01       	movw	r24, r8
    3982:	0e 94 8e 1a 	call	0x351c	; 0x351c <putval>
    3986:	73 cf       	rjmp	.-282    	; 0x386e <vfscanf+0x1a>
    3988:	13 36       	cpi	r17, 0x63	; 99
    398a:	a9 f4       	brne	.+42     	; 0x39b6 <vfscanf+0x162>
    398c:	01 fd       	sbrc	r16, 1
    398e:	02 c0       	rjmp	.+4      	; 0x3994 <vfscanf+0x140>
    3990:	ff 24       	eor	r15, r15
    3992:	f3 94       	inc	r15
    3994:	c6 01       	movw	r24, r12
    3996:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    399a:	97 fd       	sbrc	r25, 7
    399c:	60 c0       	rjmp	.+192    	; 0x3a5e <vfscanf+0x20a>
    399e:	81 14       	cp	r8, r1
    39a0:	91 04       	cpc	r9, r1
    39a2:	29 f0       	breq	.+10     	; 0x39ae <vfscanf+0x15a>
    39a4:	f4 01       	movw	r30, r8
    39a6:	80 83       	st	Z, r24
    39a8:	c4 01       	movw	r24, r8
    39aa:	01 96       	adiw	r24, 0x01	; 1
    39ac:	4c 01       	movw	r8, r24
    39ae:	fa 94       	dec	r15
    39b0:	f1 10       	cpse	r15, r1
    39b2:	f0 cf       	rjmp	.-32     	; 0x3994 <vfscanf+0x140>
    39b4:	50 c0       	rjmp	.+160    	; 0x3a56 <vfscanf+0x202>
    39b6:	1b 35       	cpi	r17, 0x5B	; 91
    39b8:	59 f4       	brne	.+22     	; 0x39d0 <vfscanf+0x17c>
    39ba:	9e 01       	movw	r18, r28
    39bc:	a4 01       	movw	r20, r8
    39be:	6f 2d       	mov	r22, r15
    39c0:	c6 01       	movw	r24, r12
    39c2:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <conv_brk>
    39c6:	ec 01       	movw	r28, r24
    39c8:	89 2b       	or	r24, r25
    39ca:	09 f0       	breq	.+2      	; 0x39ce <vfscanf+0x17a>
    39cc:	44 c0       	rjmp	.+136    	; 0x3a56 <vfscanf+0x202>
    39ce:	3e c0       	rjmp	.+124    	; 0x3a4c <vfscanf+0x1f8>
    39d0:	c6 01       	movw	r24, r12
    39d2:	0e 94 c1 1a 	call	0x3582	; 0x3582 <skip_spaces>
    39d6:	97 fd       	sbrc	r25, 7
    39d8:	42 c0       	rjmp	.+132    	; 0x3a5e <vfscanf+0x20a>
    39da:	1f 36       	cpi	r17, 0x6F	; 111
    39dc:	61 f1       	breq	.+88     	; 0x3a36 <vfscanf+0x1e2>
    39de:	28 f4       	brcc	.+10     	; 0x39ea <vfscanf+0x196>
    39e0:	14 36       	cpi	r17, 0x64	; 100
    39e2:	39 f1       	breq	.+78     	; 0x3a32 <vfscanf+0x1de>
    39e4:	19 36       	cpi	r17, 0x69	; 105
    39e6:	51 f1       	breq	.+84     	; 0x3a3c <vfscanf+0x1e8>
    39e8:	28 c0       	rjmp	.+80     	; 0x3a3a <vfscanf+0x1e6>
    39ea:	13 37       	cpi	r17, 0x73	; 115
    39ec:	71 f0       	breq	.+28     	; 0x3a0a <vfscanf+0x1b6>
    39ee:	15 37       	cpi	r17, 0x75	; 117
    39f0:	01 f1       	breq	.+64     	; 0x3a32 <vfscanf+0x1de>
    39f2:	23 c0       	rjmp	.+70     	; 0x3a3a <vfscanf+0x1e6>
    39f4:	81 14       	cp	r8, r1
    39f6:	91 04       	cpc	r9, r1
    39f8:	29 f0       	breq	.+10     	; 0x3a04 <vfscanf+0x1b0>
    39fa:	f4 01       	movw	r30, r8
    39fc:	60 82       	st	Z, r6
    39fe:	c4 01       	movw	r24, r8
    3a00:	01 96       	adiw	r24, 0x01	; 1
    3a02:	4c 01       	movw	r8, r24
    3a04:	fa 94       	dec	r15
    3a06:	ff 20       	and	r15, r15
    3a08:	71 f0       	breq	.+28     	; 0x3a26 <vfscanf+0x1d2>
    3a0a:	c6 01       	movw	r24, r12
    3a0c:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fgetc>
    3a10:	3c 01       	movw	r6, r24
    3a12:	97 fd       	sbrc	r25, 7
    3a14:	08 c0       	rjmp	.+16     	; 0x3a26 <vfscanf+0x1d2>
    3a16:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <isspace>
    3a1a:	89 2b       	or	r24, r25
    3a1c:	59 f3       	breq	.-42     	; 0x39f4 <vfscanf+0x1a0>
    3a1e:	b6 01       	movw	r22, r12
    3a20:	c3 01       	movw	r24, r6
    3a22:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <ungetc>
    3a26:	81 14       	cp	r8, r1
    3a28:	91 04       	cpc	r9, r1
    3a2a:	a9 f0       	breq	.+42     	; 0x3a56 <vfscanf+0x202>
    3a2c:	f4 01       	movw	r30, r8
    3a2e:	10 82       	st	Z, r1
    3a30:	12 c0       	rjmp	.+36     	; 0x3a56 <vfscanf+0x202>
    3a32:	00 62       	ori	r16, 0x20	; 32
    3a34:	03 c0       	rjmp	.+6      	; 0x3a3c <vfscanf+0x1e8>
    3a36:	00 61       	ori	r16, 0x10	; 16
    3a38:	01 c0       	rjmp	.+2      	; 0x3a3c <vfscanf+0x1e8>
    3a3a:	00 64       	ori	r16, 0x40	; 64
    3a3c:	20 2f       	mov	r18, r16
    3a3e:	a4 01       	movw	r20, r8
    3a40:	6f 2d       	mov	r22, r15
    3a42:	c6 01       	movw	r24, r12
    3a44:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <conv_int>
    3a48:	81 11       	cpse	r24, r1
    3a4a:	05 c0       	rjmp	.+10     	; 0x3a56 <vfscanf+0x202>
    3a4c:	f6 01       	movw	r30, r12
    3a4e:	83 81       	ldd	r24, Z+3	; 0x03
    3a50:	80 73       	andi	r24, 0x30	; 48
    3a52:	29 f4       	brne	.+10     	; 0x3a5e <vfscanf+0x20a>
    3a54:	06 c0       	rjmp	.+12     	; 0x3a62 <vfscanf+0x20e>
    3a56:	00 fd       	sbrc	r16, 0
    3a58:	0a cf       	rjmp	.-492    	; 0x386e <vfscanf+0x1a>
    3a5a:	53 94       	inc	r5
    3a5c:	08 cf       	rjmp	.-496    	; 0x386e <vfscanf+0x1a>
    3a5e:	55 20       	and	r5, r5
    3a60:	19 f0       	breq	.+6      	; 0x3a68 <vfscanf+0x214>
    3a62:	85 2d       	mov	r24, r5
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	02 c0       	rjmp	.+4      	; 0x3a6c <vfscanf+0x218>
    3a68:	8f ef       	ldi	r24, 0xFF	; 255
    3a6a:	9f ef       	ldi	r25, 0xFF	; 255
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
    3a70:	ef e0       	ldi	r30, 0x0F	; 15
    3a72:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__epilogue_restores__+0x6>

00003a76 <isspace>:
    3a76:	91 11       	cpse	r25, r1
    3a78:	0c 94 a6 1d 	jmp	0x3b4c	; 0x3b4c <__ctype_isfalse>
    3a7c:	80 32       	cpi	r24, 0x20	; 32
    3a7e:	19 f0       	breq	.+6      	; 0x3a86 <isspace+0x10>
    3a80:	89 50       	subi	r24, 0x09	; 9
    3a82:	85 50       	subi	r24, 0x05	; 5
    3a84:	c8 f7       	brcc	.-14     	; 0x3a78 <isspace+0x2>
    3a86:	08 95       	ret

00003a88 <strchr_P>:
    3a88:	fc 01       	movw	r30, r24
    3a8a:	05 90       	lpm	r0, Z+
    3a8c:	06 16       	cp	r0, r22
    3a8e:	21 f0       	breq	.+8      	; 0x3a98 <strchr_P+0x10>
    3a90:	00 20       	and	r0, r0
    3a92:	d9 f7       	brne	.-10     	; 0x3a8a <strchr_P+0x2>
    3a94:	c0 01       	movw	r24, r0
    3a96:	08 95       	ret
    3a98:	31 97       	sbiw	r30, 0x01	; 1
    3a9a:	cf 01       	movw	r24, r30
    3a9c:	08 95       	ret

00003a9e <fgetc>:
    3a9e:	cf 93       	push	r28
    3aa0:	df 93       	push	r29
    3aa2:	ec 01       	movw	r28, r24
    3aa4:	2b 81       	ldd	r18, Y+3	; 0x03
    3aa6:	20 ff       	sbrs	r18, 0
    3aa8:	33 c0       	rjmp	.+102    	; 0x3b10 <fgetc+0x72>
    3aaa:	26 ff       	sbrs	r18, 6
    3aac:	0a c0       	rjmp	.+20     	; 0x3ac2 <fgetc+0x24>
    3aae:	2f 7b       	andi	r18, 0xBF	; 191
    3ab0:	2b 83       	std	Y+3, r18	; 0x03
    3ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ab4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ab6:	01 96       	adiw	r24, 0x01	; 1
    3ab8:	9f 83       	std	Y+7, r25	; 0x07
    3aba:	8e 83       	std	Y+6, r24	; 0x06
    3abc:	8a 81       	ldd	r24, Y+2	; 0x02
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	29 c0       	rjmp	.+82     	; 0x3b14 <fgetc+0x76>
    3ac2:	22 ff       	sbrs	r18, 2
    3ac4:	0f c0       	rjmp	.+30     	; 0x3ae4 <fgetc+0x46>
    3ac6:	e8 81       	ld	r30, Y
    3ac8:	f9 81       	ldd	r31, Y+1	; 0x01
    3aca:	80 81       	ld	r24, Z
    3acc:	08 2e       	mov	r0, r24
    3ace:	00 0c       	add	r0, r0
    3ad0:	99 0b       	sbc	r25, r25
    3ad2:	00 97       	sbiw	r24, 0x00	; 0
    3ad4:	19 f4       	brne	.+6      	; 0x3adc <fgetc+0x3e>
    3ad6:	20 62       	ori	r18, 0x20	; 32
    3ad8:	2b 83       	std	Y+3, r18	; 0x03
    3ada:	1a c0       	rjmp	.+52     	; 0x3b10 <fgetc+0x72>
    3adc:	31 96       	adiw	r30, 0x01	; 1
    3ade:	f9 83       	std	Y+1, r31	; 0x01
    3ae0:	e8 83       	st	Y, r30
    3ae2:	0e c0       	rjmp	.+28     	; 0x3b00 <fgetc+0x62>
    3ae4:	ea 85       	ldd	r30, Y+10	; 0x0a
    3ae6:	fb 85       	ldd	r31, Y+11	; 0x0b
    3ae8:	09 95       	icall
    3aea:	97 ff       	sbrs	r25, 7
    3aec:	09 c0       	rjmp	.+18     	; 0x3b00 <fgetc+0x62>
    3aee:	2b 81       	ldd	r18, Y+3	; 0x03
    3af0:	01 96       	adiw	r24, 0x01	; 1
    3af2:	11 f0       	breq	.+4      	; 0x3af8 <fgetc+0x5a>
    3af4:	80 e2       	ldi	r24, 0x20	; 32
    3af6:	01 c0       	rjmp	.+2      	; 0x3afa <fgetc+0x5c>
    3af8:	80 e1       	ldi	r24, 0x10	; 16
    3afa:	82 2b       	or	r24, r18
    3afc:	8b 83       	std	Y+3, r24	; 0x03
    3afe:	08 c0       	rjmp	.+16     	; 0x3b10 <fgetc+0x72>
    3b00:	2e 81       	ldd	r18, Y+6	; 0x06
    3b02:	3f 81       	ldd	r19, Y+7	; 0x07
    3b04:	2f 5f       	subi	r18, 0xFF	; 255
    3b06:	3f 4f       	sbci	r19, 0xFF	; 255
    3b08:	3f 83       	std	Y+7, r19	; 0x07
    3b0a:	2e 83       	std	Y+6, r18	; 0x06
    3b0c:	99 27       	eor	r25, r25
    3b0e:	02 c0       	rjmp	.+4      	; 0x3b14 <fgetc+0x76>
    3b10:	8f ef       	ldi	r24, 0xFF	; 255
    3b12:	9f ef       	ldi	r25, 0xFF	; 255
    3b14:	df 91       	pop	r29
    3b16:	cf 91       	pop	r28
    3b18:	08 95       	ret

00003b1a <ungetc>:
    3b1a:	fb 01       	movw	r30, r22
    3b1c:	23 81       	ldd	r18, Z+3	; 0x03
    3b1e:	20 ff       	sbrs	r18, 0
    3b20:	12 c0       	rjmp	.+36     	; 0x3b46 <ungetc+0x2c>
    3b22:	26 fd       	sbrc	r18, 6
    3b24:	10 c0       	rjmp	.+32     	; 0x3b46 <ungetc+0x2c>
    3b26:	8f 3f       	cpi	r24, 0xFF	; 255
    3b28:	3f ef       	ldi	r19, 0xFF	; 255
    3b2a:	93 07       	cpc	r25, r19
    3b2c:	61 f0       	breq	.+24     	; 0x3b46 <ungetc+0x2c>
    3b2e:	82 83       	std	Z+2, r24	; 0x02
    3b30:	2f 7d       	andi	r18, 0xDF	; 223
    3b32:	20 64       	ori	r18, 0x40	; 64
    3b34:	23 83       	std	Z+3, r18	; 0x03
    3b36:	26 81       	ldd	r18, Z+6	; 0x06
    3b38:	37 81       	ldd	r19, Z+7	; 0x07
    3b3a:	21 50       	subi	r18, 0x01	; 1
    3b3c:	31 09       	sbc	r19, r1
    3b3e:	37 83       	std	Z+7, r19	; 0x07
    3b40:	26 83       	std	Z+6, r18	; 0x06
    3b42:	99 27       	eor	r25, r25
    3b44:	08 95       	ret
    3b46:	8f ef       	ldi	r24, 0xFF	; 255
    3b48:	9f ef       	ldi	r25, 0xFF	; 255
    3b4a:	08 95       	ret

00003b4c <__ctype_isfalse>:
    3b4c:	99 27       	eor	r25, r25
    3b4e:	88 27       	eor	r24, r24

00003b50 <__ctype_istrue>:
    3b50:	08 95       	ret

00003b52 <_exit>:
    3b52:	f8 94       	cli

00003b54 <__stop_program>:
    3b54:	ff cf       	rjmp	.-2      	; 0x3b54 <__stop_program>
