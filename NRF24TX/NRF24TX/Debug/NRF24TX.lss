
NRF24TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000f94  00001028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  00800066  00800066  0000102e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000102e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a84  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b7  00000000  00000000  00002c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db4  00000000  00000000  0000363b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  000043f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a9  00000000  00000000  000046b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e05  00000000  00000000  00004c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005a5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	f2 c0       	rjmp	.+484    	; 0x1ea <__vector_2>
   6:	e7 c0       	rjmp	.+462    	; 0x1d6 <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	13 c1       	rjmp	.+550    	; 0x234 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e9       	ldi	r30, 0x94	; 148
  3a:	ff e0       	ldi	r31, 0x0F	; 15
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 3a       	cpi	r26, 0xA9	; 169
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	96 d1       	rcall	.+812    	; 0x386 <main>
  5a:	9a c7       	rjmp	.+3892   	; 0xf90 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <ADC_Init>:
int count = 0;

//—————————————-
void ADC_Init(void)
{
   ADCSRA |= (1<<ADEN);//вкл АЦП
  5e:	86 b1       	in	r24, 0x06	; 6
  60:	80 68       	ori	r24, 0x80	; 128
  62:	86 b9       	out	0x06, r24	; 6
   ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//устанвоили 64кГЦ
  64:	86 b1       	in	r24, 0x06	; 6
  66:	87 60       	ori	r24, 0x07	; 7
  68:	86 b9       	out	0x06, r24	; 6
  6a:	08 95       	ret

0000006c <ADC_convert>:
  //включаем канал АЦП ADC0 для измерения напр аккумулятора
}
//—————————————-
void ADC_convert (void)
{
	ADCSRA |= (1<<ADSC);//начало измерений
  6c:	86 b1       	in	r24, 0x06	; 6
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADSC)));
  72:	36 99       	sbic	0x06, 6	; 6
  74:	fe cf       	rjmp	.-4      	; 0x72 <ADC_convert+0x6>
	if (count == 0)
  76:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  7a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  7e:	89 2b       	or	r24, r25
  80:	99 f4       	brne	.+38     	; 0xa8 <ADC_convert+0x3c>
	{
		//выключаем канал АЦП для измерения напр аккумулятора
		ADMUX |= (1<<MUX0);//включаем канал АЦП для измерения кол-ва дождя
  82:	87 b1       	in	r24, 0x07	; 7
  84:	81 60       	ori	r24, 0x01	; 1
  86:	87 b9       	out	0x07, r24	; 7
		count++;
  88:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  8c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
  96:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
		adc_value1 = ADC;
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	95 b1       	in	r25, 0x05	; 5
  9e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <adc_value1+0x1>
  a2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <adc_value1>
  a6:	08 95       	ret
	}
	else
	{
		ADMUX &= ~(1<<MUX0);//выключаем канал АЦП для измерения кол-ва дождя
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	87 b9       	out	0x07, r24	; 7
		//включаем канал АЦП для измерения напр аккумулятора
		count--;
  ae:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  b2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
  bc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
		adc_value2 = ADC;
  c0:	84 b1       	in	r24, 0x04	; 4
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <adc_value2+0x1>
  c8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <adc_value2>
  cc:	08 95       	ret

000000ce <dht22_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	83 ed       	ldi	r24, 0xD3	; 211
  d2:	90 e3       	ldi	r25, 0x30	; 48
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <dht22_init+0x6>
  dc:	00 c0       	rjmp	.+0      	; 0xde <dht22_init+0x10>
  de:	00 00       	nop
#include "DHT22.h"

uint8_t dht22_init (void)
{
	_delay_ms(2000);
	DDRD |= (1<<DHT22_PORT);   // set as output
  e0:	81 b3       	in	r24, 0x11	; 17
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<DHT22_PORT);// pull the pin high
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	82 bb       	out	0x12, r24	; 18

	return 0;
}
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret

000000f0 <dht22_GetData>:
uint8_t dht22_GetData (uint8_t *data)
{
  f0:	bc 01       	movw	r22, r24
	uint8_t i, j = 0;
	DDRD |= (1<<DHT22_PORT);   // set as output
  f2:	81 b3       	in	r24, 0x11	; 17
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	81 bb       	out	0x11, r24	; 17
	//reset ports
	PORTD &= ~(1<<DHT22_PORT);// pull the pin low
  f8:	82 b3       	in	r24, 0x12	; 18
  fa:	8f 77       	andi	r24, 0x7F	; 127
  fc:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<DHT22_PORT);// pull the pin high
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	80 68       	ori	r24, 0x80	; 128
 102:	82 bb       	out	0x12, r24	; 18
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	80 e7       	ldi	r24, 0x70	; 112
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <dht22_GetData+0x1a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <dht22_GetData+0x24>
 114:	00 00       	nop
	_delay_ms(100);
	//start
	PORTD &= ~(1<<DHT22_PORT);// pull the pin low
 116:	82 b3       	in	r24, 0x12	; 18
 118:	8f 77       	andi	r24, 0x7F	; 127
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	8f e9       	ldi	r24, 0x9F	; 159
 11e:	9c e8       	ldi	r25, 0x8C	; 140
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <dht22_GetData+0x30>
 124:	00 c0       	rjmp	.+0      	; 0x126 <dht22_GetData+0x36>
 126:	00 00       	nop
	_delay_ms(18);
	PORTD |= (1<<DHT22_PORT);// pull the pin high
 128:	82 b3       	in	r24, 0x12	; 18
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	82 bb       	out	0x12, r24	; 18
	//ждем ответа датчика
	DDRD &= ~(1<<DHT22_PORT);   // set as input
 12e:	91 b3       	in	r25, 0x11	; 17
 130:	9f 77       	andi	r25, 0x7F	; 127
 132:	91 bb       	out	0x11, r25	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	90 ea       	ldi	r25, 0xA0	; 160
 136:	9a 95       	dec	r25
 138:	f1 f7       	brne	.-4      	; 0x136 <dht22_GetData+0x46>
	_delay_us(60);//экспериментом выявлено 60 а не 40 сек
	//если датчик не ответил притягиванием шины, то ошибка
	if (PIND & (1 << DHT22_PORT))
 13a:	87 99       	sbic	0x10, 7	; 16
 13c:	35 c0       	rjmp	.+106    	; 0x1a8 <dht22_GetData+0xb8>
 13e:	25 ed       	ldi	r18, 0xD5	; 213
 140:	2a 95       	dec	r18
 142:	f1 f7       	brne	.-4      	; 0x140 <dht22_GetData+0x50>
 144:	00 00       	nop
	{
		return 0;
	}
	_delay_us(80);
	//если датчик не отпустил шину, то ошибка
	if (!(PIND & (1 << DHT22_PORT)))
 146:	87 9b       	sbis	0x10, 7	; 16
 148:	31 c0       	rjmp	.+98     	; 0x1ac <dht22_GetData+0xbc>
 14a:	85 ed       	ldi	r24, 0xD5	; 213
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <dht22_GetData+0x5c>
 150:	00 00       	nop
	}
	_delay_us(80);
	//читаем данные (записываем байты в массив наоборот,
	//т.к. сначала передается старший, чтобы потом
	//не переворачивать двухбайтовый результат
	for (j=0; j<5; j++)
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	25 c0       	rjmp	.+74     	; 0x1a0 <dht22_GetData+0xb0>
	{
		data[4-j] = 0;
 156:	e4 e0       	ldi	r30, 0x04	; 4
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	e8 1b       	sub	r30, r24
 15c:	f1 09       	sbc	r31, r1
 15e:	e6 0f       	add	r30, r22
 160:	f7 1f       	adc	r31, r23
 162:	10 82       	st	Z, r1
		for (i = 0; i<8; i++)
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	19 c0       	rjmp	.+50     	; 0x19a <dht22_GetData+0xaa>
		{
			while(!(PIND & (1 << DHT22_PORT)));//ждем отпускания шины
 168:	87 9b       	sbis	0x10, 7	; 16
 16a:	fe cf       	rjmp	.-4      	; 0x168 <dht22_GetData+0x78>
 16c:	2d e5       	ldi	r18, 0x5D	; 93
 16e:	2a 95       	dec	r18
 170:	f1 f7       	brne	.-4      	; 0x16e <dht22_GetData+0x7e>
 172:	00 00       	nop
			_delay_us(35);
			if (PIND & (1 << DHT22_PORT))//читаем результат по прошествии 30 микросекунд
 174:	87 9b       	sbis	0x10, 7	; 16
 176:	0e c0       	rjmp	.+28     	; 0x194 <dht22_GetData+0xa4>
			//если шина за это время не притянулась к земле, то значит это единица, иначе ноль
			data[4-j] |= (1<<(7-i));
 178:	47 e0       	ldi	r20, 0x07	; 7
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	49 1b       	sub	r20, r25
 17e:	51 09       	sbc	r21, r1
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <dht22_GetData+0x9a>
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	4a 95       	dec	r20
 18c:	e2 f7       	brpl	.-8      	; 0x186 <dht22_GetData+0x96>
 18e:	30 81       	ld	r19, Z
 190:	23 2b       	or	r18, r19
 192:	20 83       	st	Z, r18
			while(PIND & (1 << DHT22_PORT));//ждем пока датчик притянет шину(в случае единицы)
 194:	87 99       	sbic	0x10, 7	; 16
 196:	fe cf       	rjmp	.-4      	; 0x194 <dht22_GetData+0xa4>
	//т.к. сначала передается старший, чтобы потом
	//не переворачивать двухбайтовый результат
	for (j=0; j<5; j++)
	{
		data[4-j] = 0;
		for (i = 0; i<8; i++)
 198:	9f 5f       	subi	r25, 0xFF	; 255
 19a:	98 30       	cpi	r25, 0x08	; 8
 19c:	28 f3       	brcs	.-54     	; 0x168 <dht22_GetData+0x78>
	}
	_delay_us(80);
	//читаем данные (записываем байты в массив наоборот,
	//т.к. сначала передается старший, чтобы потом
	//не переворачивать двухбайтовый результат
	for (j=0; j<5; j++)
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	85 30       	cpi	r24, 0x05	; 5
 1a2:	c8 f2       	brcs	.-78     	; 0x156 <dht22_GetData+0x66>
			//если шина за это время не притянулась к земле, то значит это единица, иначе ноль
			data[4-j] |= (1<<(7-i));
			while(PIND & (1 << DHT22_PORT));//ждем пока датчик притянет шину(в случае единицы)
		}
	}
	return 1;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 95       	ret
	DDRD &= ~(1<<DHT22_PORT);   // set as input
	_delay_us(60);//экспериментом выявлено 60 а не 40 сек
	//если датчик не ответил притягиванием шины, то ошибка
	if (PIND & (1 << DHT22_PORT))
	{
		return 0;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	08 95       	ret
	}
	_delay_us(80);
	//если датчик не отпустил шину, то ошибка
	if (!(PIND & (1 << DHT22_PORT)))
	{
		return 0;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
			data[4-j] |= (1<<(7-i));
			while(PIND & (1 << DHT22_PORT));//ждем пока датчик притянет шину(в случае единицы)
		}
	}
	return 1;
 1ae:	08 95       	ret

000001b0 <timer2_ini>:
int INTER_COUNT;

void timer2_ini(void)
{
	//период 7.5 сек
	TIMSK &= ~(1<<OCIE2);
 1b0:	89 b7       	in	r24, 0x39	; 57
 1b2:	8f 77       	andi	r24, 0x7F	; 127
 1b4:	89 bf       	out	0x39, r24	; 57
	ASSR |= (1<<AS2);//ассинхронный режим
 1b6:	82 b5       	in	r24, 0x22	; 34
 1b8:	88 60       	ori	r24, 0x08	; 8
 1ba:	82 bd       	out	0x22, r24	; 34
	TCNT2 = 0;
 1bc:	14 bc       	out	0x24, r1	; 36
	TCCR2 |= (1<<WGM21); // устанавливаем режим СТС (сброс по совпадению)
 1be:	85 b5       	in	r24, 0x25	; 37
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0b11110000; //записываем в регистр число для сравнения 240
 1c4:	80 ef       	ldi	r24, 0xF0	; 240
 1c6:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1<<CS21)|(1<<CS20)|(1<<CS22);//установим делитель 1024.
 1c8:	85 b5       	in	r24, 0x25	; 37
 1ca:	87 60       	ori	r24, 0x07	; 7
 1cc:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2); //устанавливаем бит разрешения прерывания 2ого счетчика по совпадению с OCR2
 1ce:	89 b7       	in	r24, 0x39	; 57
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	89 bf       	out	0x39, r24	; 57
 1d4:	08 95       	ret

000001d6 <__vector_3>:
}
//——————————————–
int TIM2_COUNT = 0;
ISR (TIMER2_COMP_vect)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
  //  INTER_COUNT++;
  //  if (INTER_COUNT == 2) INTER_COUNT = 0;
}
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__vector_2>:
ISR(INT1_vect)
{
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
	hall_counter++;
 1f8:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <hall_counter>
 1fc:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <hall_counter+0x1>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <hall_counter+0x1>
 206:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <hall_counter>
}
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <timer_ini>:
void timer_ini(void)//период 2сек
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
 218:	8e b5       	in	r24, 0x2e	; 46
 21a:	88 60       	ori	r24, 0x08	; 8
 21c:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
 21e:	89 b7       	in	r24, 0x39	; 57
 220:	80 61       	ori	r24, 0x10	; 16
 222:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00111101; //записываем в регистр число для сравнения
 224:	8d e3       	ldi	r24, 0x3D	; 61
 226:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b00001001;
 228:	89 e0       	ldi	r24, 0x09	; 9
 22a:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS12)|(1<<CS10);//установим делитель 1024.
 22c:	8e b5       	in	r24, 0x2e	; 46
 22e:	85 60       	ori	r24, 0x05	; 5
 230:	8e bd       	out	0x2e, r24	; 46
 232:	08 95       	ret

00000234 <__vector_6>:
}
ISR (TIMER1_COMPA_vect)
{
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
   speed = hall_counter;
 242:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <hall_counter>
 246:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <hall_counter+0x1>
 24a:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <speed+0x1>
 24e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <speed>
   hall_counter = 0;
 252:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <hall_counter+0x1>
 256:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <hall_counter>
}
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <SPI_init>:
SPI_init(void) //инициализация SPI
{
	DDRB |= ((1<<SS)|(1<<MOSI)|(1<<CE)|(1<<SCK)); //ножки SPI на выход
 268:	87 b3       	in	r24, 0x17	; 23
 26a:	8e 62       	ori	r24, 0x2E	; 46
 26c:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<SS)|(1<<MOSI)|(1<<SCK)); //низкий уровень
 26e:	88 b3       	in	r24, 0x18	; 24
 270:	83 7d       	andi	r24, 0xD3	; 211
 272:	88 bb       	out	0x18, r24	; 24
	DDRD |= (1<<IRQ);//IRQ на выход, в передатчике он не используется
 274:	81 b3       	in	r24, 0x11	; 17
 276:	84 60       	ori	r24, 0x04	; 4
 278:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<IRQ);
 27a:	82 b3       	in	r24, 0x12	; 18
 27c:	8b 7f       	andi	r24, 0xFB	; 251
 27e:	82 bb       	out	0x12, r24	; 18
	HIGH_CSN;
 280:	88 b3       	in	r24, 0x18	; 24
 282:	84 60       	ori	r24, 0x04	; 4
 284:	88 bb       	out	0x18, r24	; 24
	SPCR = ((1<<SPE)|(1<<MSTR));//включим шину, объявим ведущим
 286:	80 e5       	ldi	r24, 0x50	; 80
 288:	8d b9       	out	0x0d, r24	; 13
}
 28a:	08 95       	ret

0000028c <port_init>:
//-------------------------------------------------------------
port_init(void)
{
	//датчик Холла для анемометра
	DDRD &= ~(1<<PORTD3);//hall-sensor - на вход
 28c:	81 b3       	in	r24, 0x11	; 17
 28e:	87 7f       	andi	r24, 0xF7	; 247
 290:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<PORTD3);
 292:	82 b3       	in	r24, 0x12	; 18
 294:	87 7f       	andi	r24, 0xF7	; 247
 296:	82 bb       	out	0x12, r24	; 18
	//управление транзистором
	DDRD |= (1<<TRANZISTOR);
 298:	81 b3       	in	r24, 0x11	; 17
 29a:	80 62       	ori	r24, 0x20	; 32
 29c:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<TRANZISTOR);
 29e:	82 b3       	in	r24, 0x12	; 18
 2a0:	8f 7d       	andi	r24, 0xDF	; 223
 2a2:	82 bb       	out	0x12, r24	; 18
	//герконы для флюгера
	DDRB &= ~(1<<GERKON1);//gerkon - на вход
 2a4:	87 b3       	in	r24, 0x17	; 23
 2a6:	8e 7f       	andi	r24, 0xFE	; 254
 2a8:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<GERKON1);
 2aa:	88 b3       	in	r24, 0x18	; 24
 2ac:	8e 7f       	andi	r24, 0xFE	; 254
 2ae:	88 bb       	out	0x18, r24	; 24
	DDRD &= ~((1<<GERKON2)|(1<<GERKON3)|(1<<GERKON4));
 2b0:	81 b3       	in	r24, 0x11	; 17
 2b2:	8c 7e       	andi	r24, 0xEC	; 236
 2b4:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~((1<<GERKON2)|(1<<GERKON3)|(1<<GERKON4));
 2b6:	82 b3       	in	r24, 0x12	; 18
 2b8:	8c 7e       	andi	r24, 0xEC	; 236
 2ba:	82 bb       	out	0x12, r24	; 18
	DDRC &= ~((1<<GERKON5)|(1<<GERKON6)|(1<<GERKON7)|(1<<GERKON8));
 2bc:	84 b3       	in	r24, 0x14	; 20
 2be:	83 7c       	andi	r24, 0xC3	; 195
 2c0:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<GERKON5)|(1<<GERKON6)|(1<<GERKON7)|(1<<GERKON8));
 2c2:	85 b3       	in	r24, 0x15	; 21
 2c4:	83 7c       	andi	r24, 0xC3	; 195
 2c6:	85 bb       	out	0x15, r24	; 21
	//светодиод 
	DDRD |= (1<<LED);
 2c8:	81 b3       	in	r24, 0x11	; 17
 2ca:	80 64       	ori	r24, 0x40	; 64
 2cc:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED);
 2ce:	82 b3       	in	r24, 0x12	; 18
 2d0:	8f 7b       	andi	r24, 0xBF	; 191
 2d2:	82 bb       	out	0x12, r24	; 18
}
 2d4:	08 95       	ret

000002d6 <spi_send_recv>:
//-------------------------------------------------------------
uint8_t spi_send_recv(uint8_t data) // Передаёт и принимает 1 байт по SPI, возвращает полученное значение
{
	SPDR = data;
 2d6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
 2d8:	77 9b       	sbis	0x0e, 7	; 14
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <spi_send_recv+0x2>
	return SPDR;
 2dc:	8f b1       	in	r24, 0x0f	; 15
}
 2de:	08 95       	ret

000002e0 <WIND_DIRECT>:
char* WIND_DIRECT()
{
	if((PINB&(1<<GERKON1)) == 0)
 2e0:	b0 99       	sbic	0x16, 0	; 22
 2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <WIND_DIRECT+0x10>
	{
		sprintf (wind_direction_str,"S");
 2e4:	83 e5       	ldi	r24, 0x53	; 83
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <wind_direction_str+0x1>
 2ec:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <wind_direction_str>
	}
    if ((PIND&(1<<GERKON2)) == 0)
 2f0:	80 99       	sbic	0x10, 0	; 16
 2f2:	0a c0       	rjmp	.+20     	; 0x308 <WIND_DIRECT+0x28>
	{
		sprintf (wind_direction_str,"S-W");
 2f4:	e0 e8       	ldi	r30, 0x80	; 128
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	83 e5       	ldi	r24, 0x53	; 83
 2fa:	9d e2       	ldi	r25, 0x2D	; 45
 2fc:	91 83       	std	Z+1, r25	; 0x01
 2fe:	80 83       	st	Z, r24
 300:	87 e5       	ldi	r24, 0x57	; 87
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	93 83       	std	Z+3, r25	; 0x03
 306:	82 83       	std	Z+2, r24	; 0x02
	}
    if ((PIND&(1<<GERKON3)) == 0)
 308:	81 99       	sbic	0x10, 1	; 16
 30a:	06 c0       	rjmp	.+12     	; 0x318 <WIND_DIRECT+0x38>
	{
		sprintf (wind_direction_str,"W");
 30c:	87 e5       	ldi	r24, 0x57	; 87
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <wind_direction_str+0x1>
 314:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <wind_direction_str>
	}
    if ((PIND&(1<<GERKON4)) == 0)
 318:	84 99       	sbic	0x10, 4	; 16
 31a:	0a c0       	rjmp	.+20     	; 0x330 <WIND_DIRECT+0x50>
	{
		sprintf (wind_direction_str,"N-W");
 31c:	e0 e8       	ldi	r30, 0x80	; 128
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	8e e4       	ldi	r24, 0x4E	; 78
 322:	9d e2       	ldi	r25, 0x2D	; 45
 324:	91 83       	std	Z+1, r25	; 0x01
 326:	80 83       	st	Z, r24
 328:	87 e5       	ldi	r24, 0x57	; 87
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	93 83       	std	Z+3, r25	; 0x03
 32e:	82 83       	std	Z+2, r24	; 0x02
	}
    if ((PINC&(1<<GERKON5)) == 0)
 330:	9c 99       	sbic	0x13, 4	; 19
 332:	06 c0       	rjmp	.+12     	; 0x340 <WIND_DIRECT+0x60>
	{
		sprintf (wind_direction_str,"N");
 334:	8e e4       	ldi	r24, 0x4E	; 78
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <wind_direction_str+0x1>
 33c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <wind_direction_str>
	}
    if ((PINC&(1<<GERKON6)) == 0)
 340:	9d 99       	sbic	0x13, 5	; 19
 342:	0a c0       	rjmp	.+20     	; 0x358 <WIND_DIRECT+0x78>
	{
		sprintf (wind_direction_str,"N-E");
 344:	e0 e8       	ldi	r30, 0x80	; 128
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	8e e4       	ldi	r24, 0x4E	; 78
 34a:	9d e2       	ldi	r25, 0x2D	; 45
 34c:	91 83       	std	Z+1, r25	; 0x01
 34e:	80 83       	st	Z, r24
 350:	85 e4       	ldi	r24, 0x45	; 69
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	93 83       	std	Z+3, r25	; 0x03
 356:	82 83       	std	Z+2, r24	; 0x02
	}
    if ((PINC&(1<<GERKON7)) == 0)
 358:	9a 99       	sbic	0x13, 2	; 19
 35a:	06 c0       	rjmp	.+12     	; 0x368 <WIND_DIRECT+0x88>
	{
		sprintf (wind_direction_str,"E");
 35c:	85 e4       	ldi	r24, 0x45	; 69
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <wind_direction_str+0x1>
 364:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <wind_direction_str>
	}
    if ((PINC&(1<<GERKON8)) == 0)
 368:	9b 99       	sbic	0x13, 3	; 19
 36a:	0a c0       	rjmp	.+20     	; 0x380 <WIND_DIRECT+0xa0>
	{
		sprintf (wind_direction_str,"S-E");
 36c:	e0 e8       	ldi	r30, 0x80	; 128
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	83 e5       	ldi	r24, 0x53	; 83
 372:	9d e2       	ldi	r25, 0x2D	; 45
 374:	91 83       	std	Z+1, r25	; 0x01
 376:	80 83       	st	Z, r24
 378:	85 e4       	ldi	r24, 0x45	; 69
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	93 83       	std	Z+3, r25	; 0x03
 37e:	82 83       	std	Z+2, r24	; 0x02
	}
	return wind_direction_str;
}
 380:	80 e8       	ldi	r24, 0x80	; 128
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	08 95       	ret

00000386 <main>:

int main(void)
{
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	00 d0       	rcall	.+0      	; 0x38c <main+0x6>
 38c:	00 d0       	rcall	.+0      	; 0x38e <main+0x8>
 38e:	1f 92       	push	r1
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
	int k = 0;
	uint8_t data[5] = {0};
 394:	fe 01       	movw	r30, r28
 396:	31 96       	adiw	r30, 0x01	; 1
 398:	85 e0       	ldi	r24, 0x05	; 5
 39a:	df 01       	movw	r26, r30
 39c:	1d 92       	st	X+, r1
 39e:	8a 95       	dec	r24
 3a0:	e9 f7       	brne	.-6      	; 0x39c <main+0x16>
	port_init();
 3a2:	74 df       	rcall	.-280    	; 0x28c <port_init>
	timer_ini();
 3a4:	39 df       	rcall	.-398    	; 0x218 <timer_ini>
	timer2_ini();
 3a6:	04 df       	rcall	.-504    	; 0x1b0 <timer2_ini>
	PORTD |= (1<<LED);
 3a8:	82 b3       	in	r24, 0x12	; 18
 3aa:	80 64       	ori	r24, 0x40	; 64
 3ac:	82 bb       	out	0x12, r24	; 18
    SPI_init();
 3ae:	5c df       	rcall	.-328    	; 0x268 <SPI_init>
	ADC_Init();//Инициализация АЦП
 3b0:	56 de       	rcall	.-852    	; 0x5e <ADC_Init>
	//USART_Init(16);
    NRF24_ini();
 3b2:	89 d2       	rcall	.+1298   	; 0x8c6 <NRF24_ini>
	// настраиваем параметры прерывания
	//----------------------
	MCUCR =  (1<<ISC11) ;
 3b4:	88 e0       	ldi	r24, 0x08	; 8
 3b6:	85 bf       	out	0x35, r24	; 53
	GICR =  (1<<INT1);
 3b8:	80 e8       	ldi	r24, 0x80	; 128
 3ba:	8b bf       	out	0x3b, r24	; 59
	//----------------------
	sei();
 3bc:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3be:	bf ef       	ldi	r27, 0xFF	; 255
 3c0:	e9 e6       	ldi	r30, 0x69	; 105
 3c2:	f8 e1       	ldi	r31, 0x18	; 24
 3c4:	b1 50       	subi	r27, 0x01	; 1
 3c6:	e0 40       	sbci	r30, 0x00	; 0
 3c8:	f0 40       	sbci	r31, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <main+0x3e>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x48>
 3ce:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1<<LED);
 3d0:	82 b3       	in	r24, 0x12	; 18
 3d2:	8f 7b       	andi	r24, 0xBF	; 191
 3d4:	82 bb       	out	0x12, r24	; 18
		
	dht22_init();
 3d6:	7b de       	rcall	.-778    	; 0xce <dht22_init>
	
	WDTCR &= ~(1<<WDE);//откл WDT
 3d8:	81 b5       	in	r24, 0x21	; 33
 3da:	87 7f       	andi	r24, 0xF7	; 247
 3dc:	81 bd       	out	0x21, r24	; 33
	ACSR |= (1<<ACD);//откл компаратор
 3de:	88 b1       	in	r24, 0x08	; 8
 3e0:	80 68       	ori	r24, 0x80	; 128
 3e2:	88 b9       	out	0x08, r24	; 8
    INTER_COUNT == 0;
    while (1) 
    {
		if (INTER_COUNT == 0){
 3e4:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <INTER_COUNT>
 3e8:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <INTER_COUNT+0x1>
 3ec:	89 2b       	or	r24, r25
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <main+0x6c>
 3f0:	66 c1       	rjmp	.+716    	; 0x6be <__stack+0x25f>
 3f2:	2f ef       	ldi	r18, 0xFF	; 255
 3f4:	37 ea       	ldi	r19, 0xA7	; 167
 3f6:	81 e6       	ldi	r24, 0x61	; 97
 3f8:	21 50       	subi	r18, 0x01	; 1
 3fa:	30 40       	sbci	r19, 0x00	; 0
 3fc:	80 40       	sbci	r24, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <main+0x72>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 402:	00 00       	nop
		_delay_ms(4000);
		NRF24_ini();//инициализируем каждый раз, т.к. отключаем питание перед сном
 404:	60 d2       	rcall	.+1216   	; 0x8c6 <NRF24_ini>
		WIND_DIRECT();//измеряем направление ветра
 406:	6c df       	rcall	.-296    	; 0x2e0 <WIND_DIRECT>
		sprintf (speed_str,"%u",speed);
 408:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <speed+0x1>
 40c:	8f 93       	push	r24
 40e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <speed>
 412:	8f 93       	push	r24
 414:	03 e6       	ldi	r16, 0x63	; 99
 416:	10 e0       	ldi	r17, 0x00	; 0
 418:	1f 93       	push	r17
 41a:	0f 93       	push	r16
 41c:	8a e8       	ldi	r24, 0x8A	; 138
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	9f 93       	push	r25
 422:	8f 93       	push	r24
 424:	dd d2       	rcall	.+1466   	; 0x9e0 <sprintf>
		ADC_convert ();
 426:	22 de       	rcall	.-956    	; 0x6c <ADC_convert>
		sprintf (Vbat,"%u",adc_value1);
 428:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <adc_value1+0x1>
 42c:	8f 93       	push	r24
 42e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <adc_value1>
 432:	8f 93       	push	r24
 434:	1f 93       	push	r17
 436:	0f 93       	push	r16
 438:	86 e7       	ldi	r24, 0x76	; 118
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	9f 93       	push	r25
 43e:	8f 93       	push	r24
 440:	cf d2       	rcall	.+1438   	; 0x9e0 <sprintf>
		sprintf (RainAmount,"%u",adc_value2);
 442:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <adc_value2+0x1>
 446:	8f 93       	push	r24
 448:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <adc_value2>
 44c:	8f 93       	push	r24
 44e:	1f 93       	push	r17
 450:	0f 93       	push	r16
 452:	8c e6       	ldi	r24, 0x6C	; 108
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	9f 93       	push	r25
 458:	8f 93       	push	r24
 45a:	c2 d2       	rcall	.+1412   	; 0x9e0 <sprintf>
		//-------------------------------------------
		//отправка температуры
		buf1[0] = 1;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <buf1>
		if (dht22_GetData(data))
 462:	ce 01       	movw	r24, r28
 464:	01 96       	adiw	r24, 0x01	; 1
 466:	44 de       	rcall	.-888    	; 0xf0 <dht22_GetData>
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	0f be       	out	0x3f, r0	; 63
 470:	cd bf       	out	0x3d, r28	; 61
 472:	88 23       	and	r24, r24
 474:	31 f0       	breq	.+12     	; 0x482 <__stack+0x23>
		{
		  buf1[1] = data[1];//младший бит температуры
 476:	8a 81       	ldd	r24, Y+2	; 0x02
 478:	e9 e9       	ldi	r30, 0x99	; 153
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	81 83       	std	Z+1, r24	; 0x01
		  buf1[2] = data[2];//старший бит температуры
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	82 83       	std	Z+2, r24	; 0x02
		}
        dt = NRF24L01_Send(buf1);
 482:	89 e9       	ldi	r24, 0x99	; 153
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	5c d2       	rcall	.+1208   	; 0x940 <NRF24L01_Send>
 488:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <dt>
		memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 48c:	09 e9       	ldi	r16, 0x99	; 153
 48e:	10 e0       	ldi	r17, 0x00	; 0
 490:	f8 01       	movw	r30, r16
 492:	01 90       	ld	r0, Z+
 494:	00 20       	and	r0, r0
 496:	e9 f7       	brne	.-6      	; 0x492 <__stack+0x33>
 498:	31 97       	sbiw	r30, 0x01	; 1
 49a:	af 01       	movw	r20, r30
 49c:	49 59       	subi	r20, 0x99	; 153
 49e:	50 40       	sbci	r21, 0x00	; 0
 4a0:	44 0f       	add	r20, r20
 4a2:	55 1f       	adc	r21, r21
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	c8 01       	movw	r24, r16
 4aa:	93 d2       	rcall	.+1318   	; 0x9d2 <memset>
 4ac:	bf ef       	ldi	r27, 0xFF	; 255
 4ae:	e9 e6       	ldi	r30, 0x69	; 105
 4b0:	f8 e1       	ldi	r31, 0x18	; 24
 4b2:	b1 50       	subi	r27, 0x01	; 1
 4b4:	e0 40       	sbci	r30, 0x00	; 0
 4b6:	f0 40       	sbci	r31, 0x00	; 0
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <__stack+0x53>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__stack+0x5d>
 4bc:	00 00       	nop
		_delay_ms(1000);
		//-------------------------------------------
		//отправка влажности
		 buf1[0] = 5;
 4be:	85 e0       	ldi	r24, 0x05	; 5
 4c0:	d8 01       	movw	r26, r16
 4c2:	8c 93       	st	X, r24
		 buf1[1] = data[3];//младший бит влажности
 4c4:	8c 81       	ldd	r24, Y+4	; 0x04
 4c6:	11 96       	adiw	r26, 0x01	; 1
 4c8:	8c 93       	st	X, r24
 4ca:	11 97       	sbiw	r26, 0x01	; 1
		 buf1[2] = data[4];//старший бит влажности
 4cc:	8d 81       	ldd	r24, Y+5	; 0x05
 4ce:	12 96       	adiw	r26, 0x02	; 2
 4d0:	8c 93       	st	X, r24
		 dt = NRF24L01_Send(buf1);
 4d2:	c8 01       	movw	r24, r16
 4d4:	35 d2       	rcall	.+1130   	; 0x940 <NRF24L01_Send>
 4d6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <dt>
		 memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 4da:	f8 01       	movw	r30, r16
 4dc:	01 90       	ld	r0, Z+
 4de:	00 20       	and	r0, r0
 4e0:	e9 f7       	brne	.-6      	; 0x4dc <__stack+0x7d>
 4e2:	31 97       	sbiw	r30, 0x01	; 1
 4e4:	af 01       	movw	r20, r30
 4e6:	49 59       	subi	r20, 0x99	; 153
 4e8:	50 40       	sbci	r21, 0x00	; 0
 4ea:	44 0f       	add	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	c8 01       	movw	r24, r16
 4f4:	6e d2       	rcall	.+1244   	; 0x9d2 <memset>
 4f6:	bf ef       	ldi	r27, 0xFF	; 255
 4f8:	e9 e6       	ldi	r30, 0x69	; 105
 4fa:	f8 e1       	ldi	r31, 0x18	; 24
 4fc:	b1 50       	subi	r27, 0x01	; 1
 4fe:	e0 40       	sbci	r30, 0x00	; 0
 500:	f0 40       	sbci	r31, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <__stack+0x9d>
 504:	00 c0       	rjmp	.+0      	; 0x506 <__stack+0xa7>
 506:	00 00       	nop
		 _delay_ms(1000);
		//-------------------------------------------
		//отправка скорости ветра
		buf1[0] = 2;
 508:	82 e0       	ldi	r24, 0x02	; 2
 50a:	d8 01       	movw	r26, r16
 50c:	8c 93       	st	X, r24
		for (k = 1; k < strlen(speed_str)+1; k++)
 50e:	21 e0       	ldi	r18, 0x01	; 1
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	0a c0       	rjmp	.+20     	; 0x528 <__stack+0xc9>
		{
			buf1[k] = speed_str[k-1];
 514:	f9 01       	movw	r30, r18
 516:	e7 57       	subi	r30, 0x77	; 119
 518:	ff 4f       	sbci	r31, 0xFF	; 255
 51a:	80 81       	ld	r24, Z
 51c:	f9 01       	movw	r30, r18
 51e:	e7 56       	subi	r30, 0x67	; 103
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	80 83       	st	Z, r24
		 memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
		 _delay_ms(1000);
		//-------------------------------------------
		//отправка скорости ветра
		buf1[0] = 2;
		for (k = 1; k < strlen(speed_str)+1; k++)
 524:	2f 5f       	subi	r18, 0xFF	; 255
 526:	3f 4f       	sbci	r19, 0xFF	; 255
 528:	ea e8       	ldi	r30, 0x8A	; 138
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	01 90       	ld	r0, Z+
 52e:	00 20       	and	r0, r0
 530:	e9 f7       	brne	.-6      	; 0x52c <__stack+0xcd>
 532:	cf 01       	movw	r24, r30
 534:	8a 58       	subi	r24, 0x8A	; 138
 536:	90 40       	sbci	r25, 0x00	; 0
 538:	28 17       	cp	r18, r24
 53a:	39 07       	cpc	r19, r25
 53c:	58 f3       	brcs	.-42     	; 0x514 <__stack+0xb5>
		{
			buf1[k] = speed_str[k-1];
		}
		dt = NRF24L01_Send(buf1);
 53e:	89 e9       	ldi	r24, 0x99	; 153
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	fe d1       	rcall	.+1020   	; 0x940 <NRF24L01_Send>
 544:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <dt>
		memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 548:	09 e9       	ldi	r16, 0x99	; 153
 54a:	10 e0       	ldi	r17, 0x00	; 0
 54c:	f8 01       	movw	r30, r16
 54e:	01 90       	ld	r0, Z+
 550:	00 20       	and	r0, r0
 552:	e9 f7       	brne	.-6      	; 0x54e <__stack+0xef>
 554:	31 97       	sbiw	r30, 0x01	; 1
 556:	af 01       	movw	r20, r30
 558:	49 59       	subi	r20, 0x99	; 153
 55a:	50 40       	sbci	r21, 0x00	; 0
 55c:	44 0f       	add	r20, r20
 55e:	55 1f       	adc	r21, r21
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	c8 01       	movw	r24, r16
 566:	35 d2       	rcall	.+1130   	; 0x9d2 <memset>
 568:	bf ef       	ldi	r27, 0xFF	; 255
 56a:	e9 e6       	ldi	r30, 0x69	; 105
 56c:	f8 e1       	ldi	r31, 0x18	; 24
 56e:	b1 50       	subi	r27, 0x01	; 1
 570:	e0 40       	sbci	r30, 0x00	; 0
 572:	f0 40       	sbci	r31, 0x00	; 0
 574:	e1 f7       	brne	.-8      	; 0x56e <__stack+0x10f>
 576:	00 c0       	rjmp	.+0      	; 0x578 <__stack+0x119>
 578:	00 00       	nop
		_delay_ms(1000);
		//-------------------------------------------
		//отправка направления ветра
		buf1[0] = 3;
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	d8 01       	movw	r26, r16
 57e:	8c 93       	st	X, r24
		for (k = 1; k < strlen(wind_direction_str)+1; k++)
 580:	21 e0       	ldi	r18, 0x01	; 1
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	0a c0       	rjmp	.+20     	; 0x59a <__stack+0x13b>
		{
			buf1[k] = wind_direction_str[k-1];
 586:	f9 01       	movw	r30, r18
 588:	e1 58       	subi	r30, 0x81	; 129
 58a:	ff 4f       	sbci	r31, 0xFF	; 255
 58c:	80 81       	ld	r24, Z
 58e:	f9 01       	movw	r30, r18
 590:	e7 56       	subi	r30, 0x67	; 103
 592:	ff 4f       	sbci	r31, 0xFF	; 255
 594:	80 83       	st	Z, r24
		memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
		_delay_ms(1000);
		//-------------------------------------------
		//отправка направления ветра
		buf1[0] = 3;
		for (k = 1; k < strlen(wind_direction_str)+1; k++)
 596:	2f 5f       	subi	r18, 0xFF	; 255
 598:	3f 4f       	sbci	r19, 0xFF	; 255
 59a:	e0 e8       	ldi	r30, 0x80	; 128
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	01 90       	ld	r0, Z+
 5a0:	00 20       	and	r0, r0
 5a2:	e9 f7       	brne	.-6      	; 0x59e <__stack+0x13f>
 5a4:	cf 01       	movw	r24, r30
 5a6:	80 58       	subi	r24, 0x80	; 128
 5a8:	90 40       	sbci	r25, 0x00	; 0
 5aa:	28 17       	cp	r18, r24
 5ac:	39 07       	cpc	r19, r25
 5ae:	58 f3       	brcs	.-42     	; 0x586 <__stack+0x127>
		{
			buf1[k] = wind_direction_str[k-1];
		}
		dt = NRF24L01_Send(buf1);
 5b0:	89 e9       	ldi	r24, 0x99	; 153
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	c5 d1       	rcall	.+906    	; 0x940 <NRF24L01_Send>
 5b6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <dt>
		memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 5ba:	09 e9       	ldi	r16, 0x99	; 153
 5bc:	10 e0       	ldi	r17, 0x00	; 0
 5be:	f8 01       	movw	r30, r16
 5c0:	01 90       	ld	r0, Z+
 5c2:	00 20       	and	r0, r0
 5c4:	e9 f7       	brne	.-6      	; 0x5c0 <__stack+0x161>
 5c6:	31 97       	sbiw	r30, 0x01	; 1
 5c8:	af 01       	movw	r20, r30
 5ca:	49 59       	subi	r20, 0x99	; 153
 5cc:	50 40       	sbci	r21, 0x00	; 0
 5ce:	44 0f       	add	r20, r20
 5d0:	55 1f       	adc	r21, r21
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	c8 01       	movw	r24, r16
 5d8:	fc d1       	rcall	.+1016   	; 0x9d2 <memset>
 5da:	bf ef       	ldi	r27, 0xFF	; 255
 5dc:	e9 e6       	ldi	r30, 0x69	; 105
 5de:	f8 e1       	ldi	r31, 0x18	; 24
 5e0:	b1 50       	subi	r27, 0x01	; 1
 5e2:	e0 40       	sbci	r30, 0x00	; 0
 5e4:	f0 40       	sbci	r31, 0x00	; 0
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <__stack+0x181>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <__stack+0x18b>
 5ea:	00 00       	nop
		_delay_ms(1000);
		//-------------------------------------------
		//отправка заряда аккумулятора
		buf1[0] = 4;
 5ec:	84 e0       	ldi	r24, 0x04	; 4
 5ee:	d8 01       	movw	r26, r16
 5f0:	8c 93       	st	X, r24
		for (k = 1; k < strlen(Vbat)+1; k++)
 5f2:	21 e0       	ldi	r18, 0x01	; 1
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
		{
			buf1[k] = Vbat[k-1];
 5f8:	f9 01       	movw	r30, r18
 5fa:	eb 58       	subi	r30, 0x8B	; 139
 5fc:	ff 4f       	sbci	r31, 0xFF	; 255
 5fe:	80 81       	ld	r24, Z
 600:	f9 01       	movw	r30, r18
 602:	e7 56       	subi	r30, 0x67	; 103
 604:	ff 4f       	sbci	r31, 0xFF	; 255
 606:	80 83       	st	Z, r24
		memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
		_delay_ms(1000);
		//-------------------------------------------
		//отправка заряда аккумулятора
		buf1[0] = 4;
		for (k = 1; k < strlen(Vbat)+1; k++)
 608:	2f 5f       	subi	r18, 0xFF	; 255
 60a:	3f 4f       	sbci	r19, 0xFF	; 255
 60c:	e6 e7       	ldi	r30, 0x76	; 118
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	01 90       	ld	r0, Z+
 612:	00 20       	and	r0, r0
 614:	e9 f7       	brne	.-6      	; 0x610 <__stack+0x1b1>
 616:	cf 01       	movw	r24, r30
 618:	86 57       	subi	r24, 0x76	; 118
 61a:	90 40       	sbci	r25, 0x00	; 0
 61c:	28 17       	cp	r18, r24
 61e:	39 07       	cpc	r19, r25
 620:	58 f3       	brcs	.-42     	; 0x5f8 <__stack+0x199>
		{
			buf1[k] = Vbat[k-1];
		}
		dt = NRF24L01_Send(buf1);
 622:	89 e9       	ldi	r24, 0x99	; 153
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	8c d1       	rcall	.+792    	; 0x940 <NRF24L01_Send>
 628:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <dt>
		memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 62c:	09 e9       	ldi	r16, 0x99	; 153
 62e:	10 e0       	ldi	r17, 0x00	; 0
 630:	f8 01       	movw	r30, r16
 632:	01 90       	ld	r0, Z+
 634:	00 20       	and	r0, r0
 636:	e9 f7       	brne	.-6      	; 0x632 <__stack+0x1d3>
 638:	31 97       	sbiw	r30, 0x01	; 1
 63a:	af 01       	movw	r20, r30
 63c:	49 59       	subi	r20, 0x99	; 153
 63e:	50 40       	sbci	r21, 0x00	; 0
 640:	44 0f       	add	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	c8 01       	movw	r24, r16
 64a:	c3 d1       	rcall	.+902    	; 0x9d2 <memset>
 64c:	bf ef       	ldi	r27, 0xFF	; 255
 64e:	e9 e6       	ldi	r30, 0x69	; 105
 650:	f8 e1       	ldi	r31, 0x18	; 24
 652:	b1 50       	subi	r27, 0x01	; 1
 654:	e0 40       	sbci	r30, 0x00	; 0
 656:	f0 40       	sbci	r31, 0x00	; 0
 658:	e1 f7       	brne	.-8      	; 0x652 <__stack+0x1f3>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <__stack+0x1fd>
 65c:	00 00       	nop
		_delay_ms(1000);
		//-------------------------------------------
        //отправка кол-ва осадков
        buf1[0] = 6;
 65e:	86 e0       	ldi	r24, 0x06	; 6
 660:	d8 01       	movw	r26, r16
 662:	8c 93       	st	X, r24
        for (k = 1; k < strlen(RainAmount)+1; k++)
 664:	21 e0       	ldi	r18, 0x01	; 1
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	0a c0       	rjmp	.+20     	; 0x67e <__stack+0x21f>
        {
	        buf1[k] = RainAmount[k-1];
 66a:	f9 01       	movw	r30, r18
 66c:	e5 59       	subi	r30, 0x95	; 149
 66e:	ff 4f       	sbci	r31, 0xFF	; 255
 670:	80 81       	ld	r24, Z
 672:	f9 01       	movw	r30, r18
 674:	e7 56       	subi	r30, 0x67	; 103
 676:	ff 4f       	sbci	r31, 0xFF	; 255
 678:	80 83       	st	Z, r24
		memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
		_delay_ms(1000);
		//-------------------------------------------
        //отправка кол-ва осадков
        buf1[0] = 6;
        for (k = 1; k < strlen(RainAmount)+1; k++)
 67a:	2f 5f       	subi	r18, 0xFF	; 255
 67c:	3f 4f       	sbci	r19, 0xFF	; 255
 67e:	ec e6       	ldi	r30, 0x6C	; 108
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	01 90       	ld	r0, Z+
 684:	00 20       	and	r0, r0
 686:	e9 f7       	brne	.-6      	; 0x682 <__stack+0x223>
 688:	cf 01       	movw	r24, r30
 68a:	8c 56       	subi	r24, 0x6C	; 108
 68c:	90 40       	sbci	r25, 0x00	; 0
 68e:	28 17       	cp	r18, r24
 690:	39 07       	cpc	r19, r25
 692:	58 f3       	brcs	.-42     	; 0x66a <__stack+0x20b>
        {
	        buf1[k] = RainAmount[k-1];
        }
        dt = NRF24L01_Send(buf1);
 694:	89 e9       	ldi	r24, 0x99	; 153
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	53 d1       	rcall	.+678    	; 0x940 <NRF24L01_Send>
 69a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <dt>
        memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 69e:	e9 e9       	ldi	r30, 0x99	; 153
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	01 90       	ld	r0, Z+
 6a4:	00 20       	and	r0, r0
 6a6:	e9 f7       	brne	.-6      	; 0x6a2 <__stack+0x243>
 6a8:	31 97       	sbiw	r30, 0x01	; 1
 6aa:	af 01       	movw	r20, r30
 6ac:	49 59       	subi	r20, 0x99	; 153
 6ae:	50 40       	sbci	r21, 0x00	; 0
 6b0:	44 0f       	add	r20, r20
 6b2:	55 1f       	adc	r21, r21
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	89 e9       	ldi	r24, 0x99	; 153
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	8a d1       	rcall	.+788    	; 0x9d2 <memset>
		}
        //-------------------------------------------
		//перевод NRF24 в энергорежим
		reg = nRF_read_register(CONFIG);
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	de d0       	rcall	.+444    	; 0x87e <nRF_read_register>
		reg &= ~(1<<PWR_UP);
 6c2:	68 2f       	mov	r22, r24
 6c4:	6d 7f       	andi	r22, 0xFD	; 253
 6c6:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <reg>
		nRF_write_register(CONFIG,reg);
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	c8 d0       	rcall	.+400    	; 0x85e <nRF_write_register>
		//-------------------------------------------
        //перевод МК в сон
		PORTD |= (1<<TRANZISTOR);//отключаем датчик холла, дождя и герконы от питания
 6ce:	82 b3       	in	r24, 0x12	; 18
 6d0:	80 62       	ori	r24, 0x20	; 32
 6d2:	82 bb       	out	0x12, r24	; 18
		ADCSRA &= ~(1<<ADEN);//выкл АЦП
 6d4:	86 b1       	in	r24, 0x06	; 6
 6d6:	8f 77       	andi	r24, 0x7F	; 127
 6d8:	86 b9       	out	0x06, r24	; 6
		DDRD |= (1<<PORTD3);//датчик холла на выход
 6da:	81 b3       	in	r24, 0x11	; 17
 6dc:	88 60       	ori	r24, 0x08	; 8
 6de:	81 bb       	out	0x11, r24	; 17
	
		set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 6e0:	85 b7       	in	r24, 0x35	; 53
 6e2:	8f 78       	andi	r24, 0x8F	; 143
 6e4:	80 63       	ori	r24, 0x30	; 48
 6e6:	85 bf       	out	0x35, r24	; 53
		sleep_enable();
 6e8:	85 b7       	in	r24, 0x35	; 53
 6ea:	80 68       	ori	r24, 0x80	; 128
 6ec:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
 6ee:	88 95       	sleep
		sleep_disable();
 6f0:	85 b7       	in	r24, 0x35	; 53
 6f2:	8f 77       	andi	r24, 0x7F	; 127
 6f4:	85 bf       	out	0x35, r24	; 53
		//-------------------------------------------
		//выход из сна каждые ~5мин
		INTER_COUNT++;
 6f6:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <INTER_COUNT>
 6fa:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <INTER_COUNT+0x1>
 6fe:	01 96       	adiw	r24, 0x01	; 1
 700:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <INTER_COUNT+0x1>
 704:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <INTER_COUNT>
		if (INTER_COUNT == 65) INTER_COUNT = 0;
 708:	81 34       	cpi	r24, 0x41	; 65
 70a:	91 05       	cpc	r25, r1
 70c:	21 f4       	brne	.+8      	; 0x716 <__stack+0x2b7>
 70e:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <INTER_COUNT+0x1>
 712:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <INTER_COUNT>
		//-------------------------------------------
		DDRD &= ~(1<<PORTD3);//датчик холла на вход
 716:	81 b3       	in	r24, 0x11	; 17
 718:	87 7f       	andi	r24, 0xF7	; 247
 71a:	81 bb       	out	0x11, r24	; 17
		
		PORTD &= ~(1<<TRANZISTOR);//включаем датчик холла, дождя и герконы к питания
 71c:	82 b3       	in	r24, 0x12	; 18
 71e:	8f 7d       	andi	r24, 0xDF	; 223
 720:	82 bb       	out	0x12, r24	; 18
		ADCSRA |= (1<<ADEN);//вкл АЦП
 722:	86 b1       	in	r24, 0x06	; 6
 724:	80 68       	ori	r24, 0x80	; 128
 726:	86 b9       	out	0x06, r24	; 6

		//вывод NRF24 из энергорежима
		reg |= (1<<PWR_UP);
 728:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <reg>
 72c:	62 60       	ori	r22, 0x02	; 2
 72e:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <reg>
		nRF_write_register(CONFIG,reg);
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	94 d0       	rcall	.+296    	; 0x85e <nRF_write_register>
		//-------------------------------------------
    }
 736:	56 ce       	rjmp	.-852    	; 0x3e4 <main+0x5e>

00000738 <NRF24_Transmit>:
//-------------------------------------------------------------
void nRF_command(uint8_t command)
{
	LOW_CSN;
	spi_send_recv(command);
	HIGH_CSN;
 738:	ef 92       	push	r14
 73a:	ff 92       	push	r15
 73c:	0f 93       	push	r16
 73e:	1f 93       	push	r17
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	8b 01       	movw	r16, r22
 746:	c4 2f       	mov	r28, r20
 748:	98 b3       	in	r25, 0x18	; 24
 74a:	9d 7f       	andi	r25, 0xFD	; 253
 74c:	98 bb       	out	0x18, r25	; 24
 74e:	98 b3       	in	r25, 0x18	; 24
 750:	9b 7f       	andi	r25, 0xFB	; 251
 752:	98 bb       	out	0x18, r25	; 24
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	bf dd       	rcall	.-1154   	; 0x2d6 <spi_send_recv>
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	8a 95       	dec	r24
 75c:	f1 f7       	brne	.-4      	; 0x75a <NRF24_Transmit+0x22>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <NRF24_Transmit+0x28>
 760:	0a c0       	rjmp	.+20     	; 0x776 <NRF24_Transmit+0x3e>
 762:	78 01       	movw	r14, r16
 764:	ef ef       	ldi	r30, 0xFF	; 255
 766:	ee 1a       	sub	r14, r30
 768:	fe 0a       	sbc	r15, r30
 76a:	f8 01       	movw	r30, r16
 76c:	80 81       	ld	r24, Z
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	b2 dd       	rcall	.-1180   	; 0x2d6 <spi_send_recv>
 772:	cd 2f       	mov	r28, r29
 774:	87 01       	movw	r16, r14
 776:	df ef       	ldi	r29, 0xFF	; 255
 778:	dc 0f       	add	r29, r28
 77a:	c1 11       	cpse	r28, r1
 77c:	f2 cf       	rjmp	.-28     	; 0x762 <NRF24_Transmit+0x2a>
 77e:	88 b3       	in	r24, 0x18	; 24
 780:	84 60       	ori	r24, 0x04	; 4
 782:	88 bb       	out	0x18, r24	; 24
 784:	88 b3       	in	r24, 0x18	; 24
 786:	82 60       	ori	r24, 0x02	; 2
 788:	88 bb       	out	0x18, r24	; 24
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	ff 90       	pop	r15
 794:	ef 90       	pop	r14
 796:	08 95       	ret

00000798 <NRF24_FlushRX>:
 798:	88 b3       	in	r24, 0x18	; 24
 79a:	8b 7f       	andi	r24, 0xFB	; 251
 79c:	88 bb       	out	0x18, r24	; 24
 79e:	82 ee       	ldi	r24, 0xE2	; 226
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	99 dd       	rcall	.-1230   	; 0x2d6 <spi_send_recv>
 7a4:	82 e0       	ldi	r24, 0x02	; 2
 7a6:	8a 95       	dec	r24
 7a8:	f1 f7       	brne	.-4      	; 0x7a6 <NRF24_FlushRX+0xe>
 7aa:	00 c0       	rjmp	.+0      	; 0x7ac <NRF24_FlushRX+0x14>
 7ac:	88 b3       	in	r24, 0x18	; 24
 7ae:	84 60       	ori	r24, 0x04	; 4
 7b0:	88 bb       	out	0x18, r24	; 24
 7b2:	08 95       	ret

000007b4 <NRF24_FlushTX>:
 7b4:	88 b3       	in	r24, 0x18	; 24
 7b6:	8b 7f       	andi	r24, 0xFB	; 251
 7b8:	88 bb       	out	0x18, r24	; 24
 7ba:	81 ee       	ldi	r24, 0xE1	; 225
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	8b dd       	rcall	.-1258   	; 0x2d6 <spi_send_recv>
 7c0:	82 e0       	ldi	r24, 0x02	; 2
 7c2:	8a 95       	dec	r24
 7c4:	f1 f7       	brne	.-4      	; 0x7c2 <NRF24_FlushTX+0xe>
 7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <NRF24_FlushTX+0x14>
 7c8:	88 b3       	in	r24, 0x18	; 24
 7ca:	84 60       	ori	r24, 0x04	; 4
 7cc:	88 bb       	out	0x18, r24	; 24
 7ce:	08 95       	ret

000007d0 <NRF24_ToggleFeatures>:
 7d0:	88 b3       	in	r24, 0x18	; 24
 7d2:	8b 7f       	andi	r24, 0xFB	; 251
 7d4:	88 bb       	out	0x18, r24	; 24
 7d6:	80 e5       	ldi	r24, 0x50	; 80
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	7d dd       	rcall	.-1286   	; 0x2d6 <spi_send_recv>
 7dc:	82 e0       	ldi	r24, 0x02	; 2
 7de:	8a 95       	dec	r24
 7e0:	f1 f7       	brne	.-4      	; 0x7de <NRF24_ToggleFeatures+0xe>
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <NRF24_ToggleFeatures+0x14>
 7e4:	83 e7       	ldi	r24, 0x73	; 115
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	76 dd       	rcall	.-1300   	; 0x2d6 <spi_send_recv>
 7ea:	88 b3       	in	r24, 0x18	; 24
 7ec:	84 60       	ori	r24, 0x04	; 4
 7ee:	88 bb       	out	0x18, r24	; 24
 7f0:	08 95       	ret

000007f2 <NRF24_Write_Buf>:
 7f2:	ef 92       	push	r14
 7f4:	ff 92       	push	r15
 7f6:	0f 93       	push	r16
 7f8:	1f 93       	push	r17
 7fa:	cf 93       	push	r28
 7fc:	df 93       	push	r29
 7fe:	8b 01       	movw	r16, r22
 800:	c4 2f       	mov	r28, r20
 802:	80 62       	ori	r24, 0x20	; 32
 804:	98 b3       	in	r25, 0x18	; 24
 806:	9b 7f       	andi	r25, 0xFB	; 251
 808:	98 bb       	out	0x18, r25	; 24
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	64 dd       	rcall	.-1336   	; 0x2d6 <spi_send_recv>
 80e:	82 e0       	ldi	r24, 0x02	; 2
 810:	8a 95       	dec	r24
 812:	f1 f7       	brne	.-4      	; 0x810 <NRF24_Write_Buf+0x1e>
 814:	00 c0       	rjmp	.+0      	; 0x816 <NRF24_Write_Buf+0x24>
 816:	0a c0       	rjmp	.+20     	; 0x82c <NRF24_Write_Buf+0x3a>
 818:	78 01       	movw	r14, r16
 81a:	ef ef       	ldi	r30, 0xFF	; 255
 81c:	ee 1a       	sub	r14, r30
 81e:	fe 0a       	sbc	r15, r30
 820:	f8 01       	movw	r30, r16
 822:	80 81       	ld	r24, Z
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	57 dd       	rcall	.-1362   	; 0x2d6 <spi_send_recv>
 828:	cd 2f       	mov	r28, r29
 82a:	87 01       	movw	r16, r14
 82c:	df ef       	ldi	r29, 0xFF	; 255
 82e:	dc 0f       	add	r29, r28
 830:	c1 11       	cpse	r28, r1
 832:	f2 cf       	rjmp	.-28     	; 0x818 <NRF24_Write_Buf+0x26>
 834:	88 b3       	in	r24, 0x18	; 24
 836:	84 60       	ori	r24, 0x04	; 4
 838:	88 bb       	out	0x18, r24	; 24
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	1f 91       	pop	r17
 840:	0f 91       	pop	r16
 842:	ff 90       	pop	r15
 844:	ef 90       	pop	r14
 846:	08 95       	ret

00000848 <NRF24L01_TX_Mode>:
 848:	43 e0       	ldi	r20, 0x03	; 3
 84a:	60 e6       	ldi	r22, 0x60	; 96
 84c:	70 e0       	ldi	r23, 0x00	; 0
 84e:	80 e1       	ldi	r24, 0x10	; 16
 850:	d0 df       	rcall	.-96     	; 0x7f2 <NRF24_Write_Buf>
 852:	88 b3       	in	r24, 0x18	; 24
 854:	8d 7f       	andi	r24, 0xFD	; 253
 856:	88 bb       	out	0x18, r24	; 24
 858:	9f df       	rcall	.-194    	; 0x798 <NRF24_FlushRX>
 85a:	ac df       	rcall	.-168    	; 0x7b4 <NRF24_FlushTX>
 85c:	08 95       	ret

0000085e <nRF_write_register>:
}
//-------------------------------------------------------------
void nRF_write_register(uint8_t reg, uint8_t data_out)
{
 85e:	cf 93       	push	r28
 860:	c6 2f       	mov	r28, r22
	reg |= W_REGISTER;
 862:	80 62       	ori	r24, 0x20	; 32
	LOW_CSN;
 864:	98 b3       	in	r25, 0x18	; 24
 866:	9b 7f       	andi	r25, 0xFB	; 251
 868:	98 bb       	out	0x18, r25	; 24
	spi_send_recv(reg);
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	34 dd       	rcall	.-1432   	; 0x2d6 <spi_send_recv>
	spi_send_recv(data_out);
 86e:	8c 2f       	mov	r24, r28
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	31 dd       	rcall	.-1438   	; 0x2d6 <spi_send_recv>
	HIGH_CSN;
 874:	88 b3       	in	r24, 0x18	; 24
 876:	84 60       	ori	r24, 0x04	; 4
 878:	88 bb       	out	0x18, r24	; 24
}
 87a:	cf 91       	pop	r28
 87c:	08 95       	ret

0000087e <nRF_read_register>:
//-------------------------------------------------------------
uint8_t nRF_read_register(uint8_t reg)
{
 87e:	cf 93       	push	r28
 880:	c8 2f       	mov	r28, r24
	uint8_t data_in;
	LOW_CSN;
 882:	88 b3       	in	r24, 0x18	; 24
 884:	8b 7f       	andi	r24, 0xFB	; 251
 886:	88 bb       	out	0x18, r24	; 24
	data_in = spi_send_recv(reg);
 888:	8c 2f       	mov	r24, r28
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	24 dd       	rcall	.-1464   	; 0x2d6 <spi_send_recv>
	if(reg != STATUS)
 88e:	c7 30       	cpi	r28, 0x07	; 7
 890:	19 f0       	breq	.+6      	; 0x898 <nRF_read_register+0x1a>
	{
		data_in = spi_send_recv(NOP);
 892:	8f ef       	ldi	r24, 0xFF	; 255
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	1f dd       	rcall	.-1474   	; 0x2d6 <spi_send_recv>
	}
	HIGH_CSN;
 898:	98 b3       	in	r25, 0x18	; 24
 89a:	94 60       	ori	r25, 0x04	; 4
 89c:	98 bb       	out	0x18, r25	; 24
	return data_in;
}
 89e:	cf 91       	pop	r28
 8a0:	08 95       	ret

000008a2 <NRF24L01_RX_Mode>:
}
//-------------------------------------------------------------
void NRF24L01_RX_Mode(void) // включение режима приема
{
	uint8_t regval = 0x00;
	regval = nRF_read_register(CONFIG);
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	ec df       	rcall	.-40     	; 0x87e <nRF_read_register>
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8a6:	68 2f       	mov	r22, r24
 8a8:	63 60       	ori	r22, 0x03	; 3
	nRF_write_register(CONFIG,regval);
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	d8 df       	rcall	.-80     	; 0x85e <nRF_write_register>
	HIGH_CE;
 8ae:	88 b3       	in	r24, 0x18	; 24
 8b0:	82 60       	ori	r24, 0x02	; 2
 8b2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8b4:	8b e2       	ldi	r24, 0x2B	; 43
 8b6:	91 e0       	ldi	r25, 0x01	; 1
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <NRF24L01_RX_Mode+0x16>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <NRF24L01_RX_Mode+0x1c>
 8be:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
 8c0:	6b df       	rcall	.-298    	; 0x798 <NRF24_FlushRX>
	NRF24_FlushTX();
 8c2:	78 df       	rcall	.-272    	; 0x7b4 <NRF24_FlushTX>
 8c4:	08 95       	ret

000008c6 <NRF24_ini>:
uint8_t TX_ADDRESS[TX_ADR_WIDTH] = {0xb3,0xb4,0x01};//адрес
uint8_t RX_BUF[TX_PLOAD_WIDTH] = {0};//буффер для пакетов
//-------------------------------------------------------------
void NRF24_ini(void)
{
	LOW_CE;
 8c6:	88 b3       	in	r24, 0x18	; 24
 8c8:	8d 7f       	andi	r24, 0xFD	; 253
 8ca:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8cc:	8f e0       	ldi	r24, 0x0F	; 15
 8ce:	97 e2       	ldi	r25, 0x27	; 39
 8d0:	01 97       	sbiw	r24, 0x01	; 1
 8d2:	f1 f7       	brne	.-4      	; 0x8d0 <NRF24_ini+0xa>
 8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <NRF24_ini+0x10>
 8d6:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8d8:	6a e0       	ldi	r22, 0x0A	; 10
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	c0 df       	rcall	.-128    	; 0x85e <nRF_write_register>
 8de:	8f e0       	ldi	r24, 0x0F	; 15
 8e0:	97 e2       	ldi	r25, 0x27	; 39
 8e2:	01 97       	sbiw	r24, 0x01	; 1
 8e4:	f1 f7       	brne	.-4      	; 0x8e2 <NRF24_ini+0x1c>
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <NRF24_ini+0x22>
 8e8:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(EN_AA, 0x01); // Enable Pipe0
 8ea:	61 e0       	ldi	r22, 0x01	; 1
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	b7 df       	rcall	.-146    	; 0x85e <nRF_write_register>
	nRF_write_register(EN_RXADDR, 0x01); // Enable Pipe0
 8f0:	61 e0       	ldi	r22, 0x01	; 1
 8f2:	82 e0       	ldi	r24, 0x02	; 2
 8f4:	b4 df       	rcall	.-152    	; 0x85e <nRF_write_register>
	nRF_write_register(SETUP_AW, 0x01); // Setup address width=3 bytes
 8f6:	61 e0       	ldi	r22, 0x01	; 1
 8f8:	83 e0       	ldi	r24, 0x03	; 3
 8fa:	b1 df       	rcall	.-158    	; 0x85e <nRF_write_register>
	nRF_write_register(SETUP_RETR, 0x5F); // // 1500us, 15 retrans
 8fc:	6f e5       	ldi	r22, 0x5F	; 95
 8fe:	84 e0       	ldi	r24, 0x04	; 4
 900:	ae df       	rcall	.-164    	; 0x85e <nRF_write_register>
	NRF24_ToggleFeatures();
 902:	66 df       	rcall	.-308    	; 0x7d0 <NRF24_ToggleFeatures>
	nRF_write_register(FEATURE, 0);
 904:	60 e0       	ldi	r22, 0x00	; 0
 906:	8d e1       	ldi	r24, 0x1D	; 29
 908:	aa df       	rcall	.-172    	; 0x85e <nRF_write_register>
	nRF_write_register(DYNPD, 0);
 90a:	60 e0       	ldi	r22, 0x00	; 0
 90c:	8c e1       	ldi	r24, 0x1C	; 28
 90e:	a7 df       	rcall	.-178    	; 0x85e <nRF_write_register>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
 910:	60 e7       	ldi	r22, 0x70	; 112
 912:	87 e0       	ldi	r24, 0x07	; 7
 914:	a4 df       	rcall	.-184    	; 0x85e <nRF_write_register>
	nRF_write_register(RF_CH, 76); // частота 2476 MHz
 916:	6c e4       	ldi	r22, 0x4C	; 76
 918:	85 e0       	ldi	r24, 0x05	; 5
 91a:	a1 df       	rcall	.-190    	; 0x85e <nRF_write_register>
	nRF_write_register(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
 91c:	66 e0       	ldi	r22, 0x06	; 6
 91e:	86 e0       	ldi	r24, 0x06	; 6
 920:	9e df       	rcall	.-196    	; 0x85e <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 922:	43 e0       	ldi	r20, 0x03	; 3
 924:	60 e6       	ldi	r22, 0x60	; 96
 926:	70 e0       	ldi	r23, 0x00	; 0
 928:	80 e1       	ldi	r24, 0x10	; 16
 92a:	63 df       	rcall	.-314    	; 0x7f2 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);
 92c:	43 e0       	ldi	r20, 0x03	; 3
 92e:	60 e6       	ldi	r22, 0x60	; 96
 930:	70 e0       	ldi	r23, 0x00	; 0
 932:	8a e0       	ldi	r24, 0x0A	; 10
 934:	5e df       	rcall	.-324    	; 0x7f2 <NRF24_Write_Buf>
	nRF_write_register(RX_PW_P0, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 0
 936:	65 e0       	ldi	r22, 0x05	; 5
 938:	81 e1       	ldi	r24, 0x11	; 17
 93a:	91 df       	rcall	.-222    	; 0x85e <nRF_write_register>
	//пока уходим в режим приёмника
	NRF24L01_RX_Mode();
 93c:	b2 df       	rcall	.-156    	; 0x8a2 <NRF24L01_RX_Mode>
 93e:	08 95       	ret

00000940 <NRF24L01_Send>:
	HIGH_CSN;
	HIGH_CE;
}
//-------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 940:	cf 93       	push	r28
 942:	df 93       	push	r29
 944:	ec 01       	movw	r28, r24
	uint8_t status=0x00, regval=0x00; //количество повторных попыток передачи, а также количество потерянных пакетов
	NRF24L01_TX_Mode(pBuf);//перевод в режим передатчика
 946:	80 df       	rcall	.-256    	; 0x848 <NRF24L01_TX_Mode>
	regval = nRF_read_register(CONFIG);
 948:	80 e0       	ldi	r24, 0x00	; 0
 94a:	99 df       	rcall	.-206    	; 0x87e <nRF_read_register>
 94c:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);
	regval &= ~(1<<PRIM_RX);
 94e:	68 2f       	mov	r22, r24
 950:	62 60       	ori	r22, 0x02	; 2
	nRF_write_register(CONFIG,regval);
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	84 df       	rcall	.-248    	; 0x85e <nRF_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 956:	8b e2       	ldi	r24, 0x2B	; 43
 958:	91 e0       	ldi	r25, 0x01	; 1
 95a:	01 97       	sbiw	r24, 0x01	; 1
 95c:	f1 f7       	brne	.-4      	; 0x95a <NRF24L01_Send+0x1a>
 95e:	00 c0       	rjmp	.+0      	; 0x960 <NRF24L01_Send+0x20>
 960:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	//Отправим данные в воздух
	NRF24_Transmit(W_TX_PAYLOAD, pBuf, TX_PLOAD_WIDTH);
 962:	45 e0       	ldi	r20, 0x05	; 5
 964:	be 01       	movw	r22, r28
 966:	80 ea       	ldi	r24, 0xA0	; 160
 968:	e7 de       	rcall	.-562    	; 0x738 <NRF24_Transmit>
	HIGH_CE;
 96a:	88 b3       	in	r24, 0x18	; 24
 96c:	82 60       	ori	r24, 0x02	; 2
 96e:	88 bb       	out	0x18, r24	; 24
 970:	98 e2       	ldi	r25, 0x28	; 40
 972:	9a 95       	dec	r25
 974:	f1 f7       	brne	.-4      	; 0x972 <NRF24L01_Send+0x32>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	LOW_CE;
 976:	88 b3       	in	r24, 0x18	; 24
 978:	8d 7f       	andi	r24, 0xFD	; 253
 97a:	88 bb       	out	0x18, r24	; 24
	while( (PIND&(1<<IRQ)) != 0);
 97c:	82 99       	sbic	0x10, 2	; 16
 97e:	fe cf       	rjmp	.-4      	; 0x97c <NRF24L01_Send+0x3c>
	status = nRF_read_register(STATUS);
 980:	87 e0       	ldi	r24, 0x07	; 7
 982:	7d df       	rcall	.-262    	; 0x87e <nRF_read_register>
	if(status&TX_DS) //tx_ds == 0x20
 984:	98 2f       	mov	r25, r24
 986:	95 70       	andi	r25, 0x05	; 5
 988:	99 f0       	breq	.+38     	; 0x9b0 <NRF24L01_Send+0x70>
	{
		PORTD |= (1<<LED);
 98a:	82 b3       	in	r24, 0x12	; 18
 98c:	80 64       	ori	r24, 0x40	; 64
 98e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 990:	2f ef       	ldi	r18, 0xFF	; 255
 992:	80 e7       	ldi	r24, 0x70	; 112
 994:	92 e0       	ldi	r25, 0x02	; 2
 996:	21 50       	subi	r18, 0x01	; 1
 998:	80 40       	sbci	r24, 0x00	; 0
 99a:	90 40       	sbci	r25, 0x00	; 0
 99c:	e1 f7       	brne	.-8      	; 0x996 <NRF24L01_Send+0x56>
 99e:	00 c0       	rjmp	.+0      	; 0x9a0 <NRF24L01_Send+0x60>
 9a0:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED);
 9a2:	82 b3       	in	r24, 0x12	; 18
 9a4:	8f 7b       	andi	r24, 0xBF	; 191
 9a6:	82 bb       	out	0x12, r24	; 18
		nRF_write_register(STATUS, 0x20);
 9a8:	60 e2       	ldi	r22, 0x20	; 32
 9aa:	87 e0       	ldi	r24, 0x07	; 7
 9ac:	58 df       	rcall	.-336    	; 0x85e <nRF_write_register>
 9ae:	06 c0       	rjmp	.+12     	; 0x9bc <NRF24L01_Send+0x7c>
	}
	else if(status&MAX_RT)
 9b0:	82 ff       	sbrs	r24, 2
 9b2:	04 c0       	rjmp	.+8      	; 0x9bc <NRF24L01_Send+0x7c>
	{
		nRF_write_register(STATUS, 0x10);
 9b4:	60 e1       	ldi	r22, 0x10	; 16
 9b6:	87 e0       	ldi	r24, 0x07	; 7
 9b8:	52 df       	rcall	.-348    	; 0x85e <nRF_write_register>
		NRF24_FlushTX();
 9ba:	fc de       	rcall	.-520    	; 0x7b4 <NRF24_FlushTX>
	}
	regval = nRF_read_register(OBSERVE_TX);
 9bc:	88 e0       	ldi	r24, 0x08	; 8
 9be:	5f df       	rcall	.-322    	; 0x87e <nRF_read_register>
 9c0:	c8 2f       	mov	r28, r24
	//Уходим в режим приёмника
	NRF24L01_RX_Mode();
 9c2:	6f df       	rcall	.-290    	; 0x8a2 <NRF24L01_RX_Mode>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
 9c4:	60 e7       	ldi	r22, 0x70	; 112
 9c6:	87 e0       	ldi	r24, 0x07	; 7
 9c8:	4a df       	rcall	.-364    	; 0x85e <nRF_write_register>
	return regval;
}
 9ca:	8c 2f       	mov	r24, r28
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	08 95       	ret

000009d2 <memset>:
 9d2:	dc 01       	movw	r26, r24
 9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <memset+0x6>
 9d6:	6d 93       	st	X+, r22
 9d8:	41 50       	subi	r20, 0x01	; 1
 9da:	50 40       	sbci	r21, 0x00	; 0
 9dc:	e0 f7       	brcc	.-8      	; 0x9d6 <memset+0x4>
 9de:	08 95       	ret

000009e0 <sprintf>:
 9e0:	ae e0       	ldi	r26, 0x0E	; 14
 9e2:	b0 e0       	ldi	r27, 0x00	; 0
 9e4:	e5 ef       	ldi	r30, 0xF5	; 245
 9e6:	f4 e0       	ldi	r31, 0x04	; 4
 9e8:	aa c2       	rjmp	.+1364   	; 0xf3e <__prologue_saves__+0x1c>
 9ea:	0d 89       	ldd	r16, Y+21	; 0x15
 9ec:	1e 89       	ldd	r17, Y+22	; 0x16
 9ee:	86 e0       	ldi	r24, 0x06	; 6
 9f0:	8c 83       	std	Y+4, r24	; 0x04
 9f2:	1a 83       	std	Y+2, r17	; 0x02
 9f4:	09 83       	std	Y+1, r16	; 0x01
 9f6:	8f ef       	ldi	r24, 0xFF	; 255
 9f8:	9f e7       	ldi	r25, 0x7F	; 127
 9fa:	9e 83       	std	Y+6, r25	; 0x06
 9fc:	8d 83       	std	Y+5, r24	; 0x05
 9fe:	ae 01       	movw	r20, r28
 a00:	47 5e       	subi	r20, 0xE7	; 231
 a02:	5f 4f       	sbci	r21, 0xFF	; 255
 a04:	6f 89       	ldd	r22, Y+23	; 0x17
 a06:	78 8d       	ldd	r23, Y+24	; 0x18
 a08:	ce 01       	movw	r24, r28
 a0a:	01 96       	adiw	r24, 0x01	; 1
 a0c:	08 d0       	rcall	.+16     	; 0xa1e <vfprintf>
 a0e:	ef 81       	ldd	r30, Y+7	; 0x07
 a10:	f8 85       	ldd	r31, Y+8	; 0x08
 a12:	e0 0f       	add	r30, r16
 a14:	f1 1f       	adc	r31, r17
 a16:	10 82       	st	Z, r1
 a18:	2e 96       	adiw	r28, 0x0e	; 14
 a1a:	e4 e0       	ldi	r30, 0x04	; 4
 a1c:	ac c2       	rjmp	.+1368   	; 0xf76 <__epilogue_restores__+0x1c>

00000a1e <vfprintf>:
 a1e:	ab e0       	ldi	r26, 0x0B	; 11
 a20:	b0 e0       	ldi	r27, 0x00	; 0
 a22:	e4 e1       	ldi	r30, 0x14	; 20
 a24:	f5 e0       	ldi	r31, 0x05	; 5
 a26:	7d c2       	rjmp	.+1274   	; 0xf22 <__prologue_saves__>
 a28:	6c 01       	movw	r12, r24
 a2a:	7b 01       	movw	r14, r22
 a2c:	8a 01       	movw	r16, r20
 a2e:	fc 01       	movw	r30, r24
 a30:	17 82       	std	Z+7, r1	; 0x07
 a32:	16 82       	std	Z+6, r1	; 0x06
 a34:	83 81       	ldd	r24, Z+3	; 0x03
 a36:	81 ff       	sbrs	r24, 1
 a38:	bf c1       	rjmp	.+894    	; 0xdb8 <vfprintf+0x39a>
 a3a:	ce 01       	movw	r24, r28
 a3c:	01 96       	adiw	r24, 0x01	; 1
 a3e:	3c 01       	movw	r6, r24
 a40:	f6 01       	movw	r30, r12
 a42:	93 81       	ldd	r25, Z+3	; 0x03
 a44:	f7 01       	movw	r30, r14
 a46:	93 fd       	sbrc	r25, 3
 a48:	85 91       	lpm	r24, Z+
 a4a:	93 ff       	sbrs	r25, 3
 a4c:	81 91       	ld	r24, Z+
 a4e:	7f 01       	movw	r14, r30
 a50:	88 23       	and	r24, r24
 a52:	09 f4       	brne	.+2      	; 0xa56 <vfprintf+0x38>
 a54:	ad c1       	rjmp	.+858    	; 0xdb0 <vfprintf+0x392>
 a56:	85 32       	cpi	r24, 0x25	; 37
 a58:	39 f4       	brne	.+14     	; 0xa68 <vfprintf+0x4a>
 a5a:	93 fd       	sbrc	r25, 3
 a5c:	85 91       	lpm	r24, Z+
 a5e:	93 ff       	sbrs	r25, 3
 a60:	81 91       	ld	r24, Z+
 a62:	7f 01       	movw	r14, r30
 a64:	85 32       	cpi	r24, 0x25	; 37
 a66:	21 f4       	brne	.+8      	; 0xa70 <vfprintf+0x52>
 a68:	b6 01       	movw	r22, r12
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	c0 d1       	rcall	.+896    	; 0xdee <fputc>
 a6e:	e8 cf       	rjmp	.-48     	; 0xa40 <vfprintf+0x22>
 a70:	91 2c       	mov	r9, r1
 a72:	21 2c       	mov	r2, r1
 a74:	31 2c       	mov	r3, r1
 a76:	ff e1       	ldi	r31, 0x1F	; 31
 a78:	f3 15       	cp	r31, r3
 a7a:	d8 f0       	brcs	.+54     	; 0xab2 <vfprintf+0x94>
 a7c:	8b 32       	cpi	r24, 0x2B	; 43
 a7e:	79 f0       	breq	.+30     	; 0xa9e <vfprintf+0x80>
 a80:	38 f4       	brcc	.+14     	; 0xa90 <vfprintf+0x72>
 a82:	80 32       	cpi	r24, 0x20	; 32
 a84:	79 f0       	breq	.+30     	; 0xaa4 <vfprintf+0x86>
 a86:	83 32       	cpi	r24, 0x23	; 35
 a88:	a1 f4       	brne	.+40     	; 0xab2 <vfprintf+0x94>
 a8a:	23 2d       	mov	r18, r3
 a8c:	20 61       	ori	r18, 0x10	; 16
 a8e:	1d c0       	rjmp	.+58     	; 0xaca <vfprintf+0xac>
 a90:	8d 32       	cpi	r24, 0x2D	; 45
 a92:	61 f0       	breq	.+24     	; 0xaac <vfprintf+0x8e>
 a94:	80 33       	cpi	r24, 0x30	; 48
 a96:	69 f4       	brne	.+26     	; 0xab2 <vfprintf+0x94>
 a98:	23 2d       	mov	r18, r3
 a9a:	21 60       	ori	r18, 0x01	; 1
 a9c:	16 c0       	rjmp	.+44     	; 0xaca <vfprintf+0xac>
 a9e:	83 2d       	mov	r24, r3
 aa0:	82 60       	ori	r24, 0x02	; 2
 aa2:	38 2e       	mov	r3, r24
 aa4:	e3 2d       	mov	r30, r3
 aa6:	e4 60       	ori	r30, 0x04	; 4
 aa8:	3e 2e       	mov	r3, r30
 aaa:	2a c0       	rjmp	.+84     	; 0xb00 <vfprintf+0xe2>
 aac:	f3 2d       	mov	r31, r3
 aae:	f8 60       	ori	r31, 0x08	; 8
 ab0:	1d c0       	rjmp	.+58     	; 0xaec <vfprintf+0xce>
 ab2:	37 fc       	sbrc	r3, 7
 ab4:	2d c0       	rjmp	.+90     	; 0xb10 <vfprintf+0xf2>
 ab6:	20 ed       	ldi	r18, 0xD0	; 208
 ab8:	28 0f       	add	r18, r24
 aba:	2a 30       	cpi	r18, 0x0A	; 10
 abc:	40 f0       	brcs	.+16     	; 0xace <vfprintf+0xb0>
 abe:	8e 32       	cpi	r24, 0x2E	; 46
 ac0:	b9 f4       	brne	.+46     	; 0xaf0 <vfprintf+0xd2>
 ac2:	36 fc       	sbrc	r3, 6
 ac4:	75 c1       	rjmp	.+746    	; 0xdb0 <vfprintf+0x392>
 ac6:	23 2d       	mov	r18, r3
 ac8:	20 64       	ori	r18, 0x40	; 64
 aca:	32 2e       	mov	r3, r18
 acc:	19 c0       	rjmp	.+50     	; 0xb00 <vfprintf+0xe2>
 ace:	36 fe       	sbrs	r3, 6
 ad0:	06 c0       	rjmp	.+12     	; 0xade <vfprintf+0xc0>
 ad2:	8a e0       	ldi	r24, 0x0A	; 10
 ad4:	98 9e       	mul	r9, r24
 ad6:	20 0d       	add	r18, r0
 ad8:	11 24       	eor	r1, r1
 ada:	92 2e       	mov	r9, r18
 adc:	11 c0       	rjmp	.+34     	; 0xb00 <vfprintf+0xe2>
 ade:	ea e0       	ldi	r30, 0x0A	; 10
 ae0:	2e 9e       	mul	r2, r30
 ae2:	20 0d       	add	r18, r0
 ae4:	11 24       	eor	r1, r1
 ae6:	22 2e       	mov	r2, r18
 ae8:	f3 2d       	mov	r31, r3
 aea:	f0 62       	ori	r31, 0x20	; 32
 aec:	3f 2e       	mov	r3, r31
 aee:	08 c0       	rjmp	.+16     	; 0xb00 <vfprintf+0xe2>
 af0:	8c 36       	cpi	r24, 0x6C	; 108
 af2:	21 f4       	brne	.+8      	; 0xafc <vfprintf+0xde>
 af4:	83 2d       	mov	r24, r3
 af6:	80 68       	ori	r24, 0x80	; 128
 af8:	38 2e       	mov	r3, r24
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <vfprintf+0xe2>
 afc:	88 36       	cpi	r24, 0x68	; 104
 afe:	41 f4       	brne	.+16     	; 0xb10 <vfprintf+0xf2>
 b00:	f7 01       	movw	r30, r14
 b02:	93 fd       	sbrc	r25, 3
 b04:	85 91       	lpm	r24, Z+
 b06:	93 ff       	sbrs	r25, 3
 b08:	81 91       	ld	r24, Z+
 b0a:	7f 01       	movw	r14, r30
 b0c:	81 11       	cpse	r24, r1
 b0e:	b3 cf       	rjmp	.-154    	; 0xa76 <vfprintf+0x58>
 b10:	98 2f       	mov	r25, r24
 b12:	9f 7d       	andi	r25, 0xDF	; 223
 b14:	95 54       	subi	r25, 0x45	; 69
 b16:	93 30       	cpi	r25, 0x03	; 3
 b18:	28 f4       	brcc	.+10     	; 0xb24 <vfprintf+0x106>
 b1a:	0c 5f       	subi	r16, 0xFC	; 252
 b1c:	1f 4f       	sbci	r17, 0xFF	; 255
 b1e:	9f e3       	ldi	r25, 0x3F	; 63
 b20:	99 83       	std	Y+1, r25	; 0x01
 b22:	0d c0       	rjmp	.+26     	; 0xb3e <vfprintf+0x120>
 b24:	83 36       	cpi	r24, 0x63	; 99
 b26:	31 f0       	breq	.+12     	; 0xb34 <vfprintf+0x116>
 b28:	83 37       	cpi	r24, 0x73	; 115
 b2a:	71 f0       	breq	.+28     	; 0xb48 <vfprintf+0x12a>
 b2c:	83 35       	cpi	r24, 0x53	; 83
 b2e:	09 f0       	breq	.+2      	; 0xb32 <vfprintf+0x114>
 b30:	55 c0       	rjmp	.+170    	; 0xbdc <vfprintf+0x1be>
 b32:	20 c0       	rjmp	.+64     	; 0xb74 <vfprintf+0x156>
 b34:	f8 01       	movw	r30, r16
 b36:	80 81       	ld	r24, Z
 b38:	89 83       	std	Y+1, r24	; 0x01
 b3a:	0e 5f       	subi	r16, 0xFE	; 254
 b3c:	1f 4f       	sbci	r17, 0xFF	; 255
 b3e:	88 24       	eor	r8, r8
 b40:	83 94       	inc	r8
 b42:	91 2c       	mov	r9, r1
 b44:	53 01       	movw	r10, r6
 b46:	12 c0       	rjmp	.+36     	; 0xb6c <vfprintf+0x14e>
 b48:	28 01       	movw	r4, r16
 b4a:	f2 e0       	ldi	r31, 0x02	; 2
 b4c:	4f 0e       	add	r4, r31
 b4e:	51 1c       	adc	r5, r1
 b50:	f8 01       	movw	r30, r16
 b52:	a0 80       	ld	r10, Z
 b54:	b1 80       	ldd	r11, Z+1	; 0x01
 b56:	36 fe       	sbrs	r3, 6
 b58:	03 c0       	rjmp	.+6      	; 0xb60 <vfprintf+0x142>
 b5a:	69 2d       	mov	r22, r9
 b5c:	70 e0       	ldi	r23, 0x00	; 0
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <vfprintf+0x146>
 b60:	6f ef       	ldi	r22, 0xFF	; 255
 b62:	7f ef       	ldi	r23, 0xFF	; 255
 b64:	c5 01       	movw	r24, r10
 b66:	38 d1       	rcall	.+624    	; 0xdd8 <strnlen>
 b68:	4c 01       	movw	r8, r24
 b6a:	82 01       	movw	r16, r4
 b6c:	f3 2d       	mov	r31, r3
 b6e:	ff 77       	andi	r31, 0x7F	; 127
 b70:	3f 2e       	mov	r3, r31
 b72:	15 c0       	rjmp	.+42     	; 0xb9e <vfprintf+0x180>
 b74:	28 01       	movw	r4, r16
 b76:	22 e0       	ldi	r18, 0x02	; 2
 b78:	42 0e       	add	r4, r18
 b7a:	51 1c       	adc	r5, r1
 b7c:	f8 01       	movw	r30, r16
 b7e:	a0 80       	ld	r10, Z
 b80:	b1 80       	ldd	r11, Z+1	; 0x01
 b82:	36 fe       	sbrs	r3, 6
 b84:	03 c0       	rjmp	.+6      	; 0xb8c <vfprintf+0x16e>
 b86:	69 2d       	mov	r22, r9
 b88:	70 e0       	ldi	r23, 0x00	; 0
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <vfprintf+0x172>
 b8c:	6f ef       	ldi	r22, 0xFF	; 255
 b8e:	7f ef       	ldi	r23, 0xFF	; 255
 b90:	c5 01       	movw	r24, r10
 b92:	17 d1       	rcall	.+558    	; 0xdc2 <strnlen_P>
 b94:	4c 01       	movw	r8, r24
 b96:	f3 2d       	mov	r31, r3
 b98:	f0 68       	ori	r31, 0x80	; 128
 b9a:	3f 2e       	mov	r3, r31
 b9c:	82 01       	movw	r16, r4
 b9e:	33 fc       	sbrc	r3, 3
 ba0:	19 c0       	rjmp	.+50     	; 0xbd4 <vfprintf+0x1b6>
 ba2:	82 2d       	mov	r24, r2
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	88 16       	cp	r8, r24
 ba8:	99 06       	cpc	r9, r25
 baa:	a0 f4       	brcc	.+40     	; 0xbd4 <vfprintf+0x1b6>
 bac:	b6 01       	movw	r22, r12
 bae:	80 e2       	ldi	r24, 0x20	; 32
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	1d d1       	rcall	.+570    	; 0xdee <fputc>
 bb4:	2a 94       	dec	r2
 bb6:	f5 cf       	rjmp	.-22     	; 0xba2 <vfprintf+0x184>
 bb8:	f5 01       	movw	r30, r10
 bba:	37 fc       	sbrc	r3, 7
 bbc:	85 91       	lpm	r24, Z+
 bbe:	37 fe       	sbrs	r3, 7
 bc0:	81 91       	ld	r24, Z+
 bc2:	5f 01       	movw	r10, r30
 bc4:	b6 01       	movw	r22, r12
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	12 d1       	rcall	.+548    	; 0xdee <fputc>
 bca:	21 10       	cpse	r2, r1
 bcc:	2a 94       	dec	r2
 bce:	21 e0       	ldi	r18, 0x01	; 1
 bd0:	82 1a       	sub	r8, r18
 bd2:	91 08       	sbc	r9, r1
 bd4:	81 14       	cp	r8, r1
 bd6:	91 04       	cpc	r9, r1
 bd8:	79 f7       	brne	.-34     	; 0xbb8 <vfprintf+0x19a>
 bda:	e1 c0       	rjmp	.+450    	; 0xd9e <vfprintf+0x380>
 bdc:	84 36       	cpi	r24, 0x64	; 100
 bde:	11 f0       	breq	.+4      	; 0xbe4 <vfprintf+0x1c6>
 be0:	89 36       	cpi	r24, 0x69	; 105
 be2:	39 f5       	brne	.+78     	; 0xc32 <vfprintf+0x214>
 be4:	f8 01       	movw	r30, r16
 be6:	37 fe       	sbrs	r3, 7
 be8:	07 c0       	rjmp	.+14     	; 0xbf8 <vfprintf+0x1da>
 bea:	60 81       	ld	r22, Z
 bec:	71 81       	ldd	r23, Z+1	; 0x01
 bee:	82 81       	ldd	r24, Z+2	; 0x02
 bf0:	93 81       	ldd	r25, Z+3	; 0x03
 bf2:	0c 5f       	subi	r16, 0xFC	; 252
 bf4:	1f 4f       	sbci	r17, 0xFF	; 255
 bf6:	08 c0       	rjmp	.+16     	; 0xc08 <vfprintf+0x1ea>
 bf8:	60 81       	ld	r22, Z
 bfa:	71 81       	ldd	r23, Z+1	; 0x01
 bfc:	07 2e       	mov	r0, r23
 bfe:	00 0c       	add	r0, r0
 c00:	88 0b       	sbc	r24, r24
 c02:	99 0b       	sbc	r25, r25
 c04:	0e 5f       	subi	r16, 0xFE	; 254
 c06:	1f 4f       	sbci	r17, 0xFF	; 255
 c08:	f3 2d       	mov	r31, r3
 c0a:	ff 76       	andi	r31, 0x6F	; 111
 c0c:	3f 2e       	mov	r3, r31
 c0e:	97 ff       	sbrs	r25, 7
 c10:	09 c0       	rjmp	.+18     	; 0xc24 <vfprintf+0x206>
 c12:	90 95       	com	r25
 c14:	80 95       	com	r24
 c16:	70 95       	com	r23
 c18:	61 95       	neg	r22
 c1a:	7f 4f       	sbci	r23, 0xFF	; 255
 c1c:	8f 4f       	sbci	r24, 0xFF	; 255
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	f0 68       	ori	r31, 0x80	; 128
 c22:	3f 2e       	mov	r3, r31
 c24:	2a e0       	ldi	r18, 0x0A	; 10
 c26:	30 e0       	ldi	r19, 0x00	; 0
 c28:	a3 01       	movw	r20, r6
 c2a:	1d d1       	rcall	.+570    	; 0xe66 <__ultoa_invert>
 c2c:	88 2e       	mov	r8, r24
 c2e:	86 18       	sub	r8, r6
 c30:	44 c0       	rjmp	.+136    	; 0xcba <vfprintf+0x29c>
 c32:	85 37       	cpi	r24, 0x75	; 117
 c34:	31 f4       	brne	.+12     	; 0xc42 <vfprintf+0x224>
 c36:	23 2d       	mov	r18, r3
 c38:	2f 7e       	andi	r18, 0xEF	; 239
 c3a:	b2 2e       	mov	r11, r18
 c3c:	2a e0       	ldi	r18, 0x0A	; 10
 c3e:	30 e0       	ldi	r19, 0x00	; 0
 c40:	25 c0       	rjmp	.+74     	; 0xc8c <vfprintf+0x26e>
 c42:	93 2d       	mov	r25, r3
 c44:	99 7f       	andi	r25, 0xF9	; 249
 c46:	b9 2e       	mov	r11, r25
 c48:	8f 36       	cpi	r24, 0x6F	; 111
 c4a:	c1 f0       	breq	.+48     	; 0xc7c <vfprintf+0x25e>
 c4c:	18 f4       	brcc	.+6      	; 0xc54 <vfprintf+0x236>
 c4e:	88 35       	cpi	r24, 0x58	; 88
 c50:	79 f0       	breq	.+30     	; 0xc70 <vfprintf+0x252>
 c52:	ae c0       	rjmp	.+348    	; 0xdb0 <vfprintf+0x392>
 c54:	80 37       	cpi	r24, 0x70	; 112
 c56:	19 f0       	breq	.+6      	; 0xc5e <vfprintf+0x240>
 c58:	88 37       	cpi	r24, 0x78	; 120
 c5a:	21 f0       	breq	.+8      	; 0xc64 <vfprintf+0x246>
 c5c:	a9 c0       	rjmp	.+338    	; 0xdb0 <vfprintf+0x392>
 c5e:	e9 2f       	mov	r30, r25
 c60:	e0 61       	ori	r30, 0x10	; 16
 c62:	be 2e       	mov	r11, r30
 c64:	b4 fe       	sbrs	r11, 4
 c66:	0d c0       	rjmp	.+26     	; 0xc82 <vfprintf+0x264>
 c68:	fb 2d       	mov	r31, r11
 c6a:	f4 60       	ori	r31, 0x04	; 4
 c6c:	bf 2e       	mov	r11, r31
 c6e:	09 c0       	rjmp	.+18     	; 0xc82 <vfprintf+0x264>
 c70:	34 fe       	sbrs	r3, 4
 c72:	0a c0       	rjmp	.+20     	; 0xc88 <vfprintf+0x26a>
 c74:	29 2f       	mov	r18, r25
 c76:	26 60       	ori	r18, 0x06	; 6
 c78:	b2 2e       	mov	r11, r18
 c7a:	06 c0       	rjmp	.+12     	; 0xc88 <vfprintf+0x26a>
 c7c:	28 e0       	ldi	r18, 0x08	; 8
 c7e:	30 e0       	ldi	r19, 0x00	; 0
 c80:	05 c0       	rjmp	.+10     	; 0xc8c <vfprintf+0x26e>
 c82:	20 e1       	ldi	r18, 0x10	; 16
 c84:	30 e0       	ldi	r19, 0x00	; 0
 c86:	02 c0       	rjmp	.+4      	; 0xc8c <vfprintf+0x26e>
 c88:	20 e1       	ldi	r18, 0x10	; 16
 c8a:	32 e0       	ldi	r19, 0x02	; 2
 c8c:	f8 01       	movw	r30, r16
 c8e:	b7 fe       	sbrs	r11, 7
 c90:	07 c0       	rjmp	.+14     	; 0xca0 <vfprintf+0x282>
 c92:	60 81       	ld	r22, Z
 c94:	71 81       	ldd	r23, Z+1	; 0x01
 c96:	82 81       	ldd	r24, Z+2	; 0x02
 c98:	93 81       	ldd	r25, Z+3	; 0x03
 c9a:	0c 5f       	subi	r16, 0xFC	; 252
 c9c:	1f 4f       	sbci	r17, 0xFF	; 255
 c9e:	06 c0       	rjmp	.+12     	; 0xcac <vfprintf+0x28e>
 ca0:	60 81       	ld	r22, Z
 ca2:	71 81       	ldd	r23, Z+1	; 0x01
 ca4:	80 e0       	ldi	r24, 0x00	; 0
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	0e 5f       	subi	r16, 0xFE	; 254
 caa:	1f 4f       	sbci	r17, 0xFF	; 255
 cac:	a3 01       	movw	r20, r6
 cae:	db d0       	rcall	.+438    	; 0xe66 <__ultoa_invert>
 cb0:	88 2e       	mov	r8, r24
 cb2:	86 18       	sub	r8, r6
 cb4:	fb 2d       	mov	r31, r11
 cb6:	ff 77       	andi	r31, 0x7F	; 127
 cb8:	3f 2e       	mov	r3, r31
 cba:	36 fe       	sbrs	r3, 6
 cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <vfprintf+0x2ba>
 cbe:	23 2d       	mov	r18, r3
 cc0:	2e 7f       	andi	r18, 0xFE	; 254
 cc2:	a2 2e       	mov	r10, r18
 cc4:	89 14       	cp	r8, r9
 cc6:	58 f4       	brcc	.+22     	; 0xcde <vfprintf+0x2c0>
 cc8:	34 fe       	sbrs	r3, 4
 cca:	0b c0       	rjmp	.+22     	; 0xce2 <vfprintf+0x2c4>
 ccc:	32 fc       	sbrc	r3, 2
 cce:	09 c0       	rjmp	.+18     	; 0xce2 <vfprintf+0x2c4>
 cd0:	83 2d       	mov	r24, r3
 cd2:	8e 7e       	andi	r24, 0xEE	; 238
 cd4:	a8 2e       	mov	r10, r24
 cd6:	05 c0       	rjmp	.+10     	; 0xce2 <vfprintf+0x2c4>
 cd8:	b8 2c       	mov	r11, r8
 cda:	a3 2c       	mov	r10, r3
 cdc:	03 c0       	rjmp	.+6      	; 0xce4 <vfprintf+0x2c6>
 cde:	b8 2c       	mov	r11, r8
 ce0:	01 c0       	rjmp	.+2      	; 0xce4 <vfprintf+0x2c6>
 ce2:	b9 2c       	mov	r11, r9
 ce4:	a4 fe       	sbrs	r10, 4
 ce6:	0f c0       	rjmp	.+30     	; 0xd06 <vfprintf+0x2e8>
 ce8:	fe 01       	movw	r30, r28
 cea:	e8 0d       	add	r30, r8
 cec:	f1 1d       	adc	r31, r1
 cee:	80 81       	ld	r24, Z
 cf0:	80 33       	cpi	r24, 0x30	; 48
 cf2:	21 f4       	brne	.+8      	; 0xcfc <vfprintf+0x2de>
 cf4:	9a 2d       	mov	r25, r10
 cf6:	99 7e       	andi	r25, 0xE9	; 233
 cf8:	a9 2e       	mov	r10, r25
 cfa:	09 c0       	rjmp	.+18     	; 0xd0e <vfprintf+0x2f0>
 cfc:	a2 fe       	sbrs	r10, 2
 cfe:	06 c0       	rjmp	.+12     	; 0xd0c <vfprintf+0x2ee>
 d00:	b3 94       	inc	r11
 d02:	b3 94       	inc	r11
 d04:	04 c0       	rjmp	.+8      	; 0xd0e <vfprintf+0x2f0>
 d06:	8a 2d       	mov	r24, r10
 d08:	86 78       	andi	r24, 0x86	; 134
 d0a:	09 f0       	breq	.+2      	; 0xd0e <vfprintf+0x2f0>
 d0c:	b3 94       	inc	r11
 d0e:	a3 fc       	sbrc	r10, 3
 d10:	10 c0       	rjmp	.+32     	; 0xd32 <vfprintf+0x314>
 d12:	a0 fe       	sbrs	r10, 0
 d14:	06 c0       	rjmp	.+12     	; 0xd22 <vfprintf+0x304>
 d16:	b2 14       	cp	r11, r2
 d18:	80 f4       	brcc	.+32     	; 0xd3a <vfprintf+0x31c>
 d1a:	28 0c       	add	r2, r8
 d1c:	92 2c       	mov	r9, r2
 d1e:	9b 18       	sub	r9, r11
 d20:	0d c0       	rjmp	.+26     	; 0xd3c <vfprintf+0x31e>
 d22:	b2 14       	cp	r11, r2
 d24:	58 f4       	brcc	.+22     	; 0xd3c <vfprintf+0x31e>
 d26:	b6 01       	movw	r22, r12
 d28:	80 e2       	ldi	r24, 0x20	; 32
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	60 d0       	rcall	.+192    	; 0xdee <fputc>
 d2e:	b3 94       	inc	r11
 d30:	f8 cf       	rjmp	.-16     	; 0xd22 <vfprintf+0x304>
 d32:	b2 14       	cp	r11, r2
 d34:	18 f4       	brcc	.+6      	; 0xd3c <vfprintf+0x31e>
 d36:	2b 18       	sub	r2, r11
 d38:	02 c0       	rjmp	.+4      	; 0xd3e <vfprintf+0x320>
 d3a:	98 2c       	mov	r9, r8
 d3c:	21 2c       	mov	r2, r1
 d3e:	a4 fe       	sbrs	r10, 4
 d40:	0f c0       	rjmp	.+30     	; 0xd60 <vfprintf+0x342>
 d42:	b6 01       	movw	r22, r12
 d44:	80 e3       	ldi	r24, 0x30	; 48
 d46:	90 e0       	ldi	r25, 0x00	; 0
 d48:	52 d0       	rcall	.+164    	; 0xdee <fputc>
 d4a:	a2 fe       	sbrs	r10, 2
 d4c:	16 c0       	rjmp	.+44     	; 0xd7a <vfprintf+0x35c>
 d4e:	a1 fc       	sbrc	r10, 1
 d50:	03 c0       	rjmp	.+6      	; 0xd58 <vfprintf+0x33a>
 d52:	88 e7       	ldi	r24, 0x78	; 120
 d54:	90 e0       	ldi	r25, 0x00	; 0
 d56:	02 c0       	rjmp	.+4      	; 0xd5c <vfprintf+0x33e>
 d58:	88 e5       	ldi	r24, 0x58	; 88
 d5a:	90 e0       	ldi	r25, 0x00	; 0
 d5c:	b6 01       	movw	r22, r12
 d5e:	0c c0       	rjmp	.+24     	; 0xd78 <vfprintf+0x35a>
 d60:	8a 2d       	mov	r24, r10
 d62:	86 78       	andi	r24, 0x86	; 134
 d64:	51 f0       	breq	.+20     	; 0xd7a <vfprintf+0x35c>
 d66:	a1 fe       	sbrs	r10, 1
 d68:	02 c0       	rjmp	.+4      	; 0xd6e <vfprintf+0x350>
 d6a:	8b e2       	ldi	r24, 0x2B	; 43
 d6c:	01 c0       	rjmp	.+2      	; 0xd70 <vfprintf+0x352>
 d6e:	80 e2       	ldi	r24, 0x20	; 32
 d70:	a7 fc       	sbrc	r10, 7
 d72:	8d e2       	ldi	r24, 0x2D	; 45
 d74:	b6 01       	movw	r22, r12
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	3a d0       	rcall	.+116    	; 0xdee <fputc>
 d7a:	89 14       	cp	r8, r9
 d7c:	30 f4       	brcc	.+12     	; 0xd8a <vfprintf+0x36c>
 d7e:	b6 01       	movw	r22, r12
 d80:	80 e3       	ldi	r24, 0x30	; 48
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	34 d0       	rcall	.+104    	; 0xdee <fputc>
 d86:	9a 94       	dec	r9
 d88:	f8 cf       	rjmp	.-16     	; 0xd7a <vfprintf+0x35c>
 d8a:	8a 94       	dec	r8
 d8c:	f3 01       	movw	r30, r6
 d8e:	e8 0d       	add	r30, r8
 d90:	f1 1d       	adc	r31, r1
 d92:	80 81       	ld	r24, Z
 d94:	b6 01       	movw	r22, r12
 d96:	90 e0       	ldi	r25, 0x00	; 0
 d98:	2a d0       	rcall	.+84     	; 0xdee <fputc>
 d9a:	81 10       	cpse	r8, r1
 d9c:	f6 cf       	rjmp	.-20     	; 0xd8a <vfprintf+0x36c>
 d9e:	22 20       	and	r2, r2
 da0:	09 f4       	brne	.+2      	; 0xda4 <vfprintf+0x386>
 da2:	4e ce       	rjmp	.-868    	; 0xa40 <vfprintf+0x22>
 da4:	b6 01       	movw	r22, r12
 da6:	80 e2       	ldi	r24, 0x20	; 32
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	21 d0       	rcall	.+66     	; 0xdee <fputc>
 dac:	2a 94       	dec	r2
 dae:	f7 cf       	rjmp	.-18     	; 0xd9e <vfprintf+0x380>
 db0:	f6 01       	movw	r30, r12
 db2:	86 81       	ldd	r24, Z+6	; 0x06
 db4:	97 81       	ldd	r25, Z+7	; 0x07
 db6:	02 c0       	rjmp	.+4      	; 0xdbc <vfprintf+0x39e>
 db8:	8f ef       	ldi	r24, 0xFF	; 255
 dba:	9f ef       	ldi	r25, 0xFF	; 255
 dbc:	2b 96       	adiw	r28, 0x0b	; 11
 dbe:	e2 e1       	ldi	r30, 0x12	; 18
 dc0:	cc c0       	rjmp	.+408    	; 0xf5a <__epilogue_restores__>

00000dc2 <strnlen_P>:
 dc2:	fc 01       	movw	r30, r24
 dc4:	05 90       	lpm	r0, Z+
 dc6:	61 50       	subi	r22, 0x01	; 1
 dc8:	70 40       	sbci	r23, 0x00	; 0
 dca:	01 10       	cpse	r0, r1
 dcc:	d8 f7       	brcc	.-10     	; 0xdc4 <strnlen_P+0x2>
 dce:	80 95       	com	r24
 dd0:	90 95       	com	r25
 dd2:	8e 0f       	add	r24, r30
 dd4:	9f 1f       	adc	r25, r31
 dd6:	08 95       	ret

00000dd8 <strnlen>:
 dd8:	fc 01       	movw	r30, r24
 dda:	61 50       	subi	r22, 0x01	; 1
 ddc:	70 40       	sbci	r23, 0x00	; 0
 dde:	01 90       	ld	r0, Z+
 de0:	01 10       	cpse	r0, r1
 de2:	d8 f7       	brcc	.-10     	; 0xdda <strnlen+0x2>
 de4:	80 95       	com	r24
 de6:	90 95       	com	r25
 de8:	8e 0f       	add	r24, r30
 dea:	9f 1f       	adc	r25, r31
 dec:	08 95       	ret

00000dee <fputc>:
 dee:	0f 93       	push	r16
 df0:	1f 93       	push	r17
 df2:	cf 93       	push	r28
 df4:	df 93       	push	r29
 df6:	fb 01       	movw	r30, r22
 df8:	23 81       	ldd	r18, Z+3	; 0x03
 dfa:	21 fd       	sbrc	r18, 1
 dfc:	03 c0       	rjmp	.+6      	; 0xe04 <fputc+0x16>
 dfe:	8f ef       	ldi	r24, 0xFF	; 255
 e00:	9f ef       	ldi	r25, 0xFF	; 255
 e02:	2c c0       	rjmp	.+88     	; 0xe5c <fputc+0x6e>
 e04:	22 ff       	sbrs	r18, 2
 e06:	16 c0       	rjmp	.+44     	; 0xe34 <fputc+0x46>
 e08:	46 81       	ldd	r20, Z+6	; 0x06
 e0a:	57 81       	ldd	r21, Z+7	; 0x07
 e0c:	24 81       	ldd	r18, Z+4	; 0x04
 e0e:	35 81       	ldd	r19, Z+5	; 0x05
 e10:	42 17       	cp	r20, r18
 e12:	53 07       	cpc	r21, r19
 e14:	44 f4       	brge	.+16     	; 0xe26 <fputc+0x38>
 e16:	a0 81       	ld	r26, Z
 e18:	b1 81       	ldd	r27, Z+1	; 0x01
 e1a:	9d 01       	movw	r18, r26
 e1c:	2f 5f       	subi	r18, 0xFF	; 255
 e1e:	3f 4f       	sbci	r19, 0xFF	; 255
 e20:	31 83       	std	Z+1, r19	; 0x01
 e22:	20 83       	st	Z, r18
 e24:	8c 93       	st	X, r24
 e26:	26 81       	ldd	r18, Z+6	; 0x06
 e28:	37 81       	ldd	r19, Z+7	; 0x07
 e2a:	2f 5f       	subi	r18, 0xFF	; 255
 e2c:	3f 4f       	sbci	r19, 0xFF	; 255
 e2e:	37 83       	std	Z+7, r19	; 0x07
 e30:	26 83       	std	Z+6, r18	; 0x06
 e32:	14 c0       	rjmp	.+40     	; 0xe5c <fputc+0x6e>
 e34:	8b 01       	movw	r16, r22
 e36:	ec 01       	movw	r28, r24
 e38:	fb 01       	movw	r30, r22
 e3a:	00 84       	ldd	r0, Z+8	; 0x08
 e3c:	f1 85       	ldd	r31, Z+9	; 0x09
 e3e:	e0 2d       	mov	r30, r0
 e40:	09 95       	icall
 e42:	89 2b       	or	r24, r25
 e44:	e1 f6       	brne	.-72     	; 0xdfe <fputc+0x10>
 e46:	d8 01       	movw	r26, r16
 e48:	16 96       	adiw	r26, 0x06	; 6
 e4a:	8d 91       	ld	r24, X+
 e4c:	9c 91       	ld	r25, X
 e4e:	17 97       	sbiw	r26, 0x07	; 7
 e50:	01 96       	adiw	r24, 0x01	; 1
 e52:	17 96       	adiw	r26, 0x07	; 7
 e54:	9c 93       	st	X, r25
 e56:	8e 93       	st	-X, r24
 e58:	16 97       	sbiw	r26, 0x06	; 6
 e5a:	ce 01       	movw	r24, r28
 e5c:	df 91       	pop	r29
 e5e:	cf 91       	pop	r28
 e60:	1f 91       	pop	r17
 e62:	0f 91       	pop	r16
 e64:	08 95       	ret

00000e66 <__ultoa_invert>:
 e66:	fa 01       	movw	r30, r20
 e68:	aa 27       	eor	r26, r26
 e6a:	28 30       	cpi	r18, 0x08	; 8
 e6c:	51 f1       	breq	.+84     	; 0xec2 <__ultoa_invert+0x5c>
 e6e:	20 31       	cpi	r18, 0x10	; 16
 e70:	81 f1       	breq	.+96     	; 0xed2 <__ultoa_invert+0x6c>
 e72:	e8 94       	clt
 e74:	6f 93       	push	r22
 e76:	6e 7f       	andi	r22, 0xFE	; 254
 e78:	6e 5f       	subi	r22, 0xFE	; 254
 e7a:	7f 4f       	sbci	r23, 0xFF	; 255
 e7c:	8f 4f       	sbci	r24, 0xFF	; 255
 e7e:	9f 4f       	sbci	r25, 0xFF	; 255
 e80:	af 4f       	sbci	r26, 0xFF	; 255
 e82:	b1 e0       	ldi	r27, 0x01	; 1
 e84:	3e d0       	rcall	.+124    	; 0xf02 <__ultoa_invert+0x9c>
 e86:	b4 e0       	ldi	r27, 0x04	; 4
 e88:	3c d0       	rcall	.+120    	; 0xf02 <__ultoa_invert+0x9c>
 e8a:	67 0f       	add	r22, r23
 e8c:	78 1f       	adc	r23, r24
 e8e:	89 1f       	adc	r24, r25
 e90:	9a 1f       	adc	r25, r26
 e92:	a1 1d       	adc	r26, r1
 e94:	68 0f       	add	r22, r24
 e96:	79 1f       	adc	r23, r25
 e98:	8a 1f       	adc	r24, r26
 e9a:	91 1d       	adc	r25, r1
 e9c:	a1 1d       	adc	r26, r1
 e9e:	6a 0f       	add	r22, r26
 ea0:	71 1d       	adc	r23, r1
 ea2:	81 1d       	adc	r24, r1
 ea4:	91 1d       	adc	r25, r1
 ea6:	a1 1d       	adc	r26, r1
 ea8:	20 d0       	rcall	.+64     	; 0xeea <__ultoa_invert+0x84>
 eaa:	09 f4       	brne	.+2      	; 0xeae <__ultoa_invert+0x48>
 eac:	68 94       	set
 eae:	3f 91       	pop	r19
 eb0:	2a e0       	ldi	r18, 0x0A	; 10
 eb2:	26 9f       	mul	r18, r22
 eb4:	11 24       	eor	r1, r1
 eb6:	30 19       	sub	r19, r0
 eb8:	30 5d       	subi	r19, 0xD0	; 208
 eba:	31 93       	st	Z+, r19
 ebc:	de f6       	brtc	.-74     	; 0xe74 <__ultoa_invert+0xe>
 ebe:	cf 01       	movw	r24, r30
 ec0:	08 95       	ret
 ec2:	46 2f       	mov	r20, r22
 ec4:	47 70       	andi	r20, 0x07	; 7
 ec6:	40 5d       	subi	r20, 0xD0	; 208
 ec8:	41 93       	st	Z+, r20
 eca:	b3 e0       	ldi	r27, 0x03	; 3
 ecc:	0f d0       	rcall	.+30     	; 0xeec <__ultoa_invert+0x86>
 ece:	c9 f7       	brne	.-14     	; 0xec2 <__ultoa_invert+0x5c>
 ed0:	f6 cf       	rjmp	.-20     	; 0xebe <__ultoa_invert+0x58>
 ed2:	46 2f       	mov	r20, r22
 ed4:	4f 70       	andi	r20, 0x0F	; 15
 ed6:	40 5d       	subi	r20, 0xD0	; 208
 ed8:	4a 33       	cpi	r20, 0x3A	; 58
 eda:	18 f0       	brcs	.+6      	; 0xee2 <__ultoa_invert+0x7c>
 edc:	49 5d       	subi	r20, 0xD9	; 217
 ede:	31 fd       	sbrc	r19, 1
 ee0:	40 52       	subi	r20, 0x20	; 32
 ee2:	41 93       	st	Z+, r20
 ee4:	02 d0       	rcall	.+4      	; 0xeea <__ultoa_invert+0x84>
 ee6:	a9 f7       	brne	.-22     	; 0xed2 <__ultoa_invert+0x6c>
 ee8:	ea cf       	rjmp	.-44     	; 0xebe <__ultoa_invert+0x58>
 eea:	b4 e0       	ldi	r27, 0x04	; 4
 eec:	a6 95       	lsr	r26
 eee:	97 95       	ror	r25
 ef0:	87 95       	ror	r24
 ef2:	77 95       	ror	r23
 ef4:	67 95       	ror	r22
 ef6:	ba 95       	dec	r27
 ef8:	c9 f7       	brne	.-14     	; 0xeec <__ultoa_invert+0x86>
 efa:	00 97       	sbiw	r24, 0x00	; 0
 efc:	61 05       	cpc	r22, r1
 efe:	71 05       	cpc	r23, r1
 f00:	08 95       	ret
 f02:	9b 01       	movw	r18, r22
 f04:	ac 01       	movw	r20, r24
 f06:	0a 2e       	mov	r0, r26
 f08:	06 94       	lsr	r0
 f0a:	57 95       	ror	r21
 f0c:	47 95       	ror	r20
 f0e:	37 95       	ror	r19
 f10:	27 95       	ror	r18
 f12:	ba 95       	dec	r27
 f14:	c9 f7       	brne	.-14     	; 0xf08 <__ultoa_invert+0xa2>
 f16:	62 0f       	add	r22, r18
 f18:	73 1f       	adc	r23, r19
 f1a:	84 1f       	adc	r24, r20
 f1c:	95 1f       	adc	r25, r21
 f1e:	a0 1d       	adc	r26, r0
 f20:	08 95       	ret

00000f22 <__prologue_saves__>:
 f22:	2f 92       	push	r2
 f24:	3f 92       	push	r3
 f26:	4f 92       	push	r4
 f28:	5f 92       	push	r5
 f2a:	6f 92       	push	r6
 f2c:	7f 92       	push	r7
 f2e:	8f 92       	push	r8
 f30:	9f 92       	push	r9
 f32:	af 92       	push	r10
 f34:	bf 92       	push	r11
 f36:	cf 92       	push	r12
 f38:	df 92       	push	r13
 f3a:	ef 92       	push	r14
 f3c:	ff 92       	push	r15
 f3e:	0f 93       	push	r16
 f40:	1f 93       	push	r17
 f42:	cf 93       	push	r28
 f44:	df 93       	push	r29
 f46:	cd b7       	in	r28, 0x3d	; 61
 f48:	de b7       	in	r29, 0x3e	; 62
 f4a:	ca 1b       	sub	r28, r26
 f4c:	db 0b       	sbc	r29, r27
 f4e:	0f b6       	in	r0, 0x3f	; 63
 f50:	f8 94       	cli
 f52:	de bf       	out	0x3e, r29	; 62
 f54:	0f be       	out	0x3f, r0	; 63
 f56:	cd bf       	out	0x3d, r28	; 61
 f58:	09 94       	ijmp

00000f5a <__epilogue_restores__>:
 f5a:	2a 88       	ldd	r2, Y+18	; 0x12
 f5c:	39 88       	ldd	r3, Y+17	; 0x11
 f5e:	48 88       	ldd	r4, Y+16	; 0x10
 f60:	5f 84       	ldd	r5, Y+15	; 0x0f
 f62:	6e 84       	ldd	r6, Y+14	; 0x0e
 f64:	7d 84       	ldd	r7, Y+13	; 0x0d
 f66:	8c 84       	ldd	r8, Y+12	; 0x0c
 f68:	9b 84       	ldd	r9, Y+11	; 0x0b
 f6a:	aa 84       	ldd	r10, Y+10	; 0x0a
 f6c:	b9 84       	ldd	r11, Y+9	; 0x09
 f6e:	c8 84       	ldd	r12, Y+8	; 0x08
 f70:	df 80       	ldd	r13, Y+7	; 0x07
 f72:	ee 80       	ldd	r14, Y+6	; 0x06
 f74:	fd 80       	ldd	r15, Y+5	; 0x05
 f76:	0c 81       	ldd	r16, Y+4	; 0x04
 f78:	1b 81       	ldd	r17, Y+3	; 0x03
 f7a:	aa 81       	ldd	r26, Y+2	; 0x02
 f7c:	b9 81       	ldd	r27, Y+1	; 0x01
 f7e:	ce 0f       	add	r28, r30
 f80:	d1 1d       	adc	r29, r1
 f82:	0f b6       	in	r0, 0x3f	; 63
 f84:	f8 94       	cli
 f86:	de bf       	out	0x3e, r29	; 62
 f88:	0f be       	out	0x3f, r0	; 63
 f8a:	cd bf       	out	0x3d, r28	; 61
 f8c:	ed 01       	movw	r28, r26
 f8e:	08 95       	ret

00000f90 <_exit>:
 f90:	f8 94       	cli

00000f92 <__stop_program>:
 f92:	ff cf       	rjmp	.-2      	; 0xf92 <__stop_program>
