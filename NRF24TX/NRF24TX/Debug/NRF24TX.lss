
NRF24TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000f74  00001008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  00800066  00800066  0000100e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000100e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a73  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b7  00000000  00000000  00002c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d76  00000000  00000000  0000360a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00004380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a9  00000000  00000000  00004650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e74  00000000  00000000  00004bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005a6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	03 c1       	rjmp	.+518    	; 0x20c <__vector_2>
   6:	e0 c0       	rjmp	.+448    	; 0x1c8 <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	24 c1       	rjmp	.+584    	; 0x256 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e7       	ldi	r30, 0x74	; 116
  3a:	ff e0       	ldi	r31, 0x0F	; 15
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 3a       	cpi	r26, 0xAA	; 170
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	a7 d1       	rcall	.+846    	; 0x3a8 <main>
  5a:	8a c7       	rjmp	.+3860   	; 0xf70 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <ADC_Init>:
int count = 0;

//—————————————-
void ADC_Init(void)
{
   ADCSRA |= (1<<ADEN);//вкл АЦП
  5e:	86 b1       	in	r24, 0x06	; 6
  60:	80 68       	ori	r24, 0x80	; 128
  62:	86 b9       	out	0x06, r24	; 6
   ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//устанвоили 64кГЦ
  64:	86 b1       	in	r24, 0x06	; 6
  66:	87 60       	ori	r24, 0x07	; 7
  68:	86 b9       	out	0x06, r24	; 6
  6a:	08 95       	ret

0000006c <ADC_convert>:
  //включаем канал АЦП ADC0 для измерения напр аккумулятора
}
//—————————————-
void ADC_convert (void)
{
	ADCSRA |= (1<<ADSC);//начало измерений
  6c:	86 b1       	in	r24, 0x06	; 6
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADSC)));
  72:	36 99       	sbic	0x06, 6	; 6
  74:	fe cf       	rjmp	.-4      	; 0x72 <ADC_convert+0x6>
	if (count == 0)
  76:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  7a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  7e:	89 2b       	or	r24, r25
  80:	99 f4       	brne	.+38     	; 0xa8 <ADC_convert+0x3c>
	{
		//выключаем канал АЦП для измерения напр аккумулятора
		ADMUX |= (1<<MUX0);//включаем канал АЦП для измерения кол-ва дождя
  82:	87 b1       	in	r24, 0x07	; 7
  84:	81 60       	ori	r24, 0x01	; 1
  86:	87 b9       	out	0x07, r24	; 7
		count++;
  88:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  8c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
  96:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
		adc_value1 = ADC;
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	95 b1       	in	r25, 0x05	; 5
  9e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <adc_value1+0x1>
  a2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <adc_value1>
  a6:	08 95       	ret
	}
	else
	{
		ADMUX &= ~(1<<MUX0);//выключаем канал АЦП для измерения кол-ва дождя
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	87 b9       	out	0x07, r24	; 7
		//включаем канал АЦП для измерения напр аккумулятора
		count--;
  ae:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  b2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
  bc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
		adc_value2 = ADC;
  c0:	84 b1       	in	r24, 0x04	; 4
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <adc_value2+0x1>
  c8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <adc_value2>
  cc:	08 95       	ret

000000ce <dht22_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	83 ed       	ldi	r24, 0xD3	; 211
  d2:	90 e3       	ldi	r25, 0x30	; 48
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <dht22_init+0x6>
  dc:	00 c0       	rjmp	.+0      	; 0xde <dht22_init+0x10>
  de:	00 00       	nop
#include "DHT22.h"

uint8_t dht22_init (void)
{
	_delay_ms(2000);
	DDRD |= (1<<DHT22_PORT);   // set as output
  e0:	81 b3       	in	r24, 0x11	; 17
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<DHT22_PORT);// pull the pin high
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	82 bb       	out	0x12, r24	; 18

	return 0;
}
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret

000000f0 <dht22_GetData>:
uint8_t dht22_GetData (uint8_t *data)
{
  f0:	bc 01       	movw	r22, r24
	uint8_t i, j = 0;
	DDRD |= (1<<DHT22_PORT);   // set as output
  f2:	81 b3       	in	r24, 0x11	; 17
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	81 bb       	out	0x11, r24	; 17
	//reset ports
	PORTD &= ~(1<<DHT22_PORT);// pull the pin low
  f8:	82 b3       	in	r24, 0x12	; 18
  fa:	8f 77       	andi	r24, 0x7F	; 127
  fc:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<DHT22_PORT);// pull the pin high
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	80 68       	ori	r24, 0x80	; 128
 102:	82 bb       	out	0x12, r24	; 18
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	80 e7       	ldi	r24, 0x70	; 112
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <dht22_GetData+0x1a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <dht22_GetData+0x24>
 114:	00 00       	nop
	_delay_ms(100);
	//start
	PORTD &= ~(1<<DHT22_PORT);// pull the pin low
 116:	82 b3       	in	r24, 0x12	; 18
 118:	8f 77       	andi	r24, 0x7F	; 127
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	8f e9       	ldi	r24, 0x9F	; 159
 11e:	9c e8       	ldi	r25, 0x8C	; 140
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <dht22_GetData+0x30>
 124:	00 c0       	rjmp	.+0      	; 0x126 <dht22_GetData+0x36>
 126:	00 00       	nop
	_delay_ms(18);
	PORTD |= (1<<DHT22_PORT);// pull the pin high
 128:	82 b3       	in	r24, 0x12	; 18
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	82 bb       	out	0x12, r24	; 18
	//ждем ответа датчика
	DDRD &= ~(1<<DHT22_PORT);   // set as input
 12e:	91 b3       	in	r25, 0x11	; 17
 130:	9f 77       	andi	r25, 0x7F	; 127
 132:	91 bb       	out	0x11, r25	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	90 ea       	ldi	r25, 0xA0	; 160
 136:	9a 95       	dec	r25
 138:	f1 f7       	brne	.-4      	; 0x136 <dht22_GetData+0x46>
	_delay_us(60);//экспериментом выявлено 60 а не 40 сек
	//если датчик не ответил притягиванием шины, то ошибка
	if (PIND & (1 << DHT22_PORT))
 13a:	87 99       	sbic	0x10, 7	; 16
 13c:	35 c0       	rjmp	.+106    	; 0x1a8 <dht22_GetData+0xb8>
 13e:	25 ed       	ldi	r18, 0xD5	; 213
 140:	2a 95       	dec	r18
 142:	f1 f7       	brne	.-4      	; 0x140 <dht22_GetData+0x50>
 144:	00 00       	nop
	{
		return 0;
	}
	_delay_us(80);
	//если датчик не отпустил шину, то ошибка
	if (!(PIND & (1 << DHT22_PORT)))
 146:	87 9b       	sbis	0x10, 7	; 16
 148:	31 c0       	rjmp	.+98     	; 0x1ac <dht22_GetData+0xbc>
 14a:	85 ed       	ldi	r24, 0xD5	; 213
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <dht22_GetData+0x5c>
 150:	00 00       	nop
	}
	_delay_us(80);
	//читаем данные (записываем байты в массив наоборот,
	//т.к. сначала передается старший, чтобы потом
	//не переворачивать двухбайтовый результат
	for (j=0; j<5; j++)
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	25 c0       	rjmp	.+74     	; 0x1a0 <dht22_GetData+0xb0>
	{
		data[4-j] = 0;
 156:	e4 e0       	ldi	r30, 0x04	; 4
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	e8 1b       	sub	r30, r24
 15c:	f1 09       	sbc	r31, r1
 15e:	e6 0f       	add	r30, r22
 160:	f7 1f       	adc	r31, r23
 162:	10 82       	st	Z, r1
		for (i = 0; i<8; i++)
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	19 c0       	rjmp	.+50     	; 0x19a <dht22_GetData+0xaa>
		{
			while(!(PIND & (1 << DHT22_PORT)));//ждем отпускания шины
 168:	87 9b       	sbis	0x10, 7	; 16
 16a:	fe cf       	rjmp	.-4      	; 0x168 <dht22_GetData+0x78>
 16c:	2d e5       	ldi	r18, 0x5D	; 93
 16e:	2a 95       	dec	r18
 170:	f1 f7       	brne	.-4      	; 0x16e <dht22_GetData+0x7e>
 172:	00 00       	nop
			_delay_us(35);
			if (PIND & (1 << DHT22_PORT))//читаем результат по прошествии 30 микросекунд
 174:	87 9b       	sbis	0x10, 7	; 16
 176:	0e c0       	rjmp	.+28     	; 0x194 <dht22_GetData+0xa4>
			//если шина за это время не притянулась к земле, то значит это единица, иначе ноль
			data[4-j] |= (1<<(7-i));
 178:	47 e0       	ldi	r20, 0x07	; 7
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	49 1b       	sub	r20, r25
 17e:	51 09       	sbc	r21, r1
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <dht22_GetData+0x9a>
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	4a 95       	dec	r20
 18c:	e2 f7       	brpl	.-8      	; 0x186 <dht22_GetData+0x96>
 18e:	30 81       	ld	r19, Z
 190:	23 2b       	or	r18, r19
 192:	20 83       	st	Z, r18
			while(PIND & (1 << DHT22_PORT));//ждем пока датчик притянет шину(в случае единицы)
 194:	87 99       	sbic	0x10, 7	; 16
 196:	fe cf       	rjmp	.-4      	; 0x194 <dht22_GetData+0xa4>
	//т.к. сначала передается старший, чтобы потом
	//не переворачивать двухбайтовый результат
	for (j=0; j<5; j++)
	{
		data[4-j] = 0;
		for (i = 0; i<8; i++)
 198:	9f 5f       	subi	r25, 0xFF	; 255
 19a:	98 30       	cpi	r25, 0x08	; 8
 19c:	28 f3       	brcs	.-54     	; 0x168 <dht22_GetData+0x78>
	}
	_delay_us(80);
	//читаем данные (записываем байты в массив наоборот,
	//т.к. сначала передается старший, чтобы потом
	//не переворачивать двухбайтовый результат
	for (j=0; j<5; j++)
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	85 30       	cpi	r24, 0x05	; 5
 1a2:	c8 f2       	brcs	.-78     	; 0x156 <dht22_GetData+0x66>
			//если шина за это время не притянулась к земле, то значит это единица, иначе ноль
			data[4-j] |= (1<<(7-i));
			while(PIND & (1 << DHT22_PORT));//ждем пока датчик притянет шину(в случае единицы)
		}
	}
	return 1;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 95       	ret
	DDRD &= ~(1<<DHT22_PORT);   // set as input
	_delay_us(60);//экспериментом выявлено 60 а не 40 сек
	//если датчик не ответил притягиванием шины, то ошибка
	if (PIND & (1 << DHT22_PORT))
	{
		return 0;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	08 95       	ret
	}
	_delay_us(80);
	//если датчик не отпустил шину, то ошибка
	if (!(PIND & (1 << DHT22_PORT)))
	{
		return 0;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
			data[4-j] |= (1<<(7-i));
			while(PIND & (1 << DHT22_PORT));//ждем пока датчик притянет шину(в случае единицы)
		}
	}
	return 1;
 1ae:	08 95       	ret

000001b0 <timer2_ini>:
int INTER_COUNT;

unsigned int TIM2_COUNT = 0;
void timer2_ini(void)//период 0.008с
{
	TCCR2 |= (1<<WGM21); // устанавливаем режим СТС (сброс по совпадению)
 1b0:	85 b5       	in	r24, 0x25	; 37
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0b11111010; //записываем в регистр число для сравнения 250
 1b6:	8a ef       	ldi	r24, 0xFA	; 250
 1b8:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= ((1<<CS21)|(1<<CS22));//установим делитель 256.
 1ba:	85 b5       	in	r24, 0x25	; 37
 1bc:	86 60       	ori	r24, 0x06	; 6
 1be:	85 bd       	out	0x25, r24	; 37
    TIMSK |= (1<<OCIE2); //устанавливаем бит разрешения прерывания 2ого счетчика по совпадению с OCR2	
 1c0:	89 b7       	in	r24, 0x39	; 57
 1c2:	80 68       	ori	r24, 0x80	; 128
 1c4:	89 bf       	out	0x39, r24	; 57
 1c6:	08 95       	ret

000001c8 <__vector_3>:
}
//——————————————–
ISR(TIMER2_COMP_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
  if (TIM2_COUNT == 39750) TIM2_COUNT = 0;
 1d8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TIM2_COUNT>
 1dc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <TIM2_COUNT+0x1>
 1e0:	86 34       	cpi	r24, 0x46	; 70
 1e2:	2b e9       	ldi	r18, 0x9B	; 155
 1e4:	92 07       	cpc	r25, r18
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <__vector_3+0x2a>
 1e8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <TIM2_COUNT+0x1>
 1ec:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <TIM2_COUNT>
 1f0:	05 c0       	rjmp	.+10     	; 0x1fc <__vector_3+0x34>
  else TIM2_COUNT++;
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <TIM2_COUNT+0x1>
 1f8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <TIM2_COUNT>
}
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <__vector_2>:
ISR(INT1_vect)
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
	hall_counter++;
 21a:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <hall_counter>
 21e:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <hall_counter+0x1>
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <hall_counter+0x1>
 228:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <hall_counter>
}
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <timer_ini>:
void timer_ini(void)//период 2сек
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
 23a:	8e b5       	in	r24, 0x2e	; 46
 23c:	88 60       	ori	r24, 0x08	; 8
 23e:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
 240:	89 b7       	in	r24, 0x39	; 57
 242:	80 61       	ori	r24, 0x10	; 16
 244:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00111101; //записываем в регистр число для сравнения
 246:	8d e3       	ldi	r24, 0x3D	; 61
 248:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b00001001;
 24a:	89 e0       	ldi	r24, 0x09	; 9
 24c:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS12)|(1<<CS10);//установим делитель 1024.
 24e:	8e b5       	in	r24, 0x2e	; 46
 250:	85 60       	ori	r24, 0x05	; 5
 252:	8e bd       	out	0x2e, r24	; 46
 254:	08 95       	ret

00000256 <__vector_6>:
}
ISR (TIMER1_COMPA_vect)
{
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
   speed = hall_counter;
 264:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <hall_counter>
 268:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <hall_counter+0x1>
 26c:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <speed+0x1>
 270:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <speed>
   hall_counter = 0;
 274:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <hall_counter+0x1>
 278:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <hall_counter>
}
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <SPI_init>:
SPI_init(void) //инициализация SPI
{
	DDRB |= ((1<<SS)|(1<<MOSI)|(1<<CE)|(1<<SCK)); //ножки SPI на выход
 28a:	87 b3       	in	r24, 0x17	; 23
 28c:	8e 62       	ori	r24, 0x2E	; 46
 28e:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<SS)|(1<<MOSI)|(1<<SCK)); //низкий уровень
 290:	88 b3       	in	r24, 0x18	; 24
 292:	83 7d       	andi	r24, 0xD3	; 211
 294:	88 bb       	out	0x18, r24	; 24
	DDRD |= (1<<IRQ);//IRQ на выход, в передатчике он не используется
 296:	81 b3       	in	r24, 0x11	; 17
 298:	84 60       	ori	r24, 0x04	; 4
 29a:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<IRQ);
 29c:	82 b3       	in	r24, 0x12	; 18
 29e:	8b 7f       	andi	r24, 0xFB	; 251
 2a0:	82 bb       	out	0x12, r24	; 18
	HIGH_CSN;
 2a2:	88 b3       	in	r24, 0x18	; 24
 2a4:	84 60       	ori	r24, 0x04	; 4
 2a6:	88 bb       	out	0x18, r24	; 24
	SPCR = ((1<<SPE)|(1<<MSTR));//включим шину, объявим ведущим
 2a8:	80 e5       	ldi	r24, 0x50	; 80
 2aa:	8d b9       	out	0x0d, r24	; 13
}
 2ac:	08 95       	ret

000002ae <port_init>:
//-------------------------------------------------------------
port_init(void)
{
	//датчик Холла для анемометра
	DDRD &= ~(1<<PORTD3);//hall-sensor - на вход
 2ae:	81 b3       	in	r24, 0x11	; 17
 2b0:	87 7f       	andi	r24, 0xF7	; 247
 2b2:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<PORTD3);
 2b4:	82 b3       	in	r24, 0x12	; 18
 2b6:	87 7f       	andi	r24, 0xF7	; 247
 2b8:	82 bb       	out	0x12, r24	; 18
	//управление транзистором
	DDRD |= (1<<TRANZISTOR);
 2ba:	81 b3       	in	r24, 0x11	; 17
 2bc:	80 62       	ori	r24, 0x20	; 32
 2be:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<TRANZISTOR);
 2c0:	82 b3       	in	r24, 0x12	; 18
 2c2:	8f 7d       	andi	r24, 0xDF	; 223
 2c4:	82 bb       	out	0x12, r24	; 18
	//герконы для флюгера
	DDRB &= ~(1<<GERKON1);//gerkon - на вход
 2c6:	87 b3       	in	r24, 0x17	; 23
 2c8:	8e 7f       	andi	r24, 0xFE	; 254
 2ca:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<GERKON1);
 2cc:	88 b3       	in	r24, 0x18	; 24
 2ce:	8e 7f       	andi	r24, 0xFE	; 254
 2d0:	88 bb       	out	0x18, r24	; 24
	DDRD &= ~((1<<GERKON2)|(1<<GERKON3)|(1<<GERKON4));
 2d2:	81 b3       	in	r24, 0x11	; 17
 2d4:	8c 7e       	andi	r24, 0xEC	; 236
 2d6:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~((1<<GERKON2)|(1<<GERKON3)|(1<<GERKON4));
 2d8:	82 b3       	in	r24, 0x12	; 18
 2da:	8c 7e       	andi	r24, 0xEC	; 236
 2dc:	82 bb       	out	0x12, r24	; 18
	DDRC &= ~((1<<GERKON5)|(1<<GERKON6)|(1<<GERKON7)|(1<<GERKON8));
 2de:	84 b3       	in	r24, 0x14	; 20
 2e0:	83 7c       	andi	r24, 0xC3	; 195
 2e2:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<GERKON5)|(1<<GERKON6)|(1<<GERKON7)|(1<<GERKON8));
 2e4:	85 b3       	in	r24, 0x15	; 21
 2e6:	83 7c       	andi	r24, 0xC3	; 195
 2e8:	85 bb       	out	0x15, r24	; 21
	//светодиод 
	DDRD |= (1<<LED);
 2ea:	81 b3       	in	r24, 0x11	; 17
 2ec:	80 64       	ori	r24, 0x40	; 64
 2ee:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED);
 2f0:	82 b3       	in	r24, 0x12	; 18
 2f2:	8f 7b       	andi	r24, 0xBF	; 191
 2f4:	82 bb       	out	0x12, r24	; 18
}
 2f6:	08 95       	ret

000002f8 <spi_send_recv>:
//-------------------------------------------------------------
uint8_t spi_send_recv(uint8_t data) // Передаёт и принимает 1 байт по SPI, возвращает полученное значение
{
	SPDR = data;
 2f8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
 2fa:	77 9b       	sbis	0x0e, 7	; 14
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <spi_send_recv+0x2>
	return SPDR;
 2fe:	8f b1       	in	r24, 0x0f	; 15
}
 300:	08 95       	ret

00000302 <WIND_DIRECT>:
char* WIND_DIRECT()
{
	if((PINB&(1<<GERKON1)) == 0)
 302:	b0 99       	sbic	0x16, 0	; 22
 304:	06 c0       	rjmp	.+12     	; 0x312 <WIND_DIRECT+0x10>
	{
		sprintf (wind_direction_str,"S");
 306:	83 e5       	ldi	r24, 0x53	; 83
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <wind_direction_str+0x1>
 30e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <wind_direction_str>
	}
    if ((PIND&(1<<GERKON2)) == 0)
 312:	80 99       	sbic	0x10, 0	; 16
 314:	0a c0       	rjmp	.+20     	; 0x32a <WIND_DIRECT+0x28>
	{
		sprintf (wind_direction_str,"S-W");
 316:	e2 e8       	ldi	r30, 0x82	; 130
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	83 e5       	ldi	r24, 0x53	; 83
 31c:	9d e2       	ldi	r25, 0x2D	; 45
 31e:	91 83       	std	Z+1, r25	; 0x01
 320:	80 83       	st	Z, r24
 322:	87 e5       	ldi	r24, 0x57	; 87
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	93 83       	std	Z+3, r25	; 0x03
 328:	82 83       	std	Z+2, r24	; 0x02
	}
    if ((PIND&(1<<GERKON3)) == 0)
 32a:	81 99       	sbic	0x10, 1	; 16
 32c:	06 c0       	rjmp	.+12     	; 0x33a <WIND_DIRECT+0x38>
	{
		sprintf (wind_direction_str,"W");
 32e:	87 e5       	ldi	r24, 0x57	; 87
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <wind_direction_str+0x1>
 336:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <wind_direction_str>
	}
    if ((PIND&(1<<GERKON4)) == 0)
 33a:	84 99       	sbic	0x10, 4	; 16
 33c:	0a c0       	rjmp	.+20     	; 0x352 <WIND_DIRECT+0x50>
	{
		sprintf (wind_direction_str,"N-W");
 33e:	e2 e8       	ldi	r30, 0x82	; 130
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	8e e4       	ldi	r24, 0x4E	; 78
 344:	9d e2       	ldi	r25, 0x2D	; 45
 346:	91 83       	std	Z+1, r25	; 0x01
 348:	80 83       	st	Z, r24
 34a:	87 e5       	ldi	r24, 0x57	; 87
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	93 83       	std	Z+3, r25	; 0x03
 350:	82 83       	std	Z+2, r24	; 0x02
	}
    if ((PINC&(1<<GERKON5)) == 0)
 352:	9c 99       	sbic	0x13, 4	; 19
 354:	06 c0       	rjmp	.+12     	; 0x362 <WIND_DIRECT+0x60>
	{
		sprintf (wind_direction_str,"N");
 356:	8e e4       	ldi	r24, 0x4E	; 78
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <wind_direction_str+0x1>
 35e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <wind_direction_str>
	}
    if ((PINC&(1<<GERKON6)) == 0)
 362:	9d 99       	sbic	0x13, 5	; 19
 364:	0a c0       	rjmp	.+20     	; 0x37a <WIND_DIRECT+0x78>
	{
		sprintf (wind_direction_str,"N-E");
 366:	e2 e8       	ldi	r30, 0x82	; 130
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	8e e4       	ldi	r24, 0x4E	; 78
 36c:	9d e2       	ldi	r25, 0x2D	; 45
 36e:	91 83       	std	Z+1, r25	; 0x01
 370:	80 83       	st	Z, r24
 372:	85 e4       	ldi	r24, 0x45	; 69
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	93 83       	std	Z+3, r25	; 0x03
 378:	82 83       	std	Z+2, r24	; 0x02
	}
    if ((PINC&(1<<GERKON7)) == 0)
 37a:	9a 99       	sbic	0x13, 2	; 19
 37c:	06 c0       	rjmp	.+12     	; 0x38a <WIND_DIRECT+0x88>
	{
		sprintf (wind_direction_str,"E");
 37e:	85 e4       	ldi	r24, 0x45	; 69
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <wind_direction_str+0x1>
 386:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <wind_direction_str>
	}
    if ((PINC&(1<<GERKON8)) == 0)
 38a:	9b 99       	sbic	0x13, 3	; 19
 38c:	0a c0       	rjmp	.+20     	; 0x3a2 <WIND_DIRECT+0xa0>
	{
		sprintf (wind_direction_str,"S-E");
 38e:	e2 e8       	ldi	r30, 0x82	; 130
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	83 e5       	ldi	r24, 0x53	; 83
 394:	9d e2       	ldi	r25, 0x2D	; 45
 396:	91 83       	std	Z+1, r25	; 0x01
 398:	80 83       	st	Z, r24
 39a:	85 e4       	ldi	r24, 0x45	; 69
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	93 83       	std	Z+3, r25	; 0x03
 3a0:	82 83       	std	Z+2, r24	; 0x02
	}
	return wind_direction_str;
}
 3a2:	82 e8       	ldi	r24, 0x82	; 130
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	08 95       	ret

000003a8 <main>:

int main(void)
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <main+0x6>
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <main+0x8>
 3b0:	1f 92       	push	r1
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
	int k = 0;
	uint8_t data[5] = {0};
 3b6:	fe 01       	movw	r30, r28
 3b8:	31 96       	adiw	r30, 0x01	; 1
 3ba:	85 e0       	ldi	r24, 0x05	; 5
 3bc:	df 01       	movw	r26, r30
 3be:	1d 92       	st	X+, r1
 3c0:	8a 95       	dec	r24
 3c2:	e9 f7       	brne	.-6      	; 0x3be <main+0x16>
	port_init();
 3c4:	74 df       	rcall	.-280    	; 0x2ae <port_init>
	PORTD |= (1<<LED);
 3c6:	82 b3       	in	r24, 0x12	; 18
 3c8:	80 64       	ori	r24, 0x40	; 64
 3ca:	82 bb       	out	0x12, r24	; 18
    SPI_init();
 3cc:	5e df       	rcall	.-324    	; 0x28a <SPI_init>
	ADC_Init();//Инициализация АЦП
 3ce:	47 de       	rcall	.-882    	; 0x5e <ADC_Init>
	//USART_Init(16);
    NRF24_ini();
 3d0:	6a d2       	rcall	.+1236   	; 0x8a6 <NRF24_ini>
	// настраиваем параметры прерывания
	//----------------------
	MCUCR = (1<<ISC11) ;
 3d2:	88 e0       	ldi	r24, 0x08	; 8
 3d4:	85 bf       	out	0x35, r24	; 53
	GICR = (1<<INT1);
 3d6:	80 e8       	ldi	r24, 0x80	; 128
 3d8:	8b bf       	out	0x3b, r24	; 59
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3da:	bf ef       	ldi	r27, 0xFF	; 255
 3dc:	e9 e6       	ldi	r30, 0x69	; 105
 3de:	f8 e1       	ldi	r31, 0x18	; 24
 3e0:	b1 50       	subi	r27, 0x01	; 1
 3e2:	e0 40       	sbci	r30, 0x00	; 0
 3e4:	f0 40       	sbci	r31, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <main+0x38>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <main+0x42>
 3ea:	00 00       	nop
	//----------------------
	_delay_ms(1000);
	PORTD &= ~(1<<LED);
 3ec:	82 b3       	in	r24, 0x12	; 18
 3ee:	8f 7b       	andi	r24, 0xBF	; 191
 3f0:	82 bb       	out	0x12, r24	; 18
	dht22_init();	
 3f2:	6d de       	rcall	.-806    	; 0xce <dht22_init>
	WDTCR &= ~(1<<WDE);//откл WDT
 3f4:	81 b5       	in	r24, 0x21	; 33
 3f6:	87 7f       	andi	r24, 0xF7	; 247
 3f8:	81 bd       	out	0x21, r24	; 33
	ACSR |= (1<<ACD);//откл компаратор
 3fa:	88 b1       	in	r24, 0x08	; 8
 3fc:	80 68       	ori	r24, 0x80	; 128
 3fe:	88 b9       	out	0x08, r24	; 8
    //INTER_COUNT == 0;
	timer_ini();
 400:	1c df       	rcall	.-456    	; 0x23a <timer_ini>
	timer2_ini();
 402:	d6 de       	rcall	.-596    	; 0x1b0 <timer2_ini>
	sei();
 404:	78 94       	sei
	
    while (1) 
    {
		if (TIM2_COUNT == 0)
 406:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TIM2_COUNT>
 40a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <TIM2_COUNT+0x1>
 40e:	89 2b       	or	r24, r25
 410:	d1 f7       	brne	.-12     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
		{
			DDRD &= ~(1<<PORTD3);//датчик холла на вход
 412:	81 b3       	in	r24, 0x11	; 17
 414:	87 7f       	andi	r24, 0xF7	; 247
 416:	81 bb       	out	0x11, r24	; 17
			PORTD &= ~(1<<TRANZISTOR);//включаем датчик холла, дождя и герконы к питания
 418:	82 b3       	in	r24, 0x12	; 18
 41a:	8f 7d       	andi	r24, 0xDF	; 223
 41c:	82 bb       	out	0x12, r24	; 18
			ADCSRA |= (1<<ADEN);//вкл АЦП
 41e:	86 b1       	in	r24, 0x06	; 6
 420:	80 68       	ori	r24, 0x80	; 128
 422:	86 b9       	out	0x06, r24	; 6
 424:	2f ef       	ldi	r18, 0xFF	; 255
 426:	37 ea       	ldi	r19, 0xA7	; 167
 428:	81 e6       	ldi	r24, 0x61	; 97
 42a:	21 50       	subi	r18, 0x01	; 1
 42c:	30 40       	sbci	r19, 0x00	; 0
 42e:	80 40       	sbci	r24, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 434:	00 00       	nop
			_delay_ms(4000);
			NRF24_ini();//инициализируем каждый раз, т.к. отключаем питание перед сном
 436:	37 d2       	rcall	.+1134   	; 0x8a6 <NRF24_ini>
			WIND_DIRECT();//измеряем направление ветра
 438:	64 df       	rcall	.-312    	; 0x302 <WIND_DIRECT>
			sprintf (speed_str,"%u",speed);
 43a:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <speed+0x1>
 43e:	8f 93       	push	r24
 440:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <speed>
 444:	8f 93       	push	r24
 446:	03 e6       	ldi	r16, 0x63	; 99
 448:	10 e0       	ldi	r17, 0x00	; 0
 44a:	1f 93       	push	r17
 44c:	0f 93       	push	r16
 44e:	8c e8       	ldi	r24, 0x8C	; 140
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	9f 93       	push	r25
 454:	8f 93       	push	r24
 456:	b4 d2       	rcall	.+1384   	; 0x9c0 <sprintf>
			ADC_convert ();
 458:	09 de       	rcall	.-1006   	; 0x6c <ADC_convert>
			sprintf (Vbat,"%u",adc_value1);
 45a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <adc_value1+0x1>
 45e:	8f 93       	push	r24
 460:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <adc_value1>
 464:	8f 93       	push	r24
 466:	1f 93       	push	r17
 468:	0f 93       	push	r16
 46a:	88 e7       	ldi	r24, 0x78	; 120
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	9f 93       	push	r25
 470:	8f 93       	push	r24
 472:	a6 d2       	rcall	.+1356   	; 0x9c0 <sprintf>
 474:	9f ef       	ldi	r25, 0xFF	; 255
 476:	a3 ed       	ldi	r26, 0xD3	; 211
 478:	b0 e3       	ldi	r27, 0x30	; 48
 47a:	91 50       	subi	r25, 0x01	; 1
 47c:	a0 40       	sbci	r26, 0x00	; 0
 47e:	b0 40       	sbci	r27, 0x00	; 0
 480:	e1 f7       	brne	.-8      	; 0x47a <__stack+0x1b>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__stack+0x25>
 484:	00 00       	nop
			_delay_ms(2000);
			ADC_convert ();
 486:	f2 dd       	rcall	.-1052   	; 0x6c <ADC_convert>
			sprintf (RainAmount,"%u",adc_value2);
 488:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <adc_value2+0x1>
 48c:	8f 93       	push	r24
 48e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <adc_value2>
 492:	8f 93       	push	r24
 494:	1f 93       	push	r17
 496:	0f 93       	push	r16
 498:	8e e6       	ldi	r24, 0x6E	; 110
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	9f 93       	push	r25
 49e:	8f 93       	push	r24
 4a0:	8f d2       	rcall	.+1310   	; 0x9c0 <sprintf>
			//-------------------------------------------
			//отправка температуры
			buf1[0] = 1;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <buf1>
			if (dht22_GetData(data))
 4a8:	ce 01       	movw	r24, r28
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	21 de       	rcall	.-958    	; 0xf0 <dht22_GetData>
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	f8 94       	cli
 4b2:	de bf       	out	0x3e, r29	; 62
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	cd bf       	out	0x3d, r28	; 61
 4b8:	88 23       	and	r24, r24
 4ba:	31 f0       	breq	.+12     	; 0x4c8 <__stack+0x69>
			{
			  buf1[1] = data[1];//младший бит температуры
 4bc:	8a 81       	ldd	r24, Y+2	; 0x02
 4be:	ea e9       	ldi	r30, 0x9A	; 154
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	81 83       	std	Z+1, r24	; 0x01
			  buf1[2] = data[2];//старший бит температуры
 4c4:	8b 81       	ldd	r24, Y+3	; 0x03
 4c6:	82 83       	std	Z+2, r24	; 0x02
			}
			dt = NRF24L01_Send(buf1);
 4c8:	8a e9       	ldi	r24, 0x9A	; 154
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	29 d2       	rcall	.+1106   	; 0x920 <NRF24L01_Send>
 4ce:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <dt>
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 4d2:	0a e9       	ldi	r16, 0x9A	; 154
 4d4:	10 e0       	ldi	r17, 0x00	; 0
 4d6:	f8 01       	movw	r30, r16
 4d8:	01 90       	ld	r0, Z+
 4da:	00 20       	and	r0, r0
 4dc:	e9 f7       	brne	.-6      	; 0x4d8 <__stack+0x79>
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	af 01       	movw	r20, r30
 4e2:	4a 59       	subi	r20, 0x9A	; 154
 4e4:	50 40       	sbci	r21, 0x00	; 0
 4e6:	44 0f       	add	r20, r20
 4e8:	55 1f       	adc	r21, r21
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	c8 01       	movw	r24, r16
 4f0:	60 d2       	rcall	.+1216   	; 0x9b2 <memset>
 4f2:	ff ef       	ldi	r31, 0xFF	; 255
 4f4:	29 e6       	ldi	r18, 0x69	; 105
 4f6:	38 e1       	ldi	r19, 0x18	; 24
 4f8:	f1 50       	subi	r31, 0x01	; 1
 4fa:	20 40       	sbci	r18, 0x00	; 0
 4fc:	30 40       	sbci	r19, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <__stack+0x99>
 500:	00 c0       	rjmp	.+0      	; 0x502 <__stack+0xa3>
 502:	00 00       	nop
			_delay_ms(1000);
			//-------------------------------------------
			//отправка влажности
			 buf1[0] = 5;
 504:	85 e0       	ldi	r24, 0x05	; 5
 506:	d8 01       	movw	r26, r16
 508:	8c 93       	st	X, r24
			 buf1[1] = data[3];//младший бит влажности
 50a:	8c 81       	ldd	r24, Y+4	; 0x04
 50c:	11 96       	adiw	r26, 0x01	; 1
 50e:	8c 93       	st	X, r24
 510:	11 97       	sbiw	r26, 0x01	; 1
			 buf1[2] = data[4];//старший бит влажности
 512:	8d 81       	ldd	r24, Y+5	; 0x05
 514:	12 96       	adiw	r26, 0x02	; 2
 516:	8c 93       	st	X, r24
			 dt = NRF24L01_Send(buf1);
 518:	c8 01       	movw	r24, r16
 51a:	02 d2       	rcall	.+1028   	; 0x920 <NRF24L01_Send>
 51c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <dt>
			 memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 520:	f8 01       	movw	r30, r16
 522:	01 90       	ld	r0, Z+
 524:	00 20       	and	r0, r0
 526:	e9 f7       	brne	.-6      	; 0x522 <__stack+0xc3>
 528:	31 97       	sbiw	r30, 0x01	; 1
 52a:	af 01       	movw	r20, r30
 52c:	4a 59       	subi	r20, 0x9A	; 154
 52e:	50 40       	sbci	r21, 0x00	; 0
 530:	44 0f       	add	r20, r20
 532:	55 1f       	adc	r21, r21
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	c8 01       	movw	r24, r16
 53a:	3b d2       	rcall	.+1142   	; 0x9b2 <memset>
 53c:	bf ef       	ldi	r27, 0xFF	; 255
 53e:	e9 e6       	ldi	r30, 0x69	; 105
 540:	f8 e1       	ldi	r31, 0x18	; 24
 542:	b1 50       	subi	r27, 0x01	; 1
 544:	e0 40       	sbci	r30, 0x00	; 0
 546:	f0 40       	sbci	r31, 0x00	; 0
 548:	e1 f7       	brne	.-8      	; 0x542 <__stack+0xe3>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <__stack+0xed>
 54c:	00 00       	nop
			 _delay_ms(1000);
			//-------------------------------------------
			//отправка скорости ветра
			buf1[0] = 2;
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	d8 01       	movw	r26, r16
 552:	8c 93       	st	X, r24
			for (k = 1; k < strlen(speed_str)+1; k++)
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	0a c0       	rjmp	.+20     	; 0x56e <__stack+0x10f>
			{
				buf1[k] = speed_str[k-1];
 55a:	f9 01       	movw	r30, r18
 55c:	e5 57       	subi	r30, 0x75	; 117
 55e:	ff 4f       	sbci	r31, 0xFF	; 255
 560:	80 81       	ld	r24, Z
 562:	f9 01       	movw	r30, r18
 564:	e6 56       	subi	r30, 0x66	; 102
 566:	ff 4f       	sbci	r31, 0xFF	; 255
 568:	80 83       	st	Z, r24
			 memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
			 _delay_ms(1000);
			//-------------------------------------------
			//отправка скорости ветра
			buf1[0] = 2;
			for (k = 1; k < strlen(speed_str)+1; k++)
 56a:	2f 5f       	subi	r18, 0xFF	; 255
 56c:	3f 4f       	sbci	r19, 0xFF	; 255
 56e:	ec e8       	ldi	r30, 0x8C	; 140
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	01 90       	ld	r0, Z+
 574:	00 20       	and	r0, r0
 576:	e9 f7       	brne	.-6      	; 0x572 <__stack+0x113>
 578:	cf 01       	movw	r24, r30
 57a:	8c 58       	subi	r24, 0x8C	; 140
 57c:	90 40       	sbci	r25, 0x00	; 0
 57e:	28 17       	cp	r18, r24
 580:	39 07       	cpc	r19, r25
 582:	58 f3       	brcs	.-42     	; 0x55a <__stack+0xfb>
			{
				buf1[k] = speed_str[k-1];
			}
			dt = NRF24L01_Send(buf1);
 584:	8a e9       	ldi	r24, 0x9A	; 154
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	cb d1       	rcall	.+918    	; 0x920 <NRF24L01_Send>
 58a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <dt>
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 58e:	0a e9       	ldi	r16, 0x9A	; 154
 590:	10 e0       	ldi	r17, 0x00	; 0
 592:	f8 01       	movw	r30, r16
 594:	01 90       	ld	r0, Z+
 596:	00 20       	and	r0, r0
 598:	e9 f7       	brne	.-6      	; 0x594 <__stack+0x135>
 59a:	31 97       	sbiw	r30, 0x01	; 1
 59c:	af 01       	movw	r20, r30
 59e:	4a 59       	subi	r20, 0x9A	; 154
 5a0:	50 40       	sbci	r21, 0x00	; 0
 5a2:	44 0f       	add	r20, r20
 5a4:	55 1f       	adc	r21, r21
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	c8 01       	movw	r24, r16
 5ac:	02 d2       	rcall	.+1028   	; 0x9b2 <memset>
 5ae:	bf ef       	ldi	r27, 0xFF	; 255
 5b0:	e9 e6       	ldi	r30, 0x69	; 105
 5b2:	f8 e1       	ldi	r31, 0x18	; 24
 5b4:	b1 50       	subi	r27, 0x01	; 1
 5b6:	e0 40       	sbci	r30, 0x00	; 0
 5b8:	f0 40       	sbci	r31, 0x00	; 0
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <__stack+0x155>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <__stack+0x15f>
 5be:	00 00       	nop
			_delay_ms(1000);
			//-------------------------------------------
			//отправка направления ветра
			buf1[0] = 3;
 5c0:	83 e0       	ldi	r24, 0x03	; 3
 5c2:	d8 01       	movw	r26, r16
 5c4:	8c 93       	st	X, r24
			for (k = 1; k < strlen(wind_direction_str)+1; k++)
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	0a c0       	rjmp	.+20     	; 0x5e0 <__stack+0x181>
			{
				buf1[k] = wind_direction_str[k-1];
 5cc:	f9 01       	movw	r30, r18
 5ce:	ef 57       	subi	r30, 0x7F	; 127
 5d0:	ff 4f       	sbci	r31, 0xFF	; 255
 5d2:	80 81       	ld	r24, Z
 5d4:	f9 01       	movw	r30, r18
 5d6:	e6 56       	subi	r30, 0x66	; 102
 5d8:	ff 4f       	sbci	r31, 0xFF	; 255
 5da:	80 83       	st	Z, r24
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
			_delay_ms(1000);
			//-------------------------------------------
			//отправка направления ветра
			buf1[0] = 3;
			for (k = 1; k < strlen(wind_direction_str)+1; k++)
 5dc:	2f 5f       	subi	r18, 0xFF	; 255
 5de:	3f 4f       	sbci	r19, 0xFF	; 255
 5e0:	e2 e8       	ldi	r30, 0x82	; 130
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	01 90       	ld	r0, Z+
 5e6:	00 20       	and	r0, r0
 5e8:	e9 f7       	brne	.-6      	; 0x5e4 <__stack+0x185>
 5ea:	cf 01       	movw	r24, r30
 5ec:	82 58       	subi	r24, 0x82	; 130
 5ee:	90 40       	sbci	r25, 0x00	; 0
 5f0:	28 17       	cp	r18, r24
 5f2:	39 07       	cpc	r19, r25
 5f4:	58 f3       	brcs	.-42     	; 0x5cc <__stack+0x16d>
			{
				buf1[k] = wind_direction_str[k-1];
			}
			dt = NRF24L01_Send(buf1);
 5f6:	8a e9       	ldi	r24, 0x9A	; 154
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	92 d1       	rcall	.+804    	; 0x920 <NRF24L01_Send>
 5fc:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <dt>
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 600:	0a e9       	ldi	r16, 0x9A	; 154
 602:	10 e0       	ldi	r17, 0x00	; 0
 604:	f8 01       	movw	r30, r16
 606:	01 90       	ld	r0, Z+
 608:	00 20       	and	r0, r0
 60a:	e9 f7       	brne	.-6      	; 0x606 <__stack+0x1a7>
 60c:	31 97       	sbiw	r30, 0x01	; 1
 60e:	af 01       	movw	r20, r30
 610:	4a 59       	subi	r20, 0x9A	; 154
 612:	50 40       	sbci	r21, 0x00	; 0
 614:	44 0f       	add	r20, r20
 616:	55 1f       	adc	r21, r21
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	c8 01       	movw	r24, r16
 61e:	c9 d1       	rcall	.+914    	; 0x9b2 <memset>
 620:	bf ef       	ldi	r27, 0xFF	; 255
 622:	e9 e6       	ldi	r30, 0x69	; 105
 624:	f8 e1       	ldi	r31, 0x18	; 24
 626:	b1 50       	subi	r27, 0x01	; 1
 628:	e0 40       	sbci	r30, 0x00	; 0
 62a:	f0 40       	sbci	r31, 0x00	; 0
 62c:	e1 f7       	brne	.-8      	; 0x626 <__stack+0x1c7>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <__stack+0x1d1>
 630:	00 00       	nop
			_delay_ms(1000);
			//-------------------------------------------
			//отправка заряда аккумулятора
			buf1[0] = 4;
 632:	84 e0       	ldi	r24, 0x04	; 4
 634:	d8 01       	movw	r26, r16
 636:	8c 93       	st	X, r24
			for (k = 1; k < strlen(Vbat)+1; k++)
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	0a c0       	rjmp	.+20     	; 0x652 <__stack+0x1f3>
			{
				buf1[k] = Vbat[k-1];
 63e:	f9 01       	movw	r30, r18
 640:	e9 58       	subi	r30, 0x89	; 137
 642:	ff 4f       	sbci	r31, 0xFF	; 255
 644:	80 81       	ld	r24, Z
 646:	f9 01       	movw	r30, r18
 648:	e6 56       	subi	r30, 0x66	; 102
 64a:	ff 4f       	sbci	r31, 0xFF	; 255
 64c:	80 83       	st	Z, r24
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
			_delay_ms(1000);
			//-------------------------------------------
			//отправка заряда аккумулятора
			buf1[0] = 4;
			for (k = 1; k < strlen(Vbat)+1; k++)
 64e:	2f 5f       	subi	r18, 0xFF	; 255
 650:	3f 4f       	sbci	r19, 0xFF	; 255
 652:	e8 e7       	ldi	r30, 0x78	; 120
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	01 90       	ld	r0, Z+
 658:	00 20       	and	r0, r0
 65a:	e9 f7       	brne	.-6      	; 0x656 <__stack+0x1f7>
 65c:	cf 01       	movw	r24, r30
 65e:	88 57       	subi	r24, 0x78	; 120
 660:	90 40       	sbci	r25, 0x00	; 0
 662:	28 17       	cp	r18, r24
 664:	39 07       	cpc	r19, r25
 666:	58 f3       	brcs	.-42     	; 0x63e <__stack+0x1df>
			{
				buf1[k] = Vbat[k-1];
			}
			dt = NRF24L01_Send(buf1);
 668:	8a e9       	ldi	r24, 0x9A	; 154
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	59 d1       	rcall	.+690    	; 0x920 <NRF24L01_Send>
 66e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <dt>
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 672:	0a e9       	ldi	r16, 0x9A	; 154
 674:	10 e0       	ldi	r17, 0x00	; 0
 676:	f8 01       	movw	r30, r16
 678:	01 90       	ld	r0, Z+
 67a:	00 20       	and	r0, r0
 67c:	e9 f7       	brne	.-6      	; 0x678 <__stack+0x219>
 67e:	31 97       	sbiw	r30, 0x01	; 1
 680:	af 01       	movw	r20, r30
 682:	4a 59       	subi	r20, 0x9A	; 154
 684:	50 40       	sbci	r21, 0x00	; 0
 686:	44 0f       	add	r20, r20
 688:	55 1f       	adc	r21, r21
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	c8 01       	movw	r24, r16
 690:	90 d1       	rcall	.+800    	; 0x9b2 <memset>
 692:	bf ef       	ldi	r27, 0xFF	; 255
 694:	e9 e6       	ldi	r30, 0x69	; 105
 696:	f8 e1       	ldi	r31, 0x18	; 24
 698:	b1 50       	subi	r27, 0x01	; 1
 69a:	e0 40       	sbci	r30, 0x00	; 0
 69c:	f0 40       	sbci	r31, 0x00	; 0
 69e:	e1 f7       	brne	.-8      	; 0x698 <__stack+0x239>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <__stack+0x243>
 6a2:	00 00       	nop
			_delay_ms(1000);
			//-------------------------------------------
			//отправка кол-ва осадков
			buf1[0] = 6;
 6a4:	86 e0       	ldi	r24, 0x06	; 6
 6a6:	d8 01       	movw	r26, r16
 6a8:	8c 93       	st	X, r24
			for (k = 1; k < strlen(RainAmount)+1; k++)
 6aa:	21 e0       	ldi	r18, 0x01	; 1
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	0a c0       	rjmp	.+20     	; 0x6c4 <__stack+0x265>
			{
				buf1[k] = RainAmount[k-1];
 6b0:	f9 01       	movw	r30, r18
 6b2:	e3 59       	subi	r30, 0x93	; 147
 6b4:	ff 4f       	sbci	r31, 0xFF	; 255
 6b6:	80 81       	ld	r24, Z
 6b8:	f9 01       	movw	r30, r18
 6ba:	e6 56       	subi	r30, 0x66	; 102
 6bc:	ff 4f       	sbci	r31, 0xFF	; 255
 6be:	80 83       	st	Z, r24
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
			_delay_ms(1000);
			//-------------------------------------------
			//отправка кол-ва осадков
			buf1[0] = 6;
			for (k = 1; k < strlen(RainAmount)+1; k++)
 6c0:	2f 5f       	subi	r18, 0xFF	; 255
 6c2:	3f 4f       	sbci	r19, 0xFF	; 255
 6c4:	ee e6       	ldi	r30, 0x6E	; 110
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	01 90       	ld	r0, Z+
 6ca:	00 20       	and	r0, r0
 6cc:	e9 f7       	brne	.-6      	; 0x6c8 <__stack+0x269>
 6ce:	cf 01       	movw	r24, r30
 6d0:	8e 56       	subi	r24, 0x6E	; 110
 6d2:	90 40       	sbci	r25, 0x00	; 0
 6d4:	28 17       	cp	r18, r24
 6d6:	39 07       	cpc	r19, r25
 6d8:	58 f3       	brcs	.-42     	; 0x6b0 <__stack+0x251>
			{
				buf1[k] = RainAmount[k-1];
			}
			dt = NRF24L01_Send(buf1);
 6da:	8a e9       	ldi	r24, 0x9A	; 154
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	20 d1       	rcall	.+576    	; 0x920 <NRF24L01_Send>
 6e0:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <dt>
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 6e4:	ea e9       	ldi	r30, 0x9A	; 154
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	01 90       	ld	r0, Z+
 6ea:	00 20       	and	r0, r0
 6ec:	e9 f7       	brne	.-6      	; 0x6e8 <__stack+0x289>
 6ee:	31 97       	sbiw	r30, 0x01	; 1
 6f0:	af 01       	movw	r20, r30
 6f2:	4a 59       	subi	r20, 0x9A	; 154
 6f4:	50 40       	sbci	r21, 0x00	; 0
 6f6:	44 0f       	add	r20, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	8a e9       	ldi	r24, 0x9A	; 154
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	57 d1       	rcall	.+686    	; 0x9b2 <memset>
			//reg = nRF_read_register(CONFIG);
			//reg &= ~(1<<PWR_UP);
			//nRF_write_register(CONFIG,reg);
			//-------------------------------------------
			//перевод МК в сон
			PORTD |= (1<<TRANZISTOR);//отключаем датчик холла, дождя и герконы от питания
 704:	82 b3       	in	r24, 0x12	; 18
 706:	80 62       	ori	r24, 0x20	; 32
 708:	82 bb       	out	0x12, r24	; 18
			ADCSRA &= ~(1<<ADEN);//выкл АЦП
 70a:	86 b1       	in	r24, 0x06	; 6
 70c:	8f 77       	andi	r24, 0x7F	; 127
 70e:	86 b9       	out	0x06, r24	; 6
			DDRD |= (1<<PORTD3);//датчик холла на выход
 710:	81 b3       	in	r24, 0x11	; 17
 712:	88 60       	ori	r24, 0x08	; 8
 714:	81 bb       	out	0x11, r24	; 17
 716:	77 ce       	rjmp	.-786    	; 0x406 <__DATA_REGION_LENGTH__+0x6>

00000718 <NRF24_Transmit>:
//-------------------------------------------------------------
void nRF_command(uint8_t command)
{
	LOW_CSN;
	spi_send_recv(command);
	HIGH_CSN;
 718:	ef 92       	push	r14
 71a:	ff 92       	push	r15
 71c:	0f 93       	push	r16
 71e:	1f 93       	push	r17
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
 724:	8b 01       	movw	r16, r22
 726:	c4 2f       	mov	r28, r20
 728:	98 b3       	in	r25, 0x18	; 24
 72a:	9d 7f       	andi	r25, 0xFD	; 253
 72c:	98 bb       	out	0x18, r25	; 24
 72e:	98 b3       	in	r25, 0x18	; 24
 730:	9b 7f       	andi	r25, 0xFB	; 251
 732:	98 bb       	out	0x18, r25	; 24
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	e0 dd       	rcall	.-1088   	; 0x2f8 <spi_send_recv>
 738:	82 e0       	ldi	r24, 0x02	; 2
 73a:	8a 95       	dec	r24
 73c:	f1 f7       	brne	.-4      	; 0x73a <NRF24_Transmit+0x22>
 73e:	00 c0       	rjmp	.+0      	; 0x740 <NRF24_Transmit+0x28>
 740:	0a c0       	rjmp	.+20     	; 0x756 <NRF24_Transmit+0x3e>
 742:	78 01       	movw	r14, r16
 744:	ef ef       	ldi	r30, 0xFF	; 255
 746:	ee 1a       	sub	r14, r30
 748:	fe 0a       	sbc	r15, r30
 74a:	f8 01       	movw	r30, r16
 74c:	80 81       	ld	r24, Z
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	d3 dd       	rcall	.-1114   	; 0x2f8 <spi_send_recv>
 752:	cd 2f       	mov	r28, r29
 754:	87 01       	movw	r16, r14
 756:	df ef       	ldi	r29, 0xFF	; 255
 758:	dc 0f       	add	r29, r28
 75a:	c1 11       	cpse	r28, r1
 75c:	f2 cf       	rjmp	.-28     	; 0x742 <NRF24_Transmit+0x2a>
 75e:	88 b3       	in	r24, 0x18	; 24
 760:	84 60       	ori	r24, 0x04	; 4
 762:	88 bb       	out	0x18, r24	; 24
 764:	88 b3       	in	r24, 0x18	; 24
 766:	82 60       	ori	r24, 0x02	; 2
 768:	88 bb       	out	0x18, r24	; 24
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	1f 91       	pop	r17
 770:	0f 91       	pop	r16
 772:	ff 90       	pop	r15
 774:	ef 90       	pop	r14
 776:	08 95       	ret

00000778 <NRF24_FlushRX>:
 778:	88 b3       	in	r24, 0x18	; 24
 77a:	8b 7f       	andi	r24, 0xFB	; 251
 77c:	88 bb       	out	0x18, r24	; 24
 77e:	82 ee       	ldi	r24, 0xE2	; 226
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	ba dd       	rcall	.-1164   	; 0x2f8 <spi_send_recv>
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	8a 95       	dec	r24
 788:	f1 f7       	brne	.-4      	; 0x786 <NRF24_FlushRX+0xe>
 78a:	00 c0       	rjmp	.+0      	; 0x78c <NRF24_FlushRX+0x14>
 78c:	88 b3       	in	r24, 0x18	; 24
 78e:	84 60       	ori	r24, 0x04	; 4
 790:	88 bb       	out	0x18, r24	; 24
 792:	08 95       	ret

00000794 <NRF24_FlushTX>:
 794:	88 b3       	in	r24, 0x18	; 24
 796:	8b 7f       	andi	r24, 0xFB	; 251
 798:	88 bb       	out	0x18, r24	; 24
 79a:	81 ee       	ldi	r24, 0xE1	; 225
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	ac dd       	rcall	.-1192   	; 0x2f8 <spi_send_recv>
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	8a 95       	dec	r24
 7a4:	f1 f7       	brne	.-4      	; 0x7a2 <NRF24_FlushTX+0xe>
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <NRF24_FlushTX+0x14>
 7a8:	88 b3       	in	r24, 0x18	; 24
 7aa:	84 60       	ori	r24, 0x04	; 4
 7ac:	88 bb       	out	0x18, r24	; 24
 7ae:	08 95       	ret

000007b0 <NRF24_ToggleFeatures>:
 7b0:	88 b3       	in	r24, 0x18	; 24
 7b2:	8b 7f       	andi	r24, 0xFB	; 251
 7b4:	88 bb       	out	0x18, r24	; 24
 7b6:	80 e5       	ldi	r24, 0x50	; 80
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	9e dd       	rcall	.-1220   	; 0x2f8 <spi_send_recv>
 7bc:	82 e0       	ldi	r24, 0x02	; 2
 7be:	8a 95       	dec	r24
 7c0:	f1 f7       	brne	.-4      	; 0x7be <NRF24_ToggleFeatures+0xe>
 7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <NRF24_ToggleFeatures+0x14>
 7c4:	83 e7       	ldi	r24, 0x73	; 115
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	97 dd       	rcall	.-1234   	; 0x2f8 <spi_send_recv>
 7ca:	88 b3       	in	r24, 0x18	; 24
 7cc:	84 60       	ori	r24, 0x04	; 4
 7ce:	88 bb       	out	0x18, r24	; 24
 7d0:	08 95       	ret

000007d2 <NRF24_Write_Buf>:
 7d2:	ef 92       	push	r14
 7d4:	ff 92       	push	r15
 7d6:	0f 93       	push	r16
 7d8:	1f 93       	push	r17
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	8b 01       	movw	r16, r22
 7e0:	c4 2f       	mov	r28, r20
 7e2:	80 62       	ori	r24, 0x20	; 32
 7e4:	98 b3       	in	r25, 0x18	; 24
 7e6:	9b 7f       	andi	r25, 0xFB	; 251
 7e8:	98 bb       	out	0x18, r25	; 24
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	85 dd       	rcall	.-1270   	; 0x2f8 <spi_send_recv>
 7ee:	82 e0       	ldi	r24, 0x02	; 2
 7f0:	8a 95       	dec	r24
 7f2:	f1 f7       	brne	.-4      	; 0x7f0 <NRF24_Write_Buf+0x1e>
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <NRF24_Write_Buf+0x24>
 7f6:	0a c0       	rjmp	.+20     	; 0x80c <NRF24_Write_Buf+0x3a>
 7f8:	78 01       	movw	r14, r16
 7fa:	ef ef       	ldi	r30, 0xFF	; 255
 7fc:	ee 1a       	sub	r14, r30
 7fe:	fe 0a       	sbc	r15, r30
 800:	f8 01       	movw	r30, r16
 802:	80 81       	ld	r24, Z
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	78 dd       	rcall	.-1296   	; 0x2f8 <spi_send_recv>
 808:	cd 2f       	mov	r28, r29
 80a:	87 01       	movw	r16, r14
 80c:	df ef       	ldi	r29, 0xFF	; 255
 80e:	dc 0f       	add	r29, r28
 810:	c1 11       	cpse	r28, r1
 812:	f2 cf       	rjmp	.-28     	; 0x7f8 <NRF24_Write_Buf+0x26>
 814:	88 b3       	in	r24, 0x18	; 24
 816:	84 60       	ori	r24, 0x04	; 4
 818:	88 bb       	out	0x18, r24	; 24
 81a:	df 91       	pop	r29
 81c:	cf 91       	pop	r28
 81e:	1f 91       	pop	r17
 820:	0f 91       	pop	r16
 822:	ff 90       	pop	r15
 824:	ef 90       	pop	r14
 826:	08 95       	ret

00000828 <NRF24L01_TX_Mode>:
 828:	43 e0       	ldi	r20, 0x03	; 3
 82a:	60 e6       	ldi	r22, 0x60	; 96
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	80 e1       	ldi	r24, 0x10	; 16
 830:	d0 df       	rcall	.-96     	; 0x7d2 <NRF24_Write_Buf>
 832:	88 b3       	in	r24, 0x18	; 24
 834:	8d 7f       	andi	r24, 0xFD	; 253
 836:	88 bb       	out	0x18, r24	; 24
 838:	9f df       	rcall	.-194    	; 0x778 <NRF24_FlushRX>
 83a:	ac df       	rcall	.-168    	; 0x794 <NRF24_FlushTX>
 83c:	08 95       	ret

0000083e <nRF_write_register>:
}
//-------------------------------------------------------------
void nRF_write_register(uint8_t reg, uint8_t data_out)
{
 83e:	cf 93       	push	r28
 840:	c6 2f       	mov	r28, r22
	reg |= W_REGISTER;
 842:	80 62       	ori	r24, 0x20	; 32
	LOW_CSN;
 844:	98 b3       	in	r25, 0x18	; 24
 846:	9b 7f       	andi	r25, 0xFB	; 251
 848:	98 bb       	out	0x18, r25	; 24
	spi_send_recv(reg);
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	55 dd       	rcall	.-1366   	; 0x2f8 <spi_send_recv>
	spi_send_recv(data_out);
 84e:	8c 2f       	mov	r24, r28
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	52 dd       	rcall	.-1372   	; 0x2f8 <spi_send_recv>
	HIGH_CSN;
 854:	88 b3       	in	r24, 0x18	; 24
 856:	84 60       	ori	r24, 0x04	; 4
 858:	88 bb       	out	0x18, r24	; 24
}
 85a:	cf 91       	pop	r28
 85c:	08 95       	ret

0000085e <nRF_read_register>:
//-------------------------------------------------------------
uint8_t nRF_read_register(uint8_t reg)
{
 85e:	cf 93       	push	r28
 860:	c8 2f       	mov	r28, r24
	uint8_t data_in;
	LOW_CSN;
 862:	88 b3       	in	r24, 0x18	; 24
 864:	8b 7f       	andi	r24, 0xFB	; 251
 866:	88 bb       	out	0x18, r24	; 24
	data_in = spi_send_recv(reg);
 868:	8c 2f       	mov	r24, r28
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	45 dd       	rcall	.-1398   	; 0x2f8 <spi_send_recv>
	if(reg != STATUS)
 86e:	c7 30       	cpi	r28, 0x07	; 7
 870:	19 f0       	breq	.+6      	; 0x878 <nRF_read_register+0x1a>
	{
		data_in = spi_send_recv(NOP);
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	40 dd       	rcall	.-1408   	; 0x2f8 <spi_send_recv>
	}
	HIGH_CSN;
 878:	98 b3       	in	r25, 0x18	; 24
 87a:	94 60       	ori	r25, 0x04	; 4
 87c:	98 bb       	out	0x18, r25	; 24
	return data_in;
}
 87e:	cf 91       	pop	r28
 880:	08 95       	ret

00000882 <NRF24L01_RX_Mode>:
}
//-------------------------------------------------------------
void NRF24L01_RX_Mode(void) // включение режима приема
{
	uint8_t regval = 0x00;
	regval = nRF_read_register(CONFIG);
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	ec df       	rcall	.-40     	; 0x85e <nRF_read_register>
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 886:	68 2f       	mov	r22, r24
 888:	63 60       	ori	r22, 0x03	; 3
	nRF_write_register(CONFIG,regval);
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	d8 df       	rcall	.-80     	; 0x83e <nRF_write_register>
	HIGH_CE;
 88e:	88 b3       	in	r24, 0x18	; 24
 890:	82 60       	ori	r24, 0x02	; 2
 892:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 894:	8b e2       	ldi	r24, 0x2B	; 43
 896:	91 e0       	ldi	r25, 0x01	; 1
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	f1 f7       	brne	.-4      	; 0x898 <NRF24L01_RX_Mode+0x16>
 89c:	00 c0       	rjmp	.+0      	; 0x89e <NRF24L01_RX_Mode+0x1c>
 89e:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
 8a0:	6b df       	rcall	.-298    	; 0x778 <NRF24_FlushRX>
	NRF24_FlushTX();
 8a2:	78 df       	rcall	.-272    	; 0x794 <NRF24_FlushTX>
 8a4:	08 95       	ret

000008a6 <NRF24_ini>:
uint8_t TX_ADDRESS[TX_ADR_WIDTH] = {0xb3,0xb4,0x01};//адрес
uint8_t RX_BUF[TX_PLOAD_WIDTH] = {0};//буффер для пакетов
//-------------------------------------------------------------
void NRF24_ini(void)
{
	LOW_CE;
 8a6:	88 b3       	in	r24, 0x18	; 24
 8a8:	8d 7f       	andi	r24, 0xFD	; 253
 8aa:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8ac:	8f e0       	ldi	r24, 0x0F	; 15
 8ae:	97 e2       	ldi	r25, 0x27	; 39
 8b0:	01 97       	sbiw	r24, 0x01	; 1
 8b2:	f1 f7       	brne	.-4      	; 0x8b0 <NRF24_ini+0xa>
 8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <NRF24_ini+0x10>
 8b6:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8b8:	6a e0       	ldi	r22, 0x0A	; 10
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	c0 df       	rcall	.-128    	; 0x83e <nRF_write_register>
 8be:	8f e0       	ldi	r24, 0x0F	; 15
 8c0:	97 e2       	ldi	r25, 0x27	; 39
 8c2:	01 97       	sbiw	r24, 0x01	; 1
 8c4:	f1 f7       	brne	.-4      	; 0x8c2 <NRF24_ini+0x1c>
 8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <NRF24_ini+0x22>
 8c8:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(EN_AA, 0x01); // Enable Pipe0
 8ca:	61 e0       	ldi	r22, 0x01	; 1
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	b7 df       	rcall	.-146    	; 0x83e <nRF_write_register>
	nRF_write_register(EN_RXADDR, 0x01); // Enable Pipe0
 8d0:	61 e0       	ldi	r22, 0x01	; 1
 8d2:	82 e0       	ldi	r24, 0x02	; 2
 8d4:	b4 df       	rcall	.-152    	; 0x83e <nRF_write_register>
	nRF_write_register(SETUP_AW, 0x01); // Setup address width=3 bytes
 8d6:	61 e0       	ldi	r22, 0x01	; 1
 8d8:	83 e0       	ldi	r24, 0x03	; 3
 8da:	b1 df       	rcall	.-158    	; 0x83e <nRF_write_register>
	nRF_write_register(SETUP_RETR, 0x5F); // // 1500us, 15 retrans
 8dc:	6f e5       	ldi	r22, 0x5F	; 95
 8de:	84 e0       	ldi	r24, 0x04	; 4
 8e0:	ae df       	rcall	.-164    	; 0x83e <nRF_write_register>
	NRF24_ToggleFeatures();
 8e2:	66 df       	rcall	.-308    	; 0x7b0 <NRF24_ToggleFeatures>
	nRF_write_register(FEATURE, 0);
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	8d e1       	ldi	r24, 0x1D	; 29
 8e8:	aa df       	rcall	.-172    	; 0x83e <nRF_write_register>
	nRF_write_register(DYNPD, 0);
 8ea:	60 e0       	ldi	r22, 0x00	; 0
 8ec:	8c e1       	ldi	r24, 0x1C	; 28
 8ee:	a7 df       	rcall	.-178    	; 0x83e <nRF_write_register>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
 8f0:	60 e7       	ldi	r22, 0x70	; 112
 8f2:	87 e0       	ldi	r24, 0x07	; 7
 8f4:	a4 df       	rcall	.-184    	; 0x83e <nRF_write_register>
	nRF_write_register(RF_CH, 76); // частота 2476 MHz
 8f6:	6c e4       	ldi	r22, 0x4C	; 76
 8f8:	85 e0       	ldi	r24, 0x05	; 5
 8fa:	a1 df       	rcall	.-190    	; 0x83e <nRF_write_register>
	nRF_write_register(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
 8fc:	66 e0       	ldi	r22, 0x06	; 6
 8fe:	86 e0       	ldi	r24, 0x06	; 6
 900:	9e df       	rcall	.-196    	; 0x83e <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 902:	43 e0       	ldi	r20, 0x03	; 3
 904:	60 e6       	ldi	r22, 0x60	; 96
 906:	70 e0       	ldi	r23, 0x00	; 0
 908:	80 e1       	ldi	r24, 0x10	; 16
 90a:	63 df       	rcall	.-314    	; 0x7d2 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);
 90c:	43 e0       	ldi	r20, 0x03	; 3
 90e:	60 e6       	ldi	r22, 0x60	; 96
 910:	70 e0       	ldi	r23, 0x00	; 0
 912:	8a e0       	ldi	r24, 0x0A	; 10
 914:	5e df       	rcall	.-324    	; 0x7d2 <NRF24_Write_Buf>
	nRF_write_register(RX_PW_P0, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 0
 916:	65 e0       	ldi	r22, 0x05	; 5
 918:	81 e1       	ldi	r24, 0x11	; 17
 91a:	91 df       	rcall	.-222    	; 0x83e <nRF_write_register>
	//пока уходим в режим приёмника
	NRF24L01_RX_Mode();
 91c:	b2 df       	rcall	.-156    	; 0x882 <NRF24L01_RX_Mode>
 91e:	08 95       	ret

00000920 <NRF24L01_Send>:
	HIGH_CSN;
	HIGH_CE;
}
//-------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	ec 01       	movw	r28, r24
	uint8_t status=0x00, regval=0x00; //количество повторных попыток передачи, а также количество потерянных пакетов
	NRF24L01_TX_Mode(pBuf);//перевод в режим передатчика
 926:	80 df       	rcall	.-256    	; 0x828 <NRF24L01_TX_Mode>
	regval = nRF_read_register(CONFIG);
 928:	80 e0       	ldi	r24, 0x00	; 0
 92a:	99 df       	rcall	.-206    	; 0x85e <nRF_read_register>
 92c:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);
	regval &= ~(1<<PRIM_RX);
 92e:	68 2f       	mov	r22, r24
 930:	62 60       	ori	r22, 0x02	; 2
	nRF_write_register(CONFIG,regval);
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	84 df       	rcall	.-248    	; 0x83e <nRF_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 936:	8b e2       	ldi	r24, 0x2B	; 43
 938:	91 e0       	ldi	r25, 0x01	; 1
 93a:	01 97       	sbiw	r24, 0x01	; 1
 93c:	f1 f7       	brne	.-4      	; 0x93a <NRF24L01_Send+0x1a>
 93e:	00 c0       	rjmp	.+0      	; 0x940 <NRF24L01_Send+0x20>
 940:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	//Отправим данные в воздух
	NRF24_Transmit(W_TX_PAYLOAD, pBuf, TX_PLOAD_WIDTH);
 942:	45 e0       	ldi	r20, 0x05	; 5
 944:	be 01       	movw	r22, r28
 946:	80 ea       	ldi	r24, 0xA0	; 160
 948:	e7 de       	rcall	.-562    	; 0x718 <NRF24_Transmit>
	HIGH_CE;
 94a:	88 b3       	in	r24, 0x18	; 24
 94c:	82 60       	ori	r24, 0x02	; 2
 94e:	88 bb       	out	0x18, r24	; 24
 950:	98 e2       	ldi	r25, 0x28	; 40
 952:	9a 95       	dec	r25
 954:	f1 f7       	brne	.-4      	; 0x952 <NRF24L01_Send+0x32>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	LOW_CE;
 956:	88 b3       	in	r24, 0x18	; 24
 958:	8d 7f       	andi	r24, 0xFD	; 253
 95a:	88 bb       	out	0x18, r24	; 24
	while( (PIND&(1<<IRQ)) != 0);
 95c:	82 99       	sbic	0x10, 2	; 16
 95e:	fe cf       	rjmp	.-4      	; 0x95c <NRF24L01_Send+0x3c>
	status = nRF_read_register(STATUS);
 960:	87 e0       	ldi	r24, 0x07	; 7
 962:	7d df       	rcall	.-262    	; 0x85e <nRF_read_register>
	if(status&TX_DS) //tx_ds == 0x20
 964:	98 2f       	mov	r25, r24
 966:	95 70       	andi	r25, 0x05	; 5
 968:	99 f0       	breq	.+38     	; 0x990 <NRF24L01_Send+0x70>
	{
		PORTD |= (1<<LED);
 96a:	82 b3       	in	r24, 0x12	; 18
 96c:	80 64       	ori	r24, 0x40	; 64
 96e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 970:	2f ef       	ldi	r18, 0xFF	; 255
 972:	80 e7       	ldi	r24, 0x70	; 112
 974:	92 e0       	ldi	r25, 0x02	; 2
 976:	21 50       	subi	r18, 0x01	; 1
 978:	80 40       	sbci	r24, 0x00	; 0
 97a:	90 40       	sbci	r25, 0x00	; 0
 97c:	e1 f7       	brne	.-8      	; 0x976 <NRF24L01_Send+0x56>
 97e:	00 c0       	rjmp	.+0      	; 0x980 <NRF24L01_Send+0x60>
 980:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED);
 982:	82 b3       	in	r24, 0x12	; 18
 984:	8f 7b       	andi	r24, 0xBF	; 191
 986:	82 bb       	out	0x12, r24	; 18
		nRF_write_register(STATUS, 0x20);
 988:	60 e2       	ldi	r22, 0x20	; 32
 98a:	87 e0       	ldi	r24, 0x07	; 7
 98c:	58 df       	rcall	.-336    	; 0x83e <nRF_write_register>
 98e:	06 c0       	rjmp	.+12     	; 0x99c <NRF24L01_Send+0x7c>
	}
	else if(status&MAX_RT)
 990:	82 ff       	sbrs	r24, 2
 992:	04 c0       	rjmp	.+8      	; 0x99c <NRF24L01_Send+0x7c>
	{
		nRF_write_register(STATUS, 0x10);
 994:	60 e1       	ldi	r22, 0x10	; 16
 996:	87 e0       	ldi	r24, 0x07	; 7
 998:	52 df       	rcall	.-348    	; 0x83e <nRF_write_register>
		NRF24_FlushTX();
 99a:	fc de       	rcall	.-520    	; 0x794 <NRF24_FlushTX>
	}
	regval = nRF_read_register(OBSERVE_TX);
 99c:	88 e0       	ldi	r24, 0x08	; 8
 99e:	5f df       	rcall	.-322    	; 0x85e <nRF_read_register>
 9a0:	c8 2f       	mov	r28, r24
	//Уходим в режим приёмника
	NRF24L01_RX_Mode();
 9a2:	6f df       	rcall	.-290    	; 0x882 <NRF24L01_RX_Mode>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
 9a4:	60 e7       	ldi	r22, 0x70	; 112
 9a6:	87 e0       	ldi	r24, 0x07	; 7
 9a8:	4a df       	rcall	.-364    	; 0x83e <nRF_write_register>
	return regval;
}
 9aa:	8c 2f       	mov	r24, r28
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	08 95       	ret

000009b2 <memset>:
 9b2:	dc 01       	movw	r26, r24
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <memset+0x6>
 9b6:	6d 93       	st	X+, r22
 9b8:	41 50       	subi	r20, 0x01	; 1
 9ba:	50 40       	sbci	r21, 0x00	; 0
 9bc:	e0 f7       	brcc	.-8      	; 0x9b6 <memset+0x4>
 9be:	08 95       	ret

000009c0 <sprintf>:
 9c0:	ae e0       	ldi	r26, 0x0E	; 14
 9c2:	b0 e0       	ldi	r27, 0x00	; 0
 9c4:	e5 ee       	ldi	r30, 0xE5	; 229
 9c6:	f4 e0       	ldi	r31, 0x04	; 4
 9c8:	aa c2       	rjmp	.+1364   	; 0xf1e <__prologue_saves__+0x1c>
 9ca:	0d 89       	ldd	r16, Y+21	; 0x15
 9cc:	1e 89       	ldd	r17, Y+22	; 0x16
 9ce:	86 e0       	ldi	r24, 0x06	; 6
 9d0:	8c 83       	std	Y+4, r24	; 0x04
 9d2:	1a 83       	std	Y+2, r17	; 0x02
 9d4:	09 83       	std	Y+1, r16	; 0x01
 9d6:	8f ef       	ldi	r24, 0xFF	; 255
 9d8:	9f e7       	ldi	r25, 0x7F	; 127
 9da:	9e 83       	std	Y+6, r25	; 0x06
 9dc:	8d 83       	std	Y+5, r24	; 0x05
 9de:	ae 01       	movw	r20, r28
 9e0:	47 5e       	subi	r20, 0xE7	; 231
 9e2:	5f 4f       	sbci	r21, 0xFF	; 255
 9e4:	6f 89       	ldd	r22, Y+23	; 0x17
 9e6:	78 8d       	ldd	r23, Y+24	; 0x18
 9e8:	ce 01       	movw	r24, r28
 9ea:	01 96       	adiw	r24, 0x01	; 1
 9ec:	08 d0       	rcall	.+16     	; 0x9fe <vfprintf>
 9ee:	ef 81       	ldd	r30, Y+7	; 0x07
 9f0:	f8 85       	ldd	r31, Y+8	; 0x08
 9f2:	e0 0f       	add	r30, r16
 9f4:	f1 1f       	adc	r31, r17
 9f6:	10 82       	st	Z, r1
 9f8:	2e 96       	adiw	r28, 0x0e	; 14
 9fa:	e4 e0       	ldi	r30, 0x04	; 4
 9fc:	ac c2       	rjmp	.+1368   	; 0xf56 <__epilogue_restores__+0x1c>

000009fe <vfprintf>:
 9fe:	ab e0       	ldi	r26, 0x0B	; 11
 a00:	b0 e0       	ldi	r27, 0x00	; 0
 a02:	e4 e0       	ldi	r30, 0x04	; 4
 a04:	f5 e0       	ldi	r31, 0x05	; 5
 a06:	7d c2       	rjmp	.+1274   	; 0xf02 <__prologue_saves__>
 a08:	6c 01       	movw	r12, r24
 a0a:	7b 01       	movw	r14, r22
 a0c:	8a 01       	movw	r16, r20
 a0e:	fc 01       	movw	r30, r24
 a10:	17 82       	std	Z+7, r1	; 0x07
 a12:	16 82       	std	Z+6, r1	; 0x06
 a14:	83 81       	ldd	r24, Z+3	; 0x03
 a16:	81 ff       	sbrs	r24, 1
 a18:	bf c1       	rjmp	.+894    	; 0xd98 <vfprintf+0x39a>
 a1a:	ce 01       	movw	r24, r28
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	3c 01       	movw	r6, r24
 a20:	f6 01       	movw	r30, r12
 a22:	93 81       	ldd	r25, Z+3	; 0x03
 a24:	f7 01       	movw	r30, r14
 a26:	93 fd       	sbrc	r25, 3
 a28:	85 91       	lpm	r24, Z+
 a2a:	93 ff       	sbrs	r25, 3
 a2c:	81 91       	ld	r24, Z+
 a2e:	7f 01       	movw	r14, r30
 a30:	88 23       	and	r24, r24
 a32:	09 f4       	brne	.+2      	; 0xa36 <vfprintf+0x38>
 a34:	ad c1       	rjmp	.+858    	; 0xd90 <vfprintf+0x392>
 a36:	85 32       	cpi	r24, 0x25	; 37
 a38:	39 f4       	brne	.+14     	; 0xa48 <vfprintf+0x4a>
 a3a:	93 fd       	sbrc	r25, 3
 a3c:	85 91       	lpm	r24, Z+
 a3e:	93 ff       	sbrs	r25, 3
 a40:	81 91       	ld	r24, Z+
 a42:	7f 01       	movw	r14, r30
 a44:	85 32       	cpi	r24, 0x25	; 37
 a46:	21 f4       	brne	.+8      	; 0xa50 <vfprintf+0x52>
 a48:	b6 01       	movw	r22, r12
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	c0 d1       	rcall	.+896    	; 0xdce <fputc>
 a4e:	e8 cf       	rjmp	.-48     	; 0xa20 <vfprintf+0x22>
 a50:	91 2c       	mov	r9, r1
 a52:	21 2c       	mov	r2, r1
 a54:	31 2c       	mov	r3, r1
 a56:	ff e1       	ldi	r31, 0x1F	; 31
 a58:	f3 15       	cp	r31, r3
 a5a:	d8 f0       	brcs	.+54     	; 0xa92 <vfprintf+0x94>
 a5c:	8b 32       	cpi	r24, 0x2B	; 43
 a5e:	79 f0       	breq	.+30     	; 0xa7e <vfprintf+0x80>
 a60:	38 f4       	brcc	.+14     	; 0xa70 <vfprintf+0x72>
 a62:	80 32       	cpi	r24, 0x20	; 32
 a64:	79 f0       	breq	.+30     	; 0xa84 <vfprintf+0x86>
 a66:	83 32       	cpi	r24, 0x23	; 35
 a68:	a1 f4       	brne	.+40     	; 0xa92 <vfprintf+0x94>
 a6a:	23 2d       	mov	r18, r3
 a6c:	20 61       	ori	r18, 0x10	; 16
 a6e:	1d c0       	rjmp	.+58     	; 0xaaa <vfprintf+0xac>
 a70:	8d 32       	cpi	r24, 0x2D	; 45
 a72:	61 f0       	breq	.+24     	; 0xa8c <vfprintf+0x8e>
 a74:	80 33       	cpi	r24, 0x30	; 48
 a76:	69 f4       	brne	.+26     	; 0xa92 <vfprintf+0x94>
 a78:	23 2d       	mov	r18, r3
 a7a:	21 60       	ori	r18, 0x01	; 1
 a7c:	16 c0       	rjmp	.+44     	; 0xaaa <vfprintf+0xac>
 a7e:	83 2d       	mov	r24, r3
 a80:	82 60       	ori	r24, 0x02	; 2
 a82:	38 2e       	mov	r3, r24
 a84:	e3 2d       	mov	r30, r3
 a86:	e4 60       	ori	r30, 0x04	; 4
 a88:	3e 2e       	mov	r3, r30
 a8a:	2a c0       	rjmp	.+84     	; 0xae0 <vfprintf+0xe2>
 a8c:	f3 2d       	mov	r31, r3
 a8e:	f8 60       	ori	r31, 0x08	; 8
 a90:	1d c0       	rjmp	.+58     	; 0xacc <vfprintf+0xce>
 a92:	37 fc       	sbrc	r3, 7
 a94:	2d c0       	rjmp	.+90     	; 0xaf0 <vfprintf+0xf2>
 a96:	20 ed       	ldi	r18, 0xD0	; 208
 a98:	28 0f       	add	r18, r24
 a9a:	2a 30       	cpi	r18, 0x0A	; 10
 a9c:	40 f0       	brcs	.+16     	; 0xaae <vfprintf+0xb0>
 a9e:	8e 32       	cpi	r24, 0x2E	; 46
 aa0:	b9 f4       	brne	.+46     	; 0xad0 <vfprintf+0xd2>
 aa2:	36 fc       	sbrc	r3, 6
 aa4:	75 c1       	rjmp	.+746    	; 0xd90 <vfprintf+0x392>
 aa6:	23 2d       	mov	r18, r3
 aa8:	20 64       	ori	r18, 0x40	; 64
 aaa:	32 2e       	mov	r3, r18
 aac:	19 c0       	rjmp	.+50     	; 0xae0 <vfprintf+0xe2>
 aae:	36 fe       	sbrs	r3, 6
 ab0:	06 c0       	rjmp	.+12     	; 0xabe <vfprintf+0xc0>
 ab2:	8a e0       	ldi	r24, 0x0A	; 10
 ab4:	98 9e       	mul	r9, r24
 ab6:	20 0d       	add	r18, r0
 ab8:	11 24       	eor	r1, r1
 aba:	92 2e       	mov	r9, r18
 abc:	11 c0       	rjmp	.+34     	; 0xae0 <vfprintf+0xe2>
 abe:	ea e0       	ldi	r30, 0x0A	; 10
 ac0:	2e 9e       	mul	r2, r30
 ac2:	20 0d       	add	r18, r0
 ac4:	11 24       	eor	r1, r1
 ac6:	22 2e       	mov	r2, r18
 ac8:	f3 2d       	mov	r31, r3
 aca:	f0 62       	ori	r31, 0x20	; 32
 acc:	3f 2e       	mov	r3, r31
 ace:	08 c0       	rjmp	.+16     	; 0xae0 <vfprintf+0xe2>
 ad0:	8c 36       	cpi	r24, 0x6C	; 108
 ad2:	21 f4       	brne	.+8      	; 0xadc <vfprintf+0xde>
 ad4:	83 2d       	mov	r24, r3
 ad6:	80 68       	ori	r24, 0x80	; 128
 ad8:	38 2e       	mov	r3, r24
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <vfprintf+0xe2>
 adc:	88 36       	cpi	r24, 0x68	; 104
 ade:	41 f4       	brne	.+16     	; 0xaf0 <vfprintf+0xf2>
 ae0:	f7 01       	movw	r30, r14
 ae2:	93 fd       	sbrc	r25, 3
 ae4:	85 91       	lpm	r24, Z+
 ae6:	93 ff       	sbrs	r25, 3
 ae8:	81 91       	ld	r24, Z+
 aea:	7f 01       	movw	r14, r30
 aec:	81 11       	cpse	r24, r1
 aee:	b3 cf       	rjmp	.-154    	; 0xa56 <vfprintf+0x58>
 af0:	98 2f       	mov	r25, r24
 af2:	9f 7d       	andi	r25, 0xDF	; 223
 af4:	95 54       	subi	r25, 0x45	; 69
 af6:	93 30       	cpi	r25, 0x03	; 3
 af8:	28 f4       	brcc	.+10     	; 0xb04 <vfprintf+0x106>
 afa:	0c 5f       	subi	r16, 0xFC	; 252
 afc:	1f 4f       	sbci	r17, 0xFF	; 255
 afe:	9f e3       	ldi	r25, 0x3F	; 63
 b00:	99 83       	std	Y+1, r25	; 0x01
 b02:	0d c0       	rjmp	.+26     	; 0xb1e <vfprintf+0x120>
 b04:	83 36       	cpi	r24, 0x63	; 99
 b06:	31 f0       	breq	.+12     	; 0xb14 <vfprintf+0x116>
 b08:	83 37       	cpi	r24, 0x73	; 115
 b0a:	71 f0       	breq	.+28     	; 0xb28 <vfprintf+0x12a>
 b0c:	83 35       	cpi	r24, 0x53	; 83
 b0e:	09 f0       	breq	.+2      	; 0xb12 <vfprintf+0x114>
 b10:	55 c0       	rjmp	.+170    	; 0xbbc <vfprintf+0x1be>
 b12:	20 c0       	rjmp	.+64     	; 0xb54 <vfprintf+0x156>
 b14:	f8 01       	movw	r30, r16
 b16:	80 81       	ld	r24, Z
 b18:	89 83       	std	Y+1, r24	; 0x01
 b1a:	0e 5f       	subi	r16, 0xFE	; 254
 b1c:	1f 4f       	sbci	r17, 0xFF	; 255
 b1e:	88 24       	eor	r8, r8
 b20:	83 94       	inc	r8
 b22:	91 2c       	mov	r9, r1
 b24:	53 01       	movw	r10, r6
 b26:	12 c0       	rjmp	.+36     	; 0xb4c <vfprintf+0x14e>
 b28:	28 01       	movw	r4, r16
 b2a:	f2 e0       	ldi	r31, 0x02	; 2
 b2c:	4f 0e       	add	r4, r31
 b2e:	51 1c       	adc	r5, r1
 b30:	f8 01       	movw	r30, r16
 b32:	a0 80       	ld	r10, Z
 b34:	b1 80       	ldd	r11, Z+1	; 0x01
 b36:	36 fe       	sbrs	r3, 6
 b38:	03 c0       	rjmp	.+6      	; 0xb40 <vfprintf+0x142>
 b3a:	69 2d       	mov	r22, r9
 b3c:	70 e0       	ldi	r23, 0x00	; 0
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <vfprintf+0x146>
 b40:	6f ef       	ldi	r22, 0xFF	; 255
 b42:	7f ef       	ldi	r23, 0xFF	; 255
 b44:	c5 01       	movw	r24, r10
 b46:	38 d1       	rcall	.+624    	; 0xdb8 <strnlen>
 b48:	4c 01       	movw	r8, r24
 b4a:	82 01       	movw	r16, r4
 b4c:	f3 2d       	mov	r31, r3
 b4e:	ff 77       	andi	r31, 0x7F	; 127
 b50:	3f 2e       	mov	r3, r31
 b52:	15 c0       	rjmp	.+42     	; 0xb7e <vfprintf+0x180>
 b54:	28 01       	movw	r4, r16
 b56:	22 e0       	ldi	r18, 0x02	; 2
 b58:	42 0e       	add	r4, r18
 b5a:	51 1c       	adc	r5, r1
 b5c:	f8 01       	movw	r30, r16
 b5e:	a0 80       	ld	r10, Z
 b60:	b1 80       	ldd	r11, Z+1	; 0x01
 b62:	36 fe       	sbrs	r3, 6
 b64:	03 c0       	rjmp	.+6      	; 0xb6c <vfprintf+0x16e>
 b66:	69 2d       	mov	r22, r9
 b68:	70 e0       	ldi	r23, 0x00	; 0
 b6a:	02 c0       	rjmp	.+4      	; 0xb70 <vfprintf+0x172>
 b6c:	6f ef       	ldi	r22, 0xFF	; 255
 b6e:	7f ef       	ldi	r23, 0xFF	; 255
 b70:	c5 01       	movw	r24, r10
 b72:	17 d1       	rcall	.+558    	; 0xda2 <strnlen_P>
 b74:	4c 01       	movw	r8, r24
 b76:	f3 2d       	mov	r31, r3
 b78:	f0 68       	ori	r31, 0x80	; 128
 b7a:	3f 2e       	mov	r3, r31
 b7c:	82 01       	movw	r16, r4
 b7e:	33 fc       	sbrc	r3, 3
 b80:	19 c0       	rjmp	.+50     	; 0xbb4 <vfprintf+0x1b6>
 b82:	82 2d       	mov	r24, r2
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	88 16       	cp	r8, r24
 b88:	99 06       	cpc	r9, r25
 b8a:	a0 f4       	brcc	.+40     	; 0xbb4 <vfprintf+0x1b6>
 b8c:	b6 01       	movw	r22, r12
 b8e:	80 e2       	ldi	r24, 0x20	; 32
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	1d d1       	rcall	.+570    	; 0xdce <fputc>
 b94:	2a 94       	dec	r2
 b96:	f5 cf       	rjmp	.-22     	; 0xb82 <vfprintf+0x184>
 b98:	f5 01       	movw	r30, r10
 b9a:	37 fc       	sbrc	r3, 7
 b9c:	85 91       	lpm	r24, Z+
 b9e:	37 fe       	sbrs	r3, 7
 ba0:	81 91       	ld	r24, Z+
 ba2:	5f 01       	movw	r10, r30
 ba4:	b6 01       	movw	r22, r12
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	12 d1       	rcall	.+548    	; 0xdce <fputc>
 baa:	21 10       	cpse	r2, r1
 bac:	2a 94       	dec	r2
 bae:	21 e0       	ldi	r18, 0x01	; 1
 bb0:	82 1a       	sub	r8, r18
 bb2:	91 08       	sbc	r9, r1
 bb4:	81 14       	cp	r8, r1
 bb6:	91 04       	cpc	r9, r1
 bb8:	79 f7       	brne	.-34     	; 0xb98 <vfprintf+0x19a>
 bba:	e1 c0       	rjmp	.+450    	; 0xd7e <vfprintf+0x380>
 bbc:	84 36       	cpi	r24, 0x64	; 100
 bbe:	11 f0       	breq	.+4      	; 0xbc4 <vfprintf+0x1c6>
 bc0:	89 36       	cpi	r24, 0x69	; 105
 bc2:	39 f5       	brne	.+78     	; 0xc12 <vfprintf+0x214>
 bc4:	f8 01       	movw	r30, r16
 bc6:	37 fe       	sbrs	r3, 7
 bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <vfprintf+0x1da>
 bca:	60 81       	ld	r22, Z
 bcc:	71 81       	ldd	r23, Z+1	; 0x01
 bce:	82 81       	ldd	r24, Z+2	; 0x02
 bd0:	93 81       	ldd	r25, Z+3	; 0x03
 bd2:	0c 5f       	subi	r16, 0xFC	; 252
 bd4:	1f 4f       	sbci	r17, 0xFF	; 255
 bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <vfprintf+0x1ea>
 bd8:	60 81       	ld	r22, Z
 bda:	71 81       	ldd	r23, Z+1	; 0x01
 bdc:	07 2e       	mov	r0, r23
 bde:	00 0c       	add	r0, r0
 be0:	88 0b       	sbc	r24, r24
 be2:	99 0b       	sbc	r25, r25
 be4:	0e 5f       	subi	r16, 0xFE	; 254
 be6:	1f 4f       	sbci	r17, 0xFF	; 255
 be8:	f3 2d       	mov	r31, r3
 bea:	ff 76       	andi	r31, 0x6F	; 111
 bec:	3f 2e       	mov	r3, r31
 bee:	97 ff       	sbrs	r25, 7
 bf0:	09 c0       	rjmp	.+18     	; 0xc04 <vfprintf+0x206>
 bf2:	90 95       	com	r25
 bf4:	80 95       	com	r24
 bf6:	70 95       	com	r23
 bf8:	61 95       	neg	r22
 bfa:	7f 4f       	sbci	r23, 0xFF	; 255
 bfc:	8f 4f       	sbci	r24, 0xFF	; 255
 bfe:	9f 4f       	sbci	r25, 0xFF	; 255
 c00:	f0 68       	ori	r31, 0x80	; 128
 c02:	3f 2e       	mov	r3, r31
 c04:	2a e0       	ldi	r18, 0x0A	; 10
 c06:	30 e0       	ldi	r19, 0x00	; 0
 c08:	a3 01       	movw	r20, r6
 c0a:	1d d1       	rcall	.+570    	; 0xe46 <__ultoa_invert>
 c0c:	88 2e       	mov	r8, r24
 c0e:	86 18       	sub	r8, r6
 c10:	44 c0       	rjmp	.+136    	; 0xc9a <vfprintf+0x29c>
 c12:	85 37       	cpi	r24, 0x75	; 117
 c14:	31 f4       	brne	.+12     	; 0xc22 <vfprintf+0x224>
 c16:	23 2d       	mov	r18, r3
 c18:	2f 7e       	andi	r18, 0xEF	; 239
 c1a:	b2 2e       	mov	r11, r18
 c1c:	2a e0       	ldi	r18, 0x0A	; 10
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	25 c0       	rjmp	.+74     	; 0xc6c <vfprintf+0x26e>
 c22:	93 2d       	mov	r25, r3
 c24:	99 7f       	andi	r25, 0xF9	; 249
 c26:	b9 2e       	mov	r11, r25
 c28:	8f 36       	cpi	r24, 0x6F	; 111
 c2a:	c1 f0       	breq	.+48     	; 0xc5c <vfprintf+0x25e>
 c2c:	18 f4       	brcc	.+6      	; 0xc34 <vfprintf+0x236>
 c2e:	88 35       	cpi	r24, 0x58	; 88
 c30:	79 f0       	breq	.+30     	; 0xc50 <vfprintf+0x252>
 c32:	ae c0       	rjmp	.+348    	; 0xd90 <vfprintf+0x392>
 c34:	80 37       	cpi	r24, 0x70	; 112
 c36:	19 f0       	breq	.+6      	; 0xc3e <vfprintf+0x240>
 c38:	88 37       	cpi	r24, 0x78	; 120
 c3a:	21 f0       	breq	.+8      	; 0xc44 <vfprintf+0x246>
 c3c:	a9 c0       	rjmp	.+338    	; 0xd90 <vfprintf+0x392>
 c3e:	e9 2f       	mov	r30, r25
 c40:	e0 61       	ori	r30, 0x10	; 16
 c42:	be 2e       	mov	r11, r30
 c44:	b4 fe       	sbrs	r11, 4
 c46:	0d c0       	rjmp	.+26     	; 0xc62 <vfprintf+0x264>
 c48:	fb 2d       	mov	r31, r11
 c4a:	f4 60       	ori	r31, 0x04	; 4
 c4c:	bf 2e       	mov	r11, r31
 c4e:	09 c0       	rjmp	.+18     	; 0xc62 <vfprintf+0x264>
 c50:	34 fe       	sbrs	r3, 4
 c52:	0a c0       	rjmp	.+20     	; 0xc68 <vfprintf+0x26a>
 c54:	29 2f       	mov	r18, r25
 c56:	26 60       	ori	r18, 0x06	; 6
 c58:	b2 2e       	mov	r11, r18
 c5a:	06 c0       	rjmp	.+12     	; 0xc68 <vfprintf+0x26a>
 c5c:	28 e0       	ldi	r18, 0x08	; 8
 c5e:	30 e0       	ldi	r19, 0x00	; 0
 c60:	05 c0       	rjmp	.+10     	; 0xc6c <vfprintf+0x26e>
 c62:	20 e1       	ldi	r18, 0x10	; 16
 c64:	30 e0       	ldi	r19, 0x00	; 0
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x26e>
 c68:	20 e1       	ldi	r18, 0x10	; 16
 c6a:	32 e0       	ldi	r19, 0x02	; 2
 c6c:	f8 01       	movw	r30, r16
 c6e:	b7 fe       	sbrs	r11, 7
 c70:	07 c0       	rjmp	.+14     	; 0xc80 <vfprintf+0x282>
 c72:	60 81       	ld	r22, Z
 c74:	71 81       	ldd	r23, Z+1	; 0x01
 c76:	82 81       	ldd	r24, Z+2	; 0x02
 c78:	93 81       	ldd	r25, Z+3	; 0x03
 c7a:	0c 5f       	subi	r16, 0xFC	; 252
 c7c:	1f 4f       	sbci	r17, 0xFF	; 255
 c7e:	06 c0       	rjmp	.+12     	; 0xc8c <vfprintf+0x28e>
 c80:	60 81       	ld	r22, Z
 c82:	71 81       	ldd	r23, Z+1	; 0x01
 c84:	80 e0       	ldi	r24, 0x00	; 0
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	0e 5f       	subi	r16, 0xFE	; 254
 c8a:	1f 4f       	sbci	r17, 0xFF	; 255
 c8c:	a3 01       	movw	r20, r6
 c8e:	db d0       	rcall	.+438    	; 0xe46 <__ultoa_invert>
 c90:	88 2e       	mov	r8, r24
 c92:	86 18       	sub	r8, r6
 c94:	fb 2d       	mov	r31, r11
 c96:	ff 77       	andi	r31, 0x7F	; 127
 c98:	3f 2e       	mov	r3, r31
 c9a:	36 fe       	sbrs	r3, 6
 c9c:	0d c0       	rjmp	.+26     	; 0xcb8 <vfprintf+0x2ba>
 c9e:	23 2d       	mov	r18, r3
 ca0:	2e 7f       	andi	r18, 0xFE	; 254
 ca2:	a2 2e       	mov	r10, r18
 ca4:	89 14       	cp	r8, r9
 ca6:	58 f4       	brcc	.+22     	; 0xcbe <vfprintf+0x2c0>
 ca8:	34 fe       	sbrs	r3, 4
 caa:	0b c0       	rjmp	.+22     	; 0xcc2 <vfprintf+0x2c4>
 cac:	32 fc       	sbrc	r3, 2
 cae:	09 c0       	rjmp	.+18     	; 0xcc2 <vfprintf+0x2c4>
 cb0:	83 2d       	mov	r24, r3
 cb2:	8e 7e       	andi	r24, 0xEE	; 238
 cb4:	a8 2e       	mov	r10, r24
 cb6:	05 c0       	rjmp	.+10     	; 0xcc2 <vfprintf+0x2c4>
 cb8:	b8 2c       	mov	r11, r8
 cba:	a3 2c       	mov	r10, r3
 cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <vfprintf+0x2c6>
 cbe:	b8 2c       	mov	r11, r8
 cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <vfprintf+0x2c6>
 cc2:	b9 2c       	mov	r11, r9
 cc4:	a4 fe       	sbrs	r10, 4
 cc6:	0f c0       	rjmp	.+30     	; 0xce6 <vfprintf+0x2e8>
 cc8:	fe 01       	movw	r30, r28
 cca:	e8 0d       	add	r30, r8
 ccc:	f1 1d       	adc	r31, r1
 cce:	80 81       	ld	r24, Z
 cd0:	80 33       	cpi	r24, 0x30	; 48
 cd2:	21 f4       	brne	.+8      	; 0xcdc <vfprintf+0x2de>
 cd4:	9a 2d       	mov	r25, r10
 cd6:	99 7e       	andi	r25, 0xE9	; 233
 cd8:	a9 2e       	mov	r10, r25
 cda:	09 c0       	rjmp	.+18     	; 0xcee <vfprintf+0x2f0>
 cdc:	a2 fe       	sbrs	r10, 2
 cde:	06 c0       	rjmp	.+12     	; 0xcec <vfprintf+0x2ee>
 ce0:	b3 94       	inc	r11
 ce2:	b3 94       	inc	r11
 ce4:	04 c0       	rjmp	.+8      	; 0xcee <vfprintf+0x2f0>
 ce6:	8a 2d       	mov	r24, r10
 ce8:	86 78       	andi	r24, 0x86	; 134
 cea:	09 f0       	breq	.+2      	; 0xcee <vfprintf+0x2f0>
 cec:	b3 94       	inc	r11
 cee:	a3 fc       	sbrc	r10, 3
 cf0:	10 c0       	rjmp	.+32     	; 0xd12 <vfprintf+0x314>
 cf2:	a0 fe       	sbrs	r10, 0
 cf4:	06 c0       	rjmp	.+12     	; 0xd02 <vfprintf+0x304>
 cf6:	b2 14       	cp	r11, r2
 cf8:	80 f4       	brcc	.+32     	; 0xd1a <vfprintf+0x31c>
 cfa:	28 0c       	add	r2, r8
 cfc:	92 2c       	mov	r9, r2
 cfe:	9b 18       	sub	r9, r11
 d00:	0d c0       	rjmp	.+26     	; 0xd1c <vfprintf+0x31e>
 d02:	b2 14       	cp	r11, r2
 d04:	58 f4       	brcc	.+22     	; 0xd1c <vfprintf+0x31e>
 d06:	b6 01       	movw	r22, r12
 d08:	80 e2       	ldi	r24, 0x20	; 32
 d0a:	90 e0       	ldi	r25, 0x00	; 0
 d0c:	60 d0       	rcall	.+192    	; 0xdce <fputc>
 d0e:	b3 94       	inc	r11
 d10:	f8 cf       	rjmp	.-16     	; 0xd02 <vfprintf+0x304>
 d12:	b2 14       	cp	r11, r2
 d14:	18 f4       	brcc	.+6      	; 0xd1c <vfprintf+0x31e>
 d16:	2b 18       	sub	r2, r11
 d18:	02 c0       	rjmp	.+4      	; 0xd1e <vfprintf+0x320>
 d1a:	98 2c       	mov	r9, r8
 d1c:	21 2c       	mov	r2, r1
 d1e:	a4 fe       	sbrs	r10, 4
 d20:	0f c0       	rjmp	.+30     	; 0xd40 <vfprintf+0x342>
 d22:	b6 01       	movw	r22, r12
 d24:	80 e3       	ldi	r24, 0x30	; 48
 d26:	90 e0       	ldi	r25, 0x00	; 0
 d28:	52 d0       	rcall	.+164    	; 0xdce <fputc>
 d2a:	a2 fe       	sbrs	r10, 2
 d2c:	16 c0       	rjmp	.+44     	; 0xd5a <vfprintf+0x35c>
 d2e:	a1 fc       	sbrc	r10, 1
 d30:	03 c0       	rjmp	.+6      	; 0xd38 <vfprintf+0x33a>
 d32:	88 e7       	ldi	r24, 0x78	; 120
 d34:	90 e0       	ldi	r25, 0x00	; 0
 d36:	02 c0       	rjmp	.+4      	; 0xd3c <vfprintf+0x33e>
 d38:	88 e5       	ldi	r24, 0x58	; 88
 d3a:	90 e0       	ldi	r25, 0x00	; 0
 d3c:	b6 01       	movw	r22, r12
 d3e:	0c c0       	rjmp	.+24     	; 0xd58 <vfprintf+0x35a>
 d40:	8a 2d       	mov	r24, r10
 d42:	86 78       	andi	r24, 0x86	; 134
 d44:	51 f0       	breq	.+20     	; 0xd5a <vfprintf+0x35c>
 d46:	a1 fe       	sbrs	r10, 1
 d48:	02 c0       	rjmp	.+4      	; 0xd4e <vfprintf+0x350>
 d4a:	8b e2       	ldi	r24, 0x2B	; 43
 d4c:	01 c0       	rjmp	.+2      	; 0xd50 <vfprintf+0x352>
 d4e:	80 e2       	ldi	r24, 0x20	; 32
 d50:	a7 fc       	sbrc	r10, 7
 d52:	8d e2       	ldi	r24, 0x2D	; 45
 d54:	b6 01       	movw	r22, r12
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	3a d0       	rcall	.+116    	; 0xdce <fputc>
 d5a:	89 14       	cp	r8, r9
 d5c:	30 f4       	brcc	.+12     	; 0xd6a <vfprintf+0x36c>
 d5e:	b6 01       	movw	r22, r12
 d60:	80 e3       	ldi	r24, 0x30	; 48
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	34 d0       	rcall	.+104    	; 0xdce <fputc>
 d66:	9a 94       	dec	r9
 d68:	f8 cf       	rjmp	.-16     	; 0xd5a <vfprintf+0x35c>
 d6a:	8a 94       	dec	r8
 d6c:	f3 01       	movw	r30, r6
 d6e:	e8 0d       	add	r30, r8
 d70:	f1 1d       	adc	r31, r1
 d72:	80 81       	ld	r24, Z
 d74:	b6 01       	movw	r22, r12
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	2a d0       	rcall	.+84     	; 0xdce <fputc>
 d7a:	81 10       	cpse	r8, r1
 d7c:	f6 cf       	rjmp	.-20     	; 0xd6a <vfprintf+0x36c>
 d7e:	22 20       	and	r2, r2
 d80:	09 f4       	brne	.+2      	; 0xd84 <vfprintf+0x386>
 d82:	4e ce       	rjmp	.-868    	; 0xa20 <vfprintf+0x22>
 d84:	b6 01       	movw	r22, r12
 d86:	80 e2       	ldi	r24, 0x20	; 32
 d88:	90 e0       	ldi	r25, 0x00	; 0
 d8a:	21 d0       	rcall	.+66     	; 0xdce <fputc>
 d8c:	2a 94       	dec	r2
 d8e:	f7 cf       	rjmp	.-18     	; 0xd7e <vfprintf+0x380>
 d90:	f6 01       	movw	r30, r12
 d92:	86 81       	ldd	r24, Z+6	; 0x06
 d94:	97 81       	ldd	r25, Z+7	; 0x07
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0x39e>
 d98:	8f ef       	ldi	r24, 0xFF	; 255
 d9a:	9f ef       	ldi	r25, 0xFF	; 255
 d9c:	2b 96       	adiw	r28, 0x0b	; 11
 d9e:	e2 e1       	ldi	r30, 0x12	; 18
 da0:	cc c0       	rjmp	.+408    	; 0xf3a <__epilogue_restores__>

00000da2 <strnlen_P>:
 da2:	fc 01       	movw	r30, r24
 da4:	05 90       	lpm	r0, Z+
 da6:	61 50       	subi	r22, 0x01	; 1
 da8:	70 40       	sbci	r23, 0x00	; 0
 daa:	01 10       	cpse	r0, r1
 dac:	d8 f7       	brcc	.-10     	; 0xda4 <strnlen_P+0x2>
 dae:	80 95       	com	r24
 db0:	90 95       	com	r25
 db2:	8e 0f       	add	r24, r30
 db4:	9f 1f       	adc	r25, r31
 db6:	08 95       	ret

00000db8 <strnlen>:
 db8:	fc 01       	movw	r30, r24
 dba:	61 50       	subi	r22, 0x01	; 1
 dbc:	70 40       	sbci	r23, 0x00	; 0
 dbe:	01 90       	ld	r0, Z+
 dc0:	01 10       	cpse	r0, r1
 dc2:	d8 f7       	brcc	.-10     	; 0xdba <strnlen+0x2>
 dc4:	80 95       	com	r24
 dc6:	90 95       	com	r25
 dc8:	8e 0f       	add	r24, r30
 dca:	9f 1f       	adc	r25, r31
 dcc:	08 95       	ret

00000dce <fputc>:
 dce:	0f 93       	push	r16
 dd0:	1f 93       	push	r17
 dd2:	cf 93       	push	r28
 dd4:	df 93       	push	r29
 dd6:	fb 01       	movw	r30, r22
 dd8:	23 81       	ldd	r18, Z+3	; 0x03
 dda:	21 fd       	sbrc	r18, 1
 ddc:	03 c0       	rjmp	.+6      	; 0xde4 <fputc+0x16>
 dde:	8f ef       	ldi	r24, 0xFF	; 255
 de0:	9f ef       	ldi	r25, 0xFF	; 255
 de2:	2c c0       	rjmp	.+88     	; 0xe3c <fputc+0x6e>
 de4:	22 ff       	sbrs	r18, 2
 de6:	16 c0       	rjmp	.+44     	; 0xe14 <fputc+0x46>
 de8:	46 81       	ldd	r20, Z+6	; 0x06
 dea:	57 81       	ldd	r21, Z+7	; 0x07
 dec:	24 81       	ldd	r18, Z+4	; 0x04
 dee:	35 81       	ldd	r19, Z+5	; 0x05
 df0:	42 17       	cp	r20, r18
 df2:	53 07       	cpc	r21, r19
 df4:	44 f4       	brge	.+16     	; 0xe06 <fputc+0x38>
 df6:	a0 81       	ld	r26, Z
 df8:	b1 81       	ldd	r27, Z+1	; 0x01
 dfa:	9d 01       	movw	r18, r26
 dfc:	2f 5f       	subi	r18, 0xFF	; 255
 dfe:	3f 4f       	sbci	r19, 0xFF	; 255
 e00:	31 83       	std	Z+1, r19	; 0x01
 e02:	20 83       	st	Z, r18
 e04:	8c 93       	st	X, r24
 e06:	26 81       	ldd	r18, Z+6	; 0x06
 e08:	37 81       	ldd	r19, Z+7	; 0x07
 e0a:	2f 5f       	subi	r18, 0xFF	; 255
 e0c:	3f 4f       	sbci	r19, 0xFF	; 255
 e0e:	37 83       	std	Z+7, r19	; 0x07
 e10:	26 83       	std	Z+6, r18	; 0x06
 e12:	14 c0       	rjmp	.+40     	; 0xe3c <fputc+0x6e>
 e14:	8b 01       	movw	r16, r22
 e16:	ec 01       	movw	r28, r24
 e18:	fb 01       	movw	r30, r22
 e1a:	00 84       	ldd	r0, Z+8	; 0x08
 e1c:	f1 85       	ldd	r31, Z+9	; 0x09
 e1e:	e0 2d       	mov	r30, r0
 e20:	09 95       	icall
 e22:	89 2b       	or	r24, r25
 e24:	e1 f6       	brne	.-72     	; 0xdde <fputc+0x10>
 e26:	d8 01       	movw	r26, r16
 e28:	16 96       	adiw	r26, 0x06	; 6
 e2a:	8d 91       	ld	r24, X+
 e2c:	9c 91       	ld	r25, X
 e2e:	17 97       	sbiw	r26, 0x07	; 7
 e30:	01 96       	adiw	r24, 0x01	; 1
 e32:	17 96       	adiw	r26, 0x07	; 7
 e34:	9c 93       	st	X, r25
 e36:	8e 93       	st	-X, r24
 e38:	16 97       	sbiw	r26, 0x06	; 6
 e3a:	ce 01       	movw	r24, r28
 e3c:	df 91       	pop	r29
 e3e:	cf 91       	pop	r28
 e40:	1f 91       	pop	r17
 e42:	0f 91       	pop	r16
 e44:	08 95       	ret

00000e46 <__ultoa_invert>:
 e46:	fa 01       	movw	r30, r20
 e48:	aa 27       	eor	r26, r26
 e4a:	28 30       	cpi	r18, 0x08	; 8
 e4c:	51 f1       	breq	.+84     	; 0xea2 <__ultoa_invert+0x5c>
 e4e:	20 31       	cpi	r18, 0x10	; 16
 e50:	81 f1       	breq	.+96     	; 0xeb2 <__ultoa_invert+0x6c>
 e52:	e8 94       	clt
 e54:	6f 93       	push	r22
 e56:	6e 7f       	andi	r22, 0xFE	; 254
 e58:	6e 5f       	subi	r22, 0xFE	; 254
 e5a:	7f 4f       	sbci	r23, 0xFF	; 255
 e5c:	8f 4f       	sbci	r24, 0xFF	; 255
 e5e:	9f 4f       	sbci	r25, 0xFF	; 255
 e60:	af 4f       	sbci	r26, 0xFF	; 255
 e62:	b1 e0       	ldi	r27, 0x01	; 1
 e64:	3e d0       	rcall	.+124    	; 0xee2 <__ultoa_invert+0x9c>
 e66:	b4 e0       	ldi	r27, 0x04	; 4
 e68:	3c d0       	rcall	.+120    	; 0xee2 <__ultoa_invert+0x9c>
 e6a:	67 0f       	add	r22, r23
 e6c:	78 1f       	adc	r23, r24
 e6e:	89 1f       	adc	r24, r25
 e70:	9a 1f       	adc	r25, r26
 e72:	a1 1d       	adc	r26, r1
 e74:	68 0f       	add	r22, r24
 e76:	79 1f       	adc	r23, r25
 e78:	8a 1f       	adc	r24, r26
 e7a:	91 1d       	adc	r25, r1
 e7c:	a1 1d       	adc	r26, r1
 e7e:	6a 0f       	add	r22, r26
 e80:	71 1d       	adc	r23, r1
 e82:	81 1d       	adc	r24, r1
 e84:	91 1d       	adc	r25, r1
 e86:	a1 1d       	adc	r26, r1
 e88:	20 d0       	rcall	.+64     	; 0xeca <__ultoa_invert+0x84>
 e8a:	09 f4       	brne	.+2      	; 0xe8e <__ultoa_invert+0x48>
 e8c:	68 94       	set
 e8e:	3f 91       	pop	r19
 e90:	2a e0       	ldi	r18, 0x0A	; 10
 e92:	26 9f       	mul	r18, r22
 e94:	11 24       	eor	r1, r1
 e96:	30 19       	sub	r19, r0
 e98:	30 5d       	subi	r19, 0xD0	; 208
 e9a:	31 93       	st	Z+, r19
 e9c:	de f6       	brtc	.-74     	; 0xe54 <__ultoa_invert+0xe>
 e9e:	cf 01       	movw	r24, r30
 ea0:	08 95       	ret
 ea2:	46 2f       	mov	r20, r22
 ea4:	47 70       	andi	r20, 0x07	; 7
 ea6:	40 5d       	subi	r20, 0xD0	; 208
 ea8:	41 93       	st	Z+, r20
 eaa:	b3 e0       	ldi	r27, 0x03	; 3
 eac:	0f d0       	rcall	.+30     	; 0xecc <__ultoa_invert+0x86>
 eae:	c9 f7       	brne	.-14     	; 0xea2 <__ultoa_invert+0x5c>
 eb0:	f6 cf       	rjmp	.-20     	; 0xe9e <__ultoa_invert+0x58>
 eb2:	46 2f       	mov	r20, r22
 eb4:	4f 70       	andi	r20, 0x0F	; 15
 eb6:	40 5d       	subi	r20, 0xD0	; 208
 eb8:	4a 33       	cpi	r20, 0x3A	; 58
 eba:	18 f0       	brcs	.+6      	; 0xec2 <__ultoa_invert+0x7c>
 ebc:	49 5d       	subi	r20, 0xD9	; 217
 ebe:	31 fd       	sbrc	r19, 1
 ec0:	40 52       	subi	r20, 0x20	; 32
 ec2:	41 93       	st	Z+, r20
 ec4:	02 d0       	rcall	.+4      	; 0xeca <__ultoa_invert+0x84>
 ec6:	a9 f7       	brne	.-22     	; 0xeb2 <__ultoa_invert+0x6c>
 ec8:	ea cf       	rjmp	.-44     	; 0xe9e <__ultoa_invert+0x58>
 eca:	b4 e0       	ldi	r27, 0x04	; 4
 ecc:	a6 95       	lsr	r26
 ece:	97 95       	ror	r25
 ed0:	87 95       	ror	r24
 ed2:	77 95       	ror	r23
 ed4:	67 95       	ror	r22
 ed6:	ba 95       	dec	r27
 ed8:	c9 f7       	brne	.-14     	; 0xecc <__ultoa_invert+0x86>
 eda:	00 97       	sbiw	r24, 0x00	; 0
 edc:	61 05       	cpc	r22, r1
 ede:	71 05       	cpc	r23, r1
 ee0:	08 95       	ret
 ee2:	9b 01       	movw	r18, r22
 ee4:	ac 01       	movw	r20, r24
 ee6:	0a 2e       	mov	r0, r26
 ee8:	06 94       	lsr	r0
 eea:	57 95       	ror	r21
 eec:	47 95       	ror	r20
 eee:	37 95       	ror	r19
 ef0:	27 95       	ror	r18
 ef2:	ba 95       	dec	r27
 ef4:	c9 f7       	brne	.-14     	; 0xee8 <__ultoa_invert+0xa2>
 ef6:	62 0f       	add	r22, r18
 ef8:	73 1f       	adc	r23, r19
 efa:	84 1f       	adc	r24, r20
 efc:	95 1f       	adc	r25, r21
 efe:	a0 1d       	adc	r26, r0
 f00:	08 95       	ret

00000f02 <__prologue_saves__>:
 f02:	2f 92       	push	r2
 f04:	3f 92       	push	r3
 f06:	4f 92       	push	r4
 f08:	5f 92       	push	r5
 f0a:	6f 92       	push	r6
 f0c:	7f 92       	push	r7
 f0e:	8f 92       	push	r8
 f10:	9f 92       	push	r9
 f12:	af 92       	push	r10
 f14:	bf 92       	push	r11
 f16:	cf 92       	push	r12
 f18:	df 92       	push	r13
 f1a:	ef 92       	push	r14
 f1c:	ff 92       	push	r15
 f1e:	0f 93       	push	r16
 f20:	1f 93       	push	r17
 f22:	cf 93       	push	r28
 f24:	df 93       	push	r29
 f26:	cd b7       	in	r28, 0x3d	; 61
 f28:	de b7       	in	r29, 0x3e	; 62
 f2a:	ca 1b       	sub	r28, r26
 f2c:	db 0b       	sbc	r29, r27
 f2e:	0f b6       	in	r0, 0x3f	; 63
 f30:	f8 94       	cli
 f32:	de bf       	out	0x3e, r29	; 62
 f34:	0f be       	out	0x3f, r0	; 63
 f36:	cd bf       	out	0x3d, r28	; 61
 f38:	09 94       	ijmp

00000f3a <__epilogue_restores__>:
 f3a:	2a 88       	ldd	r2, Y+18	; 0x12
 f3c:	39 88       	ldd	r3, Y+17	; 0x11
 f3e:	48 88       	ldd	r4, Y+16	; 0x10
 f40:	5f 84       	ldd	r5, Y+15	; 0x0f
 f42:	6e 84       	ldd	r6, Y+14	; 0x0e
 f44:	7d 84       	ldd	r7, Y+13	; 0x0d
 f46:	8c 84       	ldd	r8, Y+12	; 0x0c
 f48:	9b 84       	ldd	r9, Y+11	; 0x0b
 f4a:	aa 84       	ldd	r10, Y+10	; 0x0a
 f4c:	b9 84       	ldd	r11, Y+9	; 0x09
 f4e:	c8 84       	ldd	r12, Y+8	; 0x08
 f50:	df 80       	ldd	r13, Y+7	; 0x07
 f52:	ee 80       	ldd	r14, Y+6	; 0x06
 f54:	fd 80       	ldd	r15, Y+5	; 0x05
 f56:	0c 81       	ldd	r16, Y+4	; 0x04
 f58:	1b 81       	ldd	r17, Y+3	; 0x03
 f5a:	aa 81       	ldd	r26, Y+2	; 0x02
 f5c:	b9 81       	ldd	r27, Y+1	; 0x01
 f5e:	ce 0f       	add	r28, r30
 f60:	d1 1d       	adc	r29, r1
 f62:	0f b6       	in	r0, 0x3f	; 63
 f64:	f8 94       	cli
 f66:	de bf       	out	0x3e, r29	; 62
 f68:	0f be       	out	0x3f, r0	; 63
 f6a:	cd bf       	out	0x3d, r28	; 61
 f6c:	ed 01       	movw	r28, r26
 f6e:	08 95       	ret

00000f70 <_exit>:
 f70:	f8 94       	cli

00000f72 <__stop_program>:
 f72:	ff cf       	rjmp	.-2      	; 0xf72 <__stop_program>
